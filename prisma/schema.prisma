generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Movement {
  @@map("movements")

  id                      Int               @id @default(autoincrement())
  description             String
  value                   Decimal
  financialCategoryId     Int               @map("financial_category_id")
  financialCategory       FinancialCategory @relation(fields: [financialCategoryId], references: [id])
  accountId               Int               @map("account_id")
  account                 Account           @relation(fields: [accountId], references: [id])
  dateMaturity            DateTime?         @map("date_maturity") @db.Date
  dateCompetency          DateTime?         @map("date_competency") @db.Date
  datePayment             DateTime?         @map("date_payment") @db.Date
  paymentMethods          String?           @map("payment_methods") @db.VarChar(255)
  userId                  Int?              @map("user_id")
  user                    User?             @relation(fields: [userId], references: [id])
  procedureId             Int?              @map("procedure_id")
  procedure               Procedure?        @relation(fields: [procedureId], references: [id])
  contactId               Int?              @map("contact_id")
  contact                 Contact?          @relation(fields: [contactId], references: [id])
  entityId                Int               @map("entity_id")
  entity                  Entity            @relation(fields: [entityId], references: [id])
  agreementText           String?           @map("agreement") @db.VarChar(255)
  additional              String?           @db.Text
  type                    Int // @db.TinyInt ??
  creditType              Int?              @map("credit_type") // @db.TinyInt ??
  createdAt               DateTime          @default(now()) @map("created_at")
  updatedAt               DateTime          @default(now()) @map("updated_at")
  appointmentId           Int?              @map("appointment_id")
  appointment             Appointment?      @relation(fields: [appointmentId], references: [id])
  information             String?           @db.Text
  agreementId             Int?              @map("agreement_id")
  agreement               Agreement?        @relation(fields: [agreementId], references: [id])
  ownerId                 Int               @map("owner")
  owner                   User?             @relation("movementOwner", fields: [ownerId], references: [id])
  movementId              Int?              @map("movement_id")
  movement                Movement?         @relation("movementMovement", fields: [movementId], references: [id])
  fileId                  Int?              @map("file_id")
  file                    File?             @relation("fileMovement", fields: [fileId], references: [id])
  costCenterId            Int?              @map("cost_center_id")
  costCenter              CostCenter?       @relation(fields: [costCenterId], references: [id])
  deletedAt               DateTime?         @map("deleted_at") @db.Timestamp()
  isDeleted               Int               @default(0) @map("is_deleted") // @db.TinyInt ??
  token                   String            @db.VarChar(255)
  appointmentPackageToken String?           @map("appointment_package_token") @db.VarChar(255)
  recurrenceEntryToken    String?           @map("recurrence_entry_token") @db.VarChar(255)
  recurrenceToken         String?           @map("recurrence_token") @db.VarChar(255)
  recurrenceType          Int?              @map("recurrence_type") // @db.TinyInt ??
  nfeGenerated            Int?              @map("nfe_generated") // @db.TinyInt ??
  taxMovementId           Int?              @map("tax_movement_id")
  taxMovement             Movement?         @relation("movementTax", fields: [taxMovementId], references: [id])
  paymentMethodId         Int?              @map("payment_method_id")
  paymentMethod           PaymentMethod?    @relation(fields: [paymentMethodId], references: [id])
  taxType                 Int               @map("tax_type") // @db.TinyInt ??
  taxValue                Decimal           @map("tax_value")
  totalTaxes              Decimal           @map("total_taxes")
  partialPayment          Int?              @map("partial_payment") // @db.TinyInt ??
  groupToken              String?           @map("group_token") @db.VarChar(255)
  packageRenewalToken     String?           @map("package_renewal_token") @db.VarChar(255)
  startPeriodRenewal      DateTime?         @map("start_period_renewal") @db.Date

  files             File[]     @relation("movementFile")
  movementMovements Movement[] @relation("movementMovement")
  movementTaxes     Movement[] @relation("movementTax")
}

model Appointment {
  id                  Int        @id @default(autoincrement())
  date                DateTime   @db.Date
  contactId           Int        @map("contact_id")
  contact             Contact    @relation(fields: [contactId], references: [id])
  createdAt           DateTime   @default(now()) @map("created_at")
  updatedAt           DateTime   @default(now()) @map("updated_at")
  userId              Int        @map("user_id")
  user                User       @relation(fields: [userId], references: [id])
  start               DateTime   @db.Time()
  end                 DateTime   @db.Time()
  agreementNumber     String     @map("agreement_number") @db.VarChar(255)
  blockingReason      String     @map("blocking_reason") @db.Text
  comment             String     @db.Text
  agreementId         Int        @map("agreement_id")
  agreement           Agreement? @relation(fields: [agreementId], references: [id])
  statusId            Int        @map("status_id")
  status              Status?    @relation(fields: [statusId], references: [id])
  procedureId         Int        @map("procedure_id")
  procedure           Procedure? @relation(fields: [procedureId], references: [id])
  authorizationCode   String     @map("authorization_code") @db.VarChar(255)
  roomId              Int        @map("room_id")
  room                Room?      @relation(fields: [roomId], references: [id])
  repetition          String     @db.VarChar(255)
  allUsers            String     @map("all_users") @db.VarChar(255)
  blockSchedules      Int        @map("block_schedules") // @db.TinyInt ??
  token               String     @db.VarChar(255)
  confirmed           Int        @map("confirmed") // @db.TinyInt ??
  entityId            Int        @map("entity_id")
  entity              Entity?    @relation(fields: [entityId], references: [id])
  importToken         String     @map("import_token") @db.VarChar(255)
  hangoutLink         String     @map("hangout_link") @db.VarChar(255)
  deletedAt           DateTime   @map("deleted_at") @db.Timestamp()
  isDeleted           Int        @map("is_deleted") // @db.TinyInt ??
  confirmedAt         DateTime   @map("confirmed_at") @db.Timestamp()
  repetitionDetails   Json       @map("repetition_details")
  packageRenewalToken String     @map("package_renewal_token") @db.VarChar(255)
  billed              Int        @map("billed") // @db.TinyInt ??

  movements Movement[]

  @@map("appointments")
}

model Room {
  id                Int      @id @default(autoincrement())
  name              String
  limitAppointments Int      @map("limit_appointments")
  entityId          Int      @map("entity_id")
  entity            Entity   @relation(fields: [entityId], references: [id])
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @default(now()) @map("updated_at")

  appointments Appointment[]

  @@map("rooms")
}

model Procedure {
  id                Int      @id @default(autoincrement())
  name              String
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @default(now()) @map("updated_at")
  value             Decimal
  edit              Int // @db.TinyInt ??
  entityId          Int      @map("entity_id")
  entity            Entity   @relation(fields: [entityId], references: [id])
  accountId         Int      @map("account_id")
  account           Account  @relation(fields: [accountId], references: [id])
  deletedAt         DateTime @map("deleted_at")
  commission        Decimal
  commissionType    Int      @map("commission_type") // @db.TinyInt ??
  tussCode          String   @map("tuss_code") @db.VarChar(255)
  registerComission Int      @map("register_comission") // @db.TinyInt ??

  movements    Movement[]
  appointments Appointment[]

  @@map("procedures")
}

model FinancialCategory {
  id        Int      @id @default(autoincrement())
  name      String
  type      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  entityId  Int      @map("entity_id")
  entity    Entity   @relation(fields: [entityId], references: [id])
  deletedAt DateTime @map("deleted_at")

  movement Movement[]

  @@map("financial_categories")
}

model Entity {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  financialCategories FinancialCategory[]
  account             Account[]
  status              Status[]
  contact             Contact[]
  image               Image[]
  mktProfile          MktProfile[]
  agreement           Agreement[]
  doctor              Doctor[]
  imports             Import[]
  procedures          Procedure[]
  movements           Movement[]
  rooms               Room[]
  appointments        Appointment[]
  files               File[]
  customDocuments     CustomDocument[]
  costCenter          CostCenter[]
  paymentMethod       PaymentMethod[]

  @@map("entities")
}

model Account {
  id           Int       @id @default(autoincrement()) //@db.UnsignedInt ??
  name         String    @db.VarChar(255)
  initialValue Decimal   @default(0.00) @map("initial_value") @db.Decimal(10, 2)
  date         DateTime? @db.Date
  entityId     Int?      @map("entity_id")
  entity       Entity?   @relation(fields: [entityId], references: [id])
  createdAt    DateTime? @map("created_at") @db.Timestamp()
  updatedAt    DateTime? @map("updated_at") @db.Timestamp()

  primary    Int?
  //appointment_packages appointment_packages[]
  movement   Movement[]
  procedures Procedure[]

  @@map("accounts")
}

model User {
  id                       Int        @id @default(autoincrement())
  name                     String     @db.VarChar(255)
  email                    String     @unique @db.VarChar(255)
  password                 String     @db.VarChar(255)
  remeberToken             String?    @map("remeber_token") @db.VarChar(100)
  createdAt                DateTime   @default(now()) @map("created_at")
  updatedAt                DateTime   @default(now()) @map("updated_at")
  crefito                  String?    @db.VarChar(255)
  area                     String?    @db.VarChar(255)
  lastLoginAt              DateTime   @map("last_login_at")
  lastEntityLogin          Int        @map("last_entity_login")
  qtyInteractions          Int        @map("qty_interactions")
  editUpdatePatients       Int        @map("edit_update_patients") // @db.TinyInt ??
  informations             String     @db.Text
  adminPartner             Int        @map("admin_partner") // @db.UnsignedInt ??
  statusId                 Int        @map("status_id") // @db.UnsignedInt ??
  status                   Status?    @relation(fields: [statusId], references: [id])
  attendanceFinish         Int        @map("attendance_finish") // @db.TinyInt ??
  attendanceAuthorization  Int        @map("attendance_authorization") // @db.TinyInt ??
  deleteAt                 DateTime?  @map("delete_at") @db.Timestamp()
  importToken              String?    @map("import_token") @db.VarChar(255)
  contactId                Int?       @map("contact_id") // @db.UnsignedInt ??
  contact                  Contact?   @relation(fields: [contactId], references: [id])
  specialtis               String     @db.VarChar(255)
  viewMovementsSecretaries Int        @map("view_movements_secretaries") @db.SmallInt
  temporaryLoginToken      String     @map("temporary_login_token") @db.VarChar(255)
  alertNotLoginAt          DateTime   @map("alert_not_login_at")
  onlineAlert              Int        @map("online_alert") // @db.TinyInt ??
  pipedrivePersonId        Int        @map("pipedrive_person_id")
  viewUserInfo             Int        @map("view_user_info") // @db.TinyInt ??
  transcribeAudio          Int        @map("transcribe_audio") // @db.TinyInt ??
  hidePatientsContact      Int        @map("hide_patients_contact") // @db.TinyInt ??
  destroyAppointment       Int        @map("destroy_appointment") // @db.TinyInt ??
  nfePermission            Int        @map("nfe_permission") // @db.TinyInt ??
  createSchedule           Int        @map("create_schedule") // @db.TinyInt ??
  viewCommission           Int        @map("view_commission") // @db.TinyInt ??
  auditAgreementId         Int        @map("audit_agreement_id") // @db.UnsignedInt ??
  auditAgreement           Agreement? @relation(fields: [auditAgreementId], references: [id])
  auditAttendanceFrom      DateTime   @map("audit_attendance_from") @db.Date
  allowEditAppointmentData Int        @map("allow_edit_appointment_data") // @db.TinyInt ??

  movements     Movement[]
  image         Image[]
  contacts      Contact[]     @relation("professionalIndicationUser")
  imports       Import[]
  appointments  Appointment[]
  movementOwner Movement[]    @relation("movementOwner")
  files         File[]

  @@map("users")
}

model Status {
  id                              Int      @id @default(autoincrement())
  name                            String   @db.VarChar(255)
  color                           String   @db.VarChar(255)
  entityId                        Int?     @map("entity_id")
  entity                          Entity?  @relation(fields: [entityId], references: [id])
  createdAt                       DateTime @default(now()) @map("created_at")
  updatedAt                       DateTime @default(now()) @map("updated_at")
  status                          Int // @db.TinyInt ??
  deleteFinance                   Int      @map("delete_finance") // @db.TinyInt ??
  deleteReminders                 Int      @map("delete_reminders") // @db.TinyInt ??
  availableToLimitedProfessionals Int      @map("available_to_limited_professionals") // @db.TinyInt ??
  discounAppointmentPackage       Int      @map("discoun_appointment_package") // @db.TinyInt ??
  createComissionPackages         Int      @map("create_comission_packages") // @db.TinyInt ??
  notCountRoomLimit               Int      @map("not_count_room_limit") // @db.TinyInt ??
  notCountProfessionalLimit       Int      @map("not_count_professional_limit") // @db.TinyInt ??

  users        User[]
  appointments Appointment[]

  @@map("status")
}

model Contact {
  id                           Int        @id @default(autoincrement())
  name                         String     @db.VarChar(255)
  documentName                 String     @map("document_name") @db.VarChar(255)
  slug                         String     @db.VarChar(255)
  gender                       String     @db.VarChar(255)
  age                          Int
  city                         String     @db.VarChar(255)
  state                        String     @db.VarChar(255)
  createdAt                    DateTime   @default(now()) @map("created_at")
  updatedAt                    DateTime   @default(now()) @map("updated_at")
  dateBirth                    DateTime?  @map("date_birth") @db.Date
  address                      String     @db.Text
  entityId                     Int        @map("entity_id")
  entity                       Entity?    @relation(fields: [entityId], references: [id])
  originEntityId               Int        @map("origin_entity_id")
  maritalStatus                String     @map("marital_status") @db.VarChar(255)
  profession                   String     @db.VarChar(255)
  companyName                  String     @map("company_name") @db.VarChar(255)
  cellphone                    String     @db.VarChar(255)
  cpf                          String     @db.VarChar(255)
  email                        String     @db.VarChar(255)
  imageId                      Int        @map("image_id")
  image                        Image?     @relation("ImageContact", fields: [imageId], references: [id])
  phone                        String     @db.VarChar(255)
  indication                   Int
  agreement                    Int
  agreementNumber              String     @map("agreement_number") @db.VarChar(255)
  nameFather                   String     @map("name_father") @db.VarChar(255)
  cpfFather                    String     @map("cpf_father") @db.VarChar(255)
  nameMother                   String     @map("name_mother") @db.VarChar(255)
  cpfMother                    String     @map("cpf_mother") @db.VarChar(255)
  diagnosis                    String     @db.VarChar(255)
  agreementId                  Int        @map("agreement_id")
  agreements                   Agreement? @relation(fields: [agreementId], references: [id])
  rg                           String     @db.VarChar(255)
  informations                 String     @db.Text
  cep                          String     @db.VarChar(255)
  allowAdminPartnerDataAccess  Int        @map("allow_admin_partner_data_access") // @db.TinyInt ??
  deletedAt                    DateTime?  @map("deleted_at") @db.Timestamp()
  indicationType               String     @map("indication_type") @db.VarChar(255)
  indicationText               String     @map("indication_text") @db.VarChar(255)
  professionalIndicationId     Int        @map("professional_indication_id")
  professionalIndication       User?      @relation("professionalIndicationUser", fields: [professionalIndicationId], references: [id])
  doctorIndicationId           Int        @map("doctor_indication_id")
  doctorIndication             Doctor?    @relation(fields: [doctorIndicationId], references: [id])
  neighborhood                 String     @db.VarChar(255)
  addressNumber                String     @map("address_number") @db.VarChar(255)
  addressComplement            String     @map("address_complement") @db.VarChar(255)
  expirationDateAgreementCard  DateTime?  @map("expiration_date_agreement_card") @db.Date
  cnsNumber                    String     @map("cns_number") @db.VarChar(15)
  importToken                  String     @map("import_token") @db.VarChar(255)
  contactType                  Int        @map("contact_type") // @db.TinyInt ??
  crefito                      String     @db.VarChar(255)
  area                         String     @db.VarChar(255)
  bankName                     String     @map("bank_name") @db.VarChar(255)
  bankCardAgency               String     @map("bank_card_agency") @db.VarChar(255)
  bankCardNumber               String     @map("bank_card_number") @db.VarChar(255)
  balance                      Decimal    @db.Decimal(10, 2)
  cnpj                         String     @db.VarChar(255)
  specialties                  String     @db.VarChar(255)
  importId                     Int        @map("import_id")
  country                      String     @db.VarChar(255)
  countryPhone                 String     @map("country_phone") @db.VarChar(255)
  countryPhoneCode             String     @map("country_phone_code") @db.VarChar(255)
  pix                          String     @db.VarChar(255)
  beneficiaryCardName          String     @map("beneficiary_card_name") @db.VarChar(255)
  professionalConcil           String     @map("professional_concil") @db.VarChar(255)
  professionalConcilNumber     String     @map("professional_concil_number") @db.VarChar(255)
  professionalConcilUf         String     @map("professional_concil_uf") @db.VarChar(255)
  professionalCbos             String     @map("professional_cbos") @db.VarChar(255)
  pixType                      String     @map("pix_type") @db.VarChar(255)
  signatureImageId             Int        @map("signature_image_id")
  signatureImage               Image?     @relation("signatureImageContact", fields: [signatureImageId], references: [id])
  attendanceType               String     @map("attendance_type") @db.Text
  participationDegree          String     @map("participation_degree") @db.Text
  school                       String     @db.VarChar(255)
  doctor                       String     @db.VarChar(255)
  medication                   String     @db.VarChar(255)
  appointmentReports           Int?       @map("appointment_reports") // @db.TinyInt ??
  contactPreference            String     @map("contact_preference") @db.VarChar(255)
  lastReportedAt               DateTime?  @map("last_reported_at") @db.Date()
  allowAppointmentReminders    Int        @map("allow_appointment_reminders") // @db.TinyInt ??
  allowEmailCampaigns          Int        @map("allow_email_campaigns") // @db.TinyInt ??
  allowNps                     Int        @map("allow_nps") // @db.TinyInt ??
  dataResponible               Int?       @map("data_responible") // @db.TinyInt ??
  responsibleCpf               String     @map("responsible_cpf") @db.VarChar(255)
  responsibleRg                String     @map("responsible_rg") @db.VarChar(255)
  responsibleEmail             String     @map("responsible_email") @db.VarChar(255)
  responsibleCep               String     @map("responsible_cep") @db.VarChar(255)
  responsibleAddress           String     @map("responsible_address") @db.VarChar(255)
  responsibleAddressNumber     String     @map("responsible_address_number") @db.VarChar(255)
  responsibleAddressComplement String     @map("responsible_address_complement") @db.VarChar(255)
  responsibleNeighborhood      String     @map("responsible_neighborhood") @db.VarChar(255)
  responsibleCityId            Int        @map("responsible_city_id")
  responsibleCity              City?      @relation(fields: [responsibleCityId], references: [id])
  gympassToken                 String     @map("gympass_token") @db.VarChar(255)
  appUserContactId             Int        @map("app_user_contact_id")
  fiquezenInviteSentAt         DateTime?  @map("fiquezen_invite_sent_at") @db.Timestamp()

  images       Image[]       @relation("ContactImage")
  users        User[]
  movements    Movement[]
  appointments Appointment[]
  files        File[]

  @@map("contacts")
}

model Image {
  id                Int         @id @default(autoincrement())
  src               String      @db.VarChar(255)
  alt               String      @db.VarChar(255)
  ext               String      @db.VarChar(255)
  createdAt         DateTime    @default(now()) @map("created_at")
  updatedAt         DateTime    @default(now()) @map("updated_at")
  entityId          Int         @map("entity_id")
  entity            Entity?     @relation(fields: [entityId], references: [id])
  alreadyChanged    Int         @map("already_changed") // @db.TinyInt ??
  downloadCount     Int         @map("download_count") // @db.UnsignedInt ??
  description       String      @db.VarChar(255)
  userId            Int         @map("user_id")
  user              User?       @relation(fields: [userId], references: [id])
  contactId         Int         @map("contact_id")
  contact           Contact?    @relation("ContactImage", fields: [contactId], references: [id])
  mktType           Int         @map("mkt_type") // @db.TinyInt ??
  color             String      @db.VarChar(255)
  watermarkPosition String      @map("watermark_position") @db.VarChar(255)
  isFree            Int         @map("is_free") // @db.TinyInt ??
  editLink          String      @map("edit_link") @db.VarChar(255)
  editType          String      @map("edit_type") @db.VarChar(255)
  mktProfileId      Int         @map("mkt_profile_id")
  mktProfile        MktProfile? @relation(fields: [mktProfileId], references: [id])

  contacts              Contact[]    @relation("ImageContact")
  mktProfiles           MktProfile[] @relation("MktProfileImage")
  signatureImageContact Contact[]    @relation("signatureImageContact")

  @@map("images")
}

model MktProfile {
  id                 Int      @id @default(autoincrement())
  slug               String   @db.VarChar(191)
  name               String   @db.VarChar(191)
  address            String   @db.VarChar(191)
  neighborhood       String   @db.VarChar(255)
  addressNumber      String   @map("address_number") @db.VarChar(255)
  phone              String   @db.VarChar(191)
  whatsapp           String   @db.VarChar(191)
  email              String   @db.VarChar(255)
  description        String   @db.Text
  slogan             String   @db.VarChar(255)
  cityId             Int      @map("city_id")
  city               City?    @relation(fields: [cityId], references: [id])
  logoImgId          Int      @map("logo_img_id")
  logoImg            Image?   @relation("MktProfileImage", fields: [logoImgId], references: [id])
  backgroundTemplate Int      @map("background_template") @db.SmallInt
  latitude           Float?
  longitude          Float?
  facebook           String   @db.VarChar(255)
  twitter            String   @db.VarChar(255)
  instagram          String   @db.VarChar(255)
  entityId           Int      @map("entity_id")
  entity             Entity?  @relation(fields: [entityId], references: [id])
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @default(now()) @map("updated_at")
  urlDomain          String   @map("url_domain") @db.VarChar(255)
  complement         String   @db.VarChar(255)
  site               String   @db.VarChar(255)
  cep                String   @db.VarChar(255)
  origin             String   @db.VarChar(255)
  showOnPlataform    Int      @map("show_on_plataform") @db.SmallInt
  youtube            String   @db.VarChar(255)
  showWhatsappBtn    Int?     @map("show_whatsapp_btn") // @db.TinyInt ??
  scheduleType       Int      @map("schedule_type") // @db.TinyInt ??

  image Image[]

  @@map("mkt_profiles")
}

model City {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  ibgeCode  String   @map("ibge_code") @db.VarChar(20)
  stateId   Int      @map("state_id")
  state     State?   @relation(fields: [stateId], references: [id])
  slug      String   @db.VarChar(255)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  latitude  Float?
  longitude Float?
  img       String   @db.VarChar(255)

  mktProfile MktProfile[]
  contacts   Contact[]

  @@map("cities")
}

model State {
  id           Int      @id @default(autoincrement())
  name         String   @db.VarChar(50)
  abbreviation String   @db.VarChar(5)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @map("updated_at")

  city City[]

  @@map("states")
}

model Agreement {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(255)
  entityId    Int      @map("entity_id")
  entity      Entity?  @relation(fields: [entityId], references: [id])
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @map("updated_at")
  ansCode     String   @map("ans_code") @db.VarChar(6)
  gracePeriod Int      @map("grace_period")
  deletedAt   DateTime @map("deleted_at")

  contacts     Contact[]
  auditUsers   User[]
  appointments Appointment[]
  movements    Movement[]

  @@map("agreements")
}

model Doctor {
  id                Int      @id @default(autoincrement())
  name              String   @db.VarChar(255)
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @default(now()) @map("updated_at")
  cpf               String   @db.VarChar(255)
  clinicName        String   @map("clinic_name") @db.VarChar(255)
  concil            String   @db.VarChar(255)
  concilNumber      String   @map("concil_number") @db.VarChar(255)
  concilUf          String   @map("concil_uf") @db.VarChar(255)
  cbos              String   @db.VarChar(255)
  entityId          Int      @map("entity_id")
  entity            Entity?  @relation(fields: [entityId], references: [id])
  address           String   @db.VarChar(255)
  addressComplement String   @map("address_complement") @db.VarChar(255)
  neighbourhood     String   @db.VarChar(255)
  addressNumber     Int      @map("address_number")
  phone             String   @db.VarChar(255)
  cep               String   @db.VarChar(255)
  state             String   @db.VarChar(255)
  city              String   @db.VarChar(255)
  deletedAt         DateTime @map("deleted_at")

  contacts Contact[]

  @@map("doctors")
}

model Import {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @map("updated_at")
  qtySuccess Int      @map("qty_success")
  qtyFail    Int      @map("qty_fail")
  userId     Int      @map("user_id")
  user       User?    @relation(fields: [userId], references: [id])
  entityId   Int      @map("entity_id")
  entity     Entity?  @relation(fields: [entityId], references: [id])
  csvId      Int      @map("csv_id")
  logId      Int      @map("log_id")
  finishedAt DateTime @map("finished_at") @db.Timestamp()
  deletedAt  DateTime @map("deleted_at") @db.Timestamp()
  failedAt   DateTime @map("failed_at") @db.Timestamp()

  @@map("imports")
}

model File {
  id               Int             @id @default(autoincrement())
  name             String          @db.VarChar(255)
  ext              String          @db.VarChar(50)
  description      String          @db.VarChar(255)
  createdAt        DateTime        @default(now()) @map("created_at")
  updatedAt        DateTime        @default(now()) @map("updated_at")
  entityId         Int             @map("entity_id")
  entity           Entity?         @relation(fields: [entityId], references: [id])
  alreadyChanged   Int             @map("already_changed") // @db.TinyInt ??
  userId           Int             @map("user_id")
  user             User?           @relation(fields: [userId], references: [id])
  contactId        Int             @map("contact_id")
  contact          Contact?        @relation(fields: [contactId], references: [id])
  customDocumentId Int             @map("custom_document_id")
  customDocument   CustomDocument? @relation(fields: [customDocumentId], references: [id])
  movementId       Int             @map("movement_id")
  movement         Movement?       @relation("movementFile", fields: [movementId], references: [id])

  movements Movement[] @relation("fileMovement")

  @@map("files")
}

model CustomDocument {
  id                       Int      @id @default(autoincrement())
  title                    String   @db.VarChar(255)
  documentText             String   @map("document_text") @db.Text
  addPatientSignature      Int      @map("add_patient_signature") @db.SmallInt
  entityId                 Int      @map("entity_id")
  entity                   Entity?  @relation(fields: [entityId], references: [id])
  createdAt                DateTime @default(now()) @map("created_at")
  updatedAt                DateTime @default(now()) @map("updated_at")
  addProfessionalSignature Int      @map("add_professional_signature") @db.SmallInt
  headerType               Int      @map("header_type") // @db.TinyInt ??
  addWitnessSignature      Int      @map("add_witness_signature") @db.SmallInt
  visibleForSecretaries    Int      @map("visible_for_secretaries") // @db.TinyInt ??
  showDigitalSignature     Int      @map("show_digital_signature") // @db.TinyInt ??
  hideDate                 Int      @map("hide_date") // @db.TinyInt ??

  files File[]

  @@map("custom_documents")
}

model CostCenter {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  entityId  Int      @map("entity_id")
  entity    Entity?  @relation(fields: [entityId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  movements Movement[]

  @@map("cost_centers")
}

model PaymentMethod {
  id                Int      @id @default(autoincrement())
  name              String   @db.VarChar(255)
  entityId          Int      @map("entity_id")
  entity            Entity?  @relation(fields: [entityId], references: [id])
  brandType         Int      @map("brand_type") // @db.TinyInt ??
  paymentType       Int      @map("payment_type") // @db.TinyInt ??
  receivingDays     Int      @map("receiving_days")
  comissionType     Int      @map("comission_type") // @db.TinyInt ??
  installmentNumber Int      @map("installment_number")
  taxType           Int      @map("tax_type") // @db.TinyInt ??
  minTax            Decimal  @map("min_tax")
  minTaxValue       Decimal  @map("min_tax_value")
  taxConfiguration  Int      @map("tax_configuration") // @db.TinyInt ??
  taxes             String   @db.Text
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @default(now()) @map("updated_at")
  deletedAt         DateTime @map("deleted_at") @db.Timestamp()
  receivingType     Int      @map("receiving_type")

  movements Movement[]

  @@map("payment_methods")
}
