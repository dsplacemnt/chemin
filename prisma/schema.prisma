generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model access_menu {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  name       String    @db.VarChar(255)
  is_active  Boolean   @default(true)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model accounts {
  id                   Int                    @id @default(autoincrement()) @db.UnsignedInt
  name                 String                 @db.VarChar(255)
  initial_value        Decimal                @default(0.00) @db.Decimal(10, 2)
  date                 DateTime?              @db.Date
  entity_id            Int?                   @db.UnsignedInt
  created_at           DateTime?              @db.Timestamp(0)
  updated_at           DateTime?              @db.Timestamp(0)
  primary              Int?                   @db.TinyInt
  entities             entities?              @relation(fields: [entity_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "accounts_entity_id_foreign")
  appointment_packages appointment_packages[]
  movements            movements[]
  procedures           procedures[]

  @@index([entity_id], map: "accounts_entity_id_index")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model additional_package_entity {
  additional_package_id Int                 @db.UnsignedInt
  entity_id             Int                 @db.UnsignedInt @unique
  created_at            DateTime?           @default(now()) @db.Timestamp(0)
  updated_at            DateTime?           @default(now()) @db.Timestamp(0)
  qty                   Int?                @default(0)
  additional_packages   additional_packages @relation(fields: [additional_package_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "additional_package_entity_additional_package_id_foreign")
  entities              entities            @relation(fields: [entity_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "additional_package_entity_entity_id_foreign")

  @@index([additional_package_id], map: "additional_package_entity_additional_package_id_index")
  @@index([entity_id], map: "additional_package_entity_entity_id_index")
  @@index([qty], map: "additional_package_entity_qty_index")
}

model additional_package_plan {
  additional_package_id Int                 @db.UnsignedInt
  plan_id               Int                 @db.UnsignedInt
  value                 Decimal             @db.Decimal(10, 2)
  active                Int                 @default(0) @db.TinyInt
  checked               Int                 @default(0) @db.TinyInt
  billing               Int                 @default(0) @db.TinyInt
  created_at            DateTime?           @db.Timestamp(0)
  updated_at            DateTime?           @db.Timestamp(0)
  stripe_plan_name      String              @db.VarChar(255)
  id                    Int                 @id @default(autoincrement()) @db.UnsignedInt
  additional_packages   additional_packages @relation(fields: [additional_package_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "additional_package_plan_additional_package_id_foreign")
  plans                 plans               @relation(fields: [plan_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "additional_package_plan_plan_id_foreign")

  @@index([additional_package_id], map: "additional_package_plan_additional_package_id_index")
  @@index([plan_id], map: "additional_package_plan_plan_id_index")
}

model additional_packages {
  id                         Int                          @id @default(autoincrement()) @db.UnsignedInt
  name                       String                       @db.VarChar(255)
  description                String                       @db.VarChar(255)
  created_at                 DateTime?                    @db.Timestamp(0)
  updated_at                 DateTime?                    @db.Timestamp(0)
  billing_exibition_order    Int                          @default(0)
  additional_package_entity  additional_package_entity[]  @ignore
  additional_package_plan    additional_package_plan[]
  coupon_free_additional     coupon_free_additional[]
  coupon_specific_additional coupon_specific_additional[]
  coupons                    coupons[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model affiliate_entity {
  id            BigInt     @id @default(autoincrement()) @db.UnsignedBigInt
  entity_id     Int        @db.UnsignedInt
  affiliate_id  BigInt     @db.UnsignedBigInt
  benefit_type  String     @db.VarChar(255)
  benefit_value Decimal    @db.Decimal(10, 2)
  closing_at    DateTime?  @db.DateTime(0)
  status        Int        @db.TinyInt
  created_at    DateTime?  @db.Timestamp(0)
  updated_at    DateTime?  @db.Timestamp(0)
  situation     Int        @default(0) @db.TinyInt
  affiliates    affiliates @relation(fields: [affiliate_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "affiliate_entity_affiliate_id_foreign")
  entities      entities   @relation(fields: [entity_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "affiliate_entity_entity_id_foreign")

  @@index([affiliate_id], map: "affiliate_entity_affiliate_id_index")
  @@index([benefit_type], map: "affiliate_entity_benefit_type_index")
  @@index([benefit_value], map: "affiliate_entity_benefit_value_index")
  @@index([closing_at], map: "affiliate_entity_closing_at_index")
  @@index([entity_id], map: "affiliate_entity_entity_id_index")
  @@index([situation], map: "affiliate_entity_situation_index")
  @@index([status], map: "affiliate_entity_status_index")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model affiliate_histories {
  id           BigInt     @id @default(autoincrement()) @db.UnsignedBigInt
  entity_id    Int        @db.UnsignedInt
  affiliate_id BigInt     @db.UnsignedBigInt
  description  String?    @db.Text
  value        Decimal?   @default(0.00) @db.Decimal(10, 2)
  was_paid     Int?       @db.TinyInt
  created_at   DateTime?  @db.Timestamp(0)
  updated_at   DateTime?  @db.Timestamp(0)
  affiliates   affiliates @relation(fields: [affiliate_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "affiliate_histories_affiliate_id_foreign")
  entities     entities   @relation(fields: [entity_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "affiliate_histories_entity_id_foreign")

  @@index([affiliate_id], map: "affiliate_histories_affiliate_id_index")
  @@index([entity_id], map: "affiliate_histories_entity_id_index")
  @@index([value], map: "affiliate_histories_value_index")
  @@index([was_paid], map: "affiliate_histories_was_paid_index")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model affiliates {
  id                  BigInt                @id @default(autoincrement()) @db.UnsignedBigInt
  entity_id           Int                   @db.UnsignedInt
  code                String                @db.VarChar(255)
  benefit_type        String                @db.VarChar(255)
  benefit_value       Decimal               @db.Decimal(10, 2)
  closing_at          DateTime?             @db.DateTime(0)
  status              Int                   @db.TinyInt
  created_at          DateTime?             @db.Timestamp(0)
  updated_at          DateTime?             @db.Timestamp(0)
  situation           Int                   @default(0) @db.TinyInt
  name                String?               @db.VarChar(255)
  affiliate_entity    affiliate_entity[]
  affiliate_histories affiliate_histories[]
  entities            entities              @relation(fields: [entity_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "affiliates_entity_id_foreign")

  @@index([benefit_type], map: "affiliates_benefit_type_index")
  @@index([benefit_value], map: "affiliates_benefit_value_index")
  @@index([closing_at], map: "affiliates_closing_at_index")
  @@index([entity_id], map: "affiliates_entity_id_index")
  @@index([name], map: "affiliates_name_index")
  @@index([situation], map: "affiliates_situation_index")
  @@index([status], map: "affiliates_status_index")
}

model agreement_auditors {
  id           BigInt     @id @default(autoincrement()) @db.UnsignedBigInt
  created_at   DateTime?  @db.Timestamp(0)
  updated_at   DateTime?  @db.Timestamp(0)
  agreement_id Int        @db.UnsignedInt
  user_id      Int        @db.UnsignedInt
  agreements   agreements @relation(fields: [agreement_id], references: [id], onUpdate: Restrict, map: "agreement_auditors_agreement_id_foreign")
  users        users      @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "agreement_auditors_user_id_foreign")

  @@index([agreement_id], map: "agreement_auditors_agreement_id_foreign")
  @@index([user_id], map: "agreement_auditors_user_id_foreign")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model agreement_procedure {
  agreement_id Int        @db.UnsignedInt
  procedure_id Int        @db.UnsignedInt
  created_at   DateTime?  @db.Timestamp(0)
  updated_at   DateTime?  @db.Timestamp(0)
  agreements   agreements @relation(fields: [agreement_id], references: [id], onDelete: Cascade, map: "agreement_procedure_agreement_id_foreign")
  procedures   procedures @relation(fields: [procedure_id], references: [id], onDelete: Cascade, map: "agreement_procedure_procedure_id_foreign")

  @@index([agreement_id], map: "agreement_procedure_agreement_id_index")
  @@index([procedure_id], map: "agreement_procedure_procedure_id_index")
  @@ignore
}

model agreements {
  id                    Int                     @id @default(autoincrement()) @db.UnsignedInt
  name                  String                  @db.VarChar(255)
  entity_id             Int?                    @db.UnsignedInt
  created_at            DateTime?               @db.Timestamp(0)
  updated_at            DateTime?               @db.Timestamp(0)
  ans_code              String?                 @db.VarChar(6)
  grace_period          Int?
  deleted_at            DateTime?               @db.DateTime(0)
  agreement_auditors    agreement_auditors[]
  agreement_procedure   agreement_procedure[]   @ignore
  entities              entities?               @relation(fields: [entity_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "agreements_entity_id_foreign")
  appointments          appointments[]
  contact_agreement     contact_agreement[]
  contact_entity        contact_entity[]        @ignore
  contacts              contacts[]
  doctor_agreement      doctor_agreement[]
  entity_agreement      entity_agreement[]
  entity_agreement_hide entity_agreement_hide[]
  movements             movements[]
  sadt_guides           sadt_guides[]
  tiss_guides           tiss_guides[]
  tiss_lots             tiss_lots[]
  users                 users[]

  @@index([entity_id], map: "agreements_entity_id_index")
}

model appointment_audio {
  id                                              BigInt       @id @default(autoincrement()) @db.UnsignedBigInt
  created_at                                      DateTime?    @db.Timestamp(0)
  updated_at                                      DateTime?    @db.Timestamp(0)
  path                                            String       @db.VarChar(255)
  appointment_id                                  Int          @db.UnsignedInt
  audio_transcribed                               String       @db.VarChar(255)
  user_id                                         Int?         @db.UnsignedInt
  entity_id                                       Int          @db.UnsignedInt
  sketch                                          Int          @default(0) @db.TinyInt
  user_transcribed                                Int?         @db.UnsignedInt
  appointments                                    appointments @relation(fields: [appointment_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "appointment_audio_appointment_id_foreign")
  entities                                        entities     @relation(fields: [entity_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "appointment_audio_entity_id_foreign")
  users_appointment_audio_user_idTousers          users?       @relation("appointment_audio_user_idTousers", fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "appointment_audio_user_id_foreign")
  users_appointment_audio_user_transcribedTousers users?       @relation("appointment_audio_user_transcribedTousers", fields: [user_transcribed], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "appointment_audio_user_transcribed_foreign")

  @@index([appointment_id], map: "appointment_audio_appointment_id_index")
  @@index([entity_id], map: "appointment_audio_entity_id_index")
  @@index([user_id], map: "appointment_audio_user_id_index")
  @@index([user_transcribed], map: "appointment_audio_user_transcribed_index")
}

model appointment_chatgpt_question {
  id                         BigInt            @id @default(autoincrement()) @db.UnsignedBigInt
  appointment_id             Int               @db.UnsignedInt
  chatgpt_question_id        BigInt            @db.UnsignedBigInt
  show_on_attendance_details Int               @db.TinyInt
  created_at                 DateTime?         @db.Timestamp(0)
  updated_at                 DateTime?         @db.Timestamp(0)
  appointments               appointments      @relation(fields: [appointment_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "appointment_chatgpt_question_appointment_id_foreign")
  chatgpt_questions          chatgpt_questions @relation(fields: [chatgpt_question_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "appointment_chatgpt_question_chatgpt_question_id_foreign")

  @@index([appointment_id], map: "appointment_chatgpt_question_appointment_id_index")
  @@index([chatgpt_question_id], map: "appointment_chatgpt_question_chatgpt_question_id_index")
}

model appointment_google_account {
  id                BigInt          @id @default(autoincrement()) @db.UnsignedBigInt
  appointment_id    Int             @db.UnsignedInt
  google_event_id   String          @db.VarChar(255)
  google_account_id Int             @db.UnsignedInt
  created_at        DateTime?       @db.Timestamp(0)
  updated_at        DateTime?       @db.Timestamp(0)
  google_accounts   google_accounts @relation(fields: [google_account_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "appointment_google_account_google_account_id_foreign")

  @@index([appointment_id], map: "appointment_google_account_appointment_id_index")
  @@index([google_account_id], map: "appointment_google_account_google_account_id_index")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model appointment_package_appointment {
  appointment_package_id    Int                  @db.UnsignedInt
  appointment_id            Int                  @db.UnsignedInt
  appointment_package_token String?              @db.VarChar(255)
  package_renewal_token     String?              @db.VarChar(255)
  start_period_renewal      DateTime?            @db.Date
  end_period_renewal        DateTime?            @db.Date
  appointments              appointments         @relation(fields: [appointment_id], references: [id], onDelete: Cascade, map: "appointment_package_appointment_appointment_id_foreign")
  appointment_packages      appointment_packages @relation(fields: [appointment_package_id], references: [id], map: "appointment_package_appointment_appointment_package_id_foreign")

  @@index([appointment_id], map: "appointment_package_appointment_appointment_id_index")
  @@index([appointment_package_id], map: "appointment_package_appointment_appointment_package_id_index")
  @@index([appointment_package_token], map: "appointment_package_appointment_appointment_package_token_index")
  @@index([end_period_renewal], map: "appointment_package_appointment_end_period_renewal_index")
  @@index([package_renewal_token], map: "appointment_package_appointment_package_renewal_token_index")
  @@index([start_period_renewal], map: "appointment_package_appointment_start_period_renewal_index")
  @@ignore
}

model appointment_package_automatic_renewals {
  id                        BigInt                                          @id @default(autoincrement()) @db.UnsignedBigInt
  day_week                  appointment_package_automatic_renewals_day_week
  hour_start                DateTime                                        @db.Time(0)
  hour_end                  DateTime                                        @db.Time(0)
  contact_id                Int                                             @db.UnsignedInt
  user_id                   Int                                             @db.UnsignedInt
  status_id                 Int                                             @db.UnsignedInt
  appointment_package_id    Int                                             @db.UnsignedInt
  appointment_package_token String                                          @db.VarChar(255)
  created_at                DateTime?                                       @db.Timestamp(0)
  updated_at                DateTime?                                       @db.Timestamp(0)
  procedure_id              Int?                                            @db.UnsignedInt
  appointment_packages      appointment_packages                            @relation(fields: [appointment_package_id], references: [id], onUpdate: Restrict, map: "ap_id_foreign")
  contacts                  contacts                                        @relation(fields: [contact_id], references: [id], onUpdate: Restrict, map: "appointment_package_automatic_renewals_contact_id_foreign")
  procedures                procedures?                                     @relation(fields: [procedure_id], references: [id], onUpdate: Restrict, map: "appointment_package_automatic_renewals_procedure_id_foreign")
  status                    status                                          @relation(fields: [status_id], references: [id], onUpdate: Restrict, map: "appointment_package_automatic_renewals_status_id_foreign")
  users                     users                                           @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "appointment_package_automatic_renewals_user_id_foreign")

  @@index([appointment_package_id], map: "ap_id_foreign")
  @@index([contact_id], map: "appointment_package_automatic_renewals_contact_id_index")
  @@index([procedure_id], map: "appointment_package_automatic_renewals_procedure_id_index")
  @@index([status_id], map: "appointment_package_automatic_renewals_status_id_index")
  @@index([user_id], map: "appointment_package_automatic_renewals_user_id_index")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model appointment_package_contact {
  id                         BigInt               @id @default(autoincrement()) @db.UnsignedBigInt
  appointment_package_id     Int                  @db.UnsignedInt
  contact_id                 Int                  @db.UnsignedInt
  qty_appointments           Int
  created_at                 DateTime?            @db.Timestamp(0)
  updated_at                 DateTime?            @db.Timestamp(0)
  appointment_package_token  String?              @db.VarChar(255)
  package_renewal_date_start DateTime?            @db.Date
  package_renewal_date_end   DateTime?            @db.Date
  package_renewal_date_exec  DateTime?            @db.Date
  package_renewal_days       Json?
  agreement_id               Int?
  room_id                    Int?
  comment                    String?              @db.VarChar(255)
  authorization_code         String?              @db.VarChar(255)
  account_id                 Int?
  payment_methods            String?              @db.VarChar(255)
  owner                      Int?
  payment_method_id          BigInt?              @db.UnsignedBigInt
  job_running                Int                  @default(0) @db.TinyInt
  value                      Decimal?             @db.Decimal(10, 2)
  notification_id            Int?                 @db.UnsignedInt
  notifications              notifications?       @relation(fields: [notification_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "appointment_package_contact_notification_id_foreign")
  payment_methods_relation   payment_methods?     @relation(fields: [payment_method_id], references: [id], onUpdate: Restrict, map: "appointment_package_contact_payment_method_id_foreign")
  appointment_packages       appointment_packages @relation(fields: [appointment_package_id], references: [id], map: "appointment_package_patient_appointment_package_id_foreign")
  contacts                   contacts             @relation(fields: [contact_id], references: [id], onDelete: Cascade, map: "appointment_package_patient_patient_id_foreign")

  @@index([notification_id], map: "appointment_package_contact_notification_id_foreign")
  @@index([payment_method_id], map: "appointment_package_contact_payment_method_id_index")
  @@index([appointment_package_id], map: "appointment_package_patient_appointment_package_id_index")
  @@index([contact_id], map: "appointment_package_patient_patient_id_index")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model appointment_package_user {
  appointment_package_id Int                  @db.UnsignedInt
  user_id                Int                  @db.UnsignedInt
  commission             Decimal              @db.Decimal(10, 2)
  appointment_packages   appointment_packages @relation(fields: [appointment_package_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "appointment_package_user_appointment_package_id_foreign")
  users                  users                @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "appointment_package_user_user_id_foreign")

  @@index([appointment_package_id], map: "appointment_package_user_appointment_package_id_index")
  @@index([user_id], map: "appointment_package_user_user_id_index")
  @@ignore
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model appointment_packages {
  id                                     Int                                      @id @default(autoincrement()) @db.UnsignedInt
  name                                   String                                   @db.VarChar(255)
  qty_appointments                       Int
  package_finance_type                   Int                                      @default(0) @db.TinyInt
  value                                  Decimal                                  @db.Decimal(10, 2)
  entity_id                              Int?                                     @db.UnsignedInt
  created_at                             DateTime?                                @db.Timestamp(0)
  updated_at                             DateTime?                                @db.Timestamp(0)
  commission_type                        Int                                      @db.TinyInt
  already_changed                        String                                   @default("1") @db.VarChar(255)
  account_id                             Int?                                     @db.UnsignedInt
  deleted_at                             DateTime?                                @db.Timestamp(0)
  package_commission_type                Int                                      @default(0) @db.TinyInt
  package_automatic_renewal              Int                                      @default(0) @db.TinyInt
  package_days_notification              Int                                      @default(0) @db.TinyInt
  comission_adjust                       Int                                      @default(0) @db.TinyInt
  appointment_package_appointment        appointment_package_appointment[]        @ignore
  appointment_package_automatic_renewals appointment_package_automatic_renewals[]
  appointment_package_contact            appointment_package_contact[]
  appointment_package_user               appointment_package_user[]               @ignore
  accounts                               accounts?                                @relation(fields: [account_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "appointment_packages_account_id_foreign")
  entities                               entities?                                @relation(fields: [entity_id], references: [id], onDelete: Cascade, map: "appointment_packages_entity_id_foreign")

  @@index([account_id], map: "appointment_packages_account_id_index")
  @@index([entity_id], map: "appointment_packages_entity_id_index")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model appointment_procedure {
  appointment_id Int          @db.UnsignedInt
  procedure_id   Int          @db.UnsignedInt
  created_at     DateTime?    @db.Timestamp(0)
  updated_at     DateTime?    @db.Timestamp(0)
  appointments   appointments @relation(fields: [appointment_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "appointment_procedure_appointment_id_foreign")
  procedures     procedures   @relation(fields: [procedure_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "appointment_procedure_procedure_id_foreign")

  @@index([appointment_id], map: "appointment_procedure_appointment_id_index")
  @@index([procedure_id], map: "appointment_procedure_procedure_id_index")
  @@ignore
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model appointments {
  id                              Int                               @id @default(autoincrement()) @db.UnsignedInt
  date                            DateTime                          @db.Date
  contact_id                      Int?                              @db.UnsignedInt
  created_at                      DateTime?                         @db.Timestamp(0)
  updated_at                      DateTime?                         @db.Timestamp(0)
  user_id                         Int?                              @db.UnsignedInt
  start                           DateTime?                         @db.Time(0)
  end                             DateTime?                         @db.Time(0)
  agreement_number                String?                           @db.VarChar(255)
  blocking_reason                 String?                           @db.Text
  comment                         String?                           @db.Text
  agreement_id                    Int?                              @db.UnsignedInt
  status_id                       Int?                              @db.UnsignedInt
  procedure_id                    Int?                              @db.UnsignedInt
  authorization_code              String?                           @db.VarChar(255)
  room_id                         Int?                              @db.UnsignedInt
  repetition                      String?                           @db.VarChar(255)
  all_users                       String?                           @db.VarChar(255)
  block_schedules                 Int                               @default(0) @db.TinyInt
  token                           String?                           @unique(map: "appointments_token_unique") @db.VarChar(255)
  confirmed                       Int                               @default(0) @db.TinyInt
  entity_id                       Int?                              @db.UnsignedInt
  import_token                    String?                           @db.VarChar(255)
  hangout_link                    String?                           @db.VarChar(255)
  deleted_at                      DateTime?                         @db.DateTime(0)
  is_deleted                      Boolean                           @default(false)
  confirmed_at                    DateTime?                         @db.DateTime(0)
  repetition_details              Json?
  package_renewal_token           String?                           @db.VarChar(255)
  billed                          Int                               @default(0) @db.TinyInt
  appointment_audio               appointment_audio[]
  appointment_chatgpt_question    appointment_chatgpt_question[]
  appointment_package_appointment appointment_package_appointment[] @ignore
  appointment_procedure           appointment_procedure[]           @ignore
  agreements                      agreements?                       @relation(fields: [agreement_id], references: [id], onDelete: Restrict, map: "appointments_agreement_id_foreign")
  entities                        entities?                         @relation(fields: [entity_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "appointments_entity_id_foreign")
  procedures                      procedures?                       @relation(fields: [procedure_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "appointments_procedure_id_foreign")
  rooms                           rooms?                            @relation(fields: [room_id], references: [id], map: "appointments_room_id_foreign")
  status                          status?                           @relation(fields: [status_id], references: [id], onDelete: Restrict, map: "appointments_status_id_foreign")
  contacts                        contacts?                         @relation(fields: [contact_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "procedures_patient_id_foreign")
  users                           users?                            @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "procedures_user_id_foreign")
  attendance_confirmations        attendance_confirmations[]
  evaluations                     evaluations[]
  evolutions                      evolutions[]
  gympass_bookings                gympass_bookings[]
  messages                        messages[]
  movements                       movements[]
  owner_appointments              owner_appointments[]
  pre_evaluations                 pre_evaluations[]
  sadt_guides                     sadt_guides[]
  tiss_guides                     tiss_guides[]
  treatment_plans                 treatment_plans[]
  waiting_room_line               waiting_room_line[]

  @@index([agreement_id], map: "appointments_agreement_id_index")
  @@index([all_users], map: "appointments_all_users_index")
  @@index([block_schedules], map: "appointments_block_schedules_index")
  @@index([confirmed], map: "appointments_confirmed_index")
  @@index([contact_id], map: "appointments_contact_id_index")
  @@index([created_at], map: "appointments_created_at_index")
  @@index([date, entity_id], map: "appointments_date_entity_id_index")
  @@index([date], map: "appointments_date_index")
  @@index([date, start, end], map: "appointments_date_start_end_index")
  @@index([end], map: "appointments_end_index")
  @@index([entity_id], map: "appointments_entity_id_index")
  @@index([entity_id, is_deleted], map: "appointments_entity_id_is_deleted_index")
  @@index([is_deleted], map: "appointments_is_deleted_index")
  @@index([package_renewal_token], map: "appointments_package_renewal_token_index")
  @@index([contact_id], map: "appointments_patient_id_index")
  @@index([procedure_id], map: "appointments_procedure_id_index")
  @@index([repetition], map: "appointments_repetition_index")
  @@index([room_id], map: "appointments_room_id_index")
  @@index([start], map: "appointments_start_index")
  @@index([status_id], map: "appointments_status_id_index")
  @@index([updated_at], map: "appointments_updated_at_index")
  @@index([user_id, date], map: "appointments_user_id_date_index")
  @@index([contact_id], map: "procedures_patient_id_index")
  @@index([user_id], map: "procedures_user_id_index")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model area_entity {
  area_id   Int      @db.UnsignedInt
  entity_id Int      @db.UnsignedInt
  areas     areas    @relation(fields: [area_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "area_entity_area_id_foreign")
  entities  entities @relation(fields: [entity_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "area_entity_entity_id_foreign")

  @@index([area_id], map: "area_entity_area_id_index")
  @@index([entity_id], map: "area_entity_entity_id_index")
  @@ignore
}

model areas {
  id          Int           @id @default(autoincrement()) @db.UnsignedInt
  name        String        @db.VarChar(255)
  created_at  DateTime?     @db.Timestamp(0)
  updated_at  DateTime?     @db.Timestamp(0)
  area_entity area_entity[] @ignore
}

model attendance_confirmations {
  id              BigInt       @id @default(autoincrement()) @db.UnsignedBigInt
  image_id        Int          @db.UnsignedInt
  appointment_id  Int          @db.UnsignedInt
  entity_id       Int          @db.UnsignedInt
  user_id         Int          @db.UnsignedInt
  status_id       Int?         @db.UnsignedInt
  status          Int          @default(0) @db.TinyInt
  created_at      DateTime?    @db.Timestamp(0)
  updated_at      DateTime?    @db.Timestamp(0)
  appointments    appointments @relation(fields: [appointment_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "attendance_confirmations_appointment_id_foreign")
  entities        entities     @relation(fields: [entity_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "attendance_confirmations_entity_id_foreign")
  images          images       @relation(fields: [image_id], references: [id], onUpdate: Restrict, map: "attendance_confirmations_image_id_foreign")
  status_relation status?      @relation(fields: [status_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "attendance_confirmations_status_id_foreign")
  users           users        @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "attendance_confirmations_user_id_foreign")

  @@index([appointment_id], map: "attendance_confirmations_appointment_id_index")
  @@index([entity_id], map: "attendance_confirmations_entity_id_index")
  @@index([image_id], map: "attendance_confirmations_image_id_index")
  @@index([status_id], map: "attendance_confirmations_status_id_index")
  @@index([user_id], map: "attendance_confirmations_user_id_index")
}

model backups {
  id          Int       @id @default(autoincrement()) @db.UnsignedInt
  created_at  DateTime? @db.Timestamp(0)
  updated_at  DateTime? @db.Timestamp(0)
  file_id     Int?      @db.UnsignedInt
  user_id     Int       @db.UnsignedInt
  entity_id   Int       @db.UnsignedInt
  finished_at DateTime? @db.Timestamp(0)
  started_at  DateTime? @db.Timestamp(0)
  amount_data Json?
  failed_at   DateTime? @db.Timestamp(0)
  entities    entities  @relation(fields: [entity_id], references: [id], map: "backups_entity_id_foreign")
  files       files?    @relation(fields: [file_id], references: [id], onDelete: Restrict, map: "backups_file_id_foreign")
  users       users     @relation(fields: [user_id], references: [id], map: "backups_user_id_foreign")

  @@index([entity_id], map: "backups_entity_id_index")
  @@index([file_id], map: "backups_file_id_index")
  @@index([user_id], map: "backups_user_id_index")
}

model banks {
  id           BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  name         String    @db.VarChar(255)
  code         String    @db.VarChar(255)
  transfer_tax String    @db.VarChar(255)
  created_at   DateTime? @db.Timestamp(0)
  updated_at   DateTime? @db.Timestamp(0)
}

model bf_search_specialties {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  name       String    @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model bf_searches {
  id            BigInt                    @id @default(autoincrement()) @db.UnsignedBigInt
  origin_search bf_searches_origin_search
  ip            String?                   @db.VarChar(255)
  search        String                    @db.VarChar(255)
  city_id       Int?                      @db.UnsignedInt
  created_at    DateTime?                 @db.Timestamp(0)
  updated_at    DateTime?                 @db.Timestamp(0)
  cities        cities?                   @relation(fields: [city_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "bf_searches_city_id_foreign")

  @@index([city_id], map: "bf_searches_city_id_index")
  @@index([origin_search], map: "bf_searches_origin_search_index")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model billing_datas {
  id                      BigInt                   @id @default(autoincrement()) @db.UnsignedBigInt
  address_key             String?                  @db.VarChar(255)
  entity_id               Int                      @db.UnsignedInt
  customer_id             BigInt?                  @db.UnsignedBigInt
  city_id                 Int?                     @db.UnsignedInt
  name                    String                   @db.VarChar(255)
  email                   String                   @db.VarChar(255)
  phone                   String?                  @db.VarChar(255)
  document                String?                  @db.VarChar(255)
  street                  String?                  @db.VarChar(255)
  number                  String?                  @db.VarChar(255)
  cep                     String?                  @db.VarChar(255)
  neighborhood            String?                  @db.VarChar(255)
  country                 String                   @default("BR") @db.VarChar(255)
  complement              String?                  @db.VarChar(255)
  line                    String?                  @db.VarChar(255)
  created_at              DateTime?                @db.Timestamp(0)
  updated_at              DateTime?                @db.Timestamp(0)
  card_name               String?                  @db.VarChar(255)
  cities                  cities?                  @relation(fields: [city_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "billing_datas_city_id_foreign")
  module_payment_customer module_payment_customer? @relation(fields: [customer_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "billing_datas_customer_id_foreign")
  entities                entities                 @relation(fields: [entity_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "billing_datas_entity_id_foreign")
  module_payment_card     module_payment_card[]

  @@index([city_id], map: "billing_datas_city_id_foreign")
  @@index([customer_id], map: "billing_datas_customer_id_index")
  @@index([entity_id], map: "billing_datas_entity_id_index")
}

model bounces {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  email      String    @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)

  @@index([email], map: "bounces_email_index")
}

model cache {
  key        String @unique(map: "cache_key_unique") @db.VarChar(255)
  value      String @db.MediumText
  expiration Int
}

model categories {
  id               Int                @id @default(autoincrement()) @db.UnsignedInt
  name             String             @db.VarChar(255)
  slug             String             @db.VarChar(255)
  category_id      Int?               @db.UnsignedInt
  created_at       DateTime?          @db.Timestamp(0)
  updated_at       DateTime?          @db.Timestamp(0)
  categories       categories?        @relation("categoriesTocategories", fields: [category_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "categories_category_id_foreign")
  other_categories categories[]       @relation("categoriesTocategories")
  category_contact category_contact[]

  @@index([category_id], map: "categories_category_id_foreign")
}

model category_contact {
  id          Int         @id @default(autoincrement()) @db.UnsignedInt
  category_id Int?        @db.UnsignedInt
  contact_id  Int?        @db.UnsignedInt
  created_at  DateTime?   @db.Timestamp(0)
  updated_at  DateTime?   @db.Timestamp(0)
  categories  categories? @relation(fields: [category_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "category_contact_category_id_foreign")
  contacts    contacts?   @relation(fields: [contact_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "category_contact_contact_id_foreign")

  @@index([category_id], map: "category_contact_category_id_foreign")
  @@index([contact_id], map: "category_contact_contact_id_foreign")
}

model chatgpt_answers {
  id                  BigInt            @id @default(autoincrement()) @db.UnsignedBigInt
  chatgpt_question_id BigInt            @db.UnsignedBigInt
  answer              Json
  created_at          DateTime?         @db.Timestamp(0)
  updated_at          DateTime?         @db.Timestamp(0)
  entity_id           Int               @db.UnsignedInt
  chatgpt_questions   chatgpt_questions @relation(fields: [chatgpt_question_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "chatgpt_answers_chatgpt_question_id_foreign")
  entities            entities          @relation(fields: [entity_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "chatgpt_answers_entity_id_foreign")

  @@index([chatgpt_question_id], map: "chatgpt_answers_chatgpt_question_id_index")
  @@index([entity_id], map: "chatgpt_answers_entity_id_index")
}

model chatgpt_questions {
  id                           BigInt                         @id @default(autoincrement()) @db.UnsignedBigInt
  request                      Json
  created_at                   DateTime?                      @db.Timestamp(0)
  updated_at                   DateTime?                      @db.Timestamp(0)
  entity_id                    Int                            @db.UnsignedInt
  appointment_chatgpt_question appointment_chatgpt_question[]
  chatgpt_answers              chatgpt_answers[]
  entities                     entities                       @relation(fields: [entity_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "chatgpt_questions_entity_id_foreign")

  @@index([entity_id], map: "chatgpt_questions_entity_id_index")
}

model cid10s {
  id          Int           @id @default(autoincrement()) @db.UnsignedInt
  code        String        @db.VarChar(255)
  name        String        @db.VarChar(255)
  created_at  DateTime?     @db.Timestamp(0)
  updated_at  DateTime?     @db.Timestamp(0)
  evaluations evaluations[]
}

model cities {
  id            Int             @id @default(autoincrement()) @db.UnsignedInt
  name          String          @db.VarChar(255)
  ibge_code     String?         @db.VarChar(20)
  state_id      Int             @db.UnsignedInt
  slug          String?         @unique(map: "cities_slug_unique") @db.VarChar(255)
  created_at    DateTime?       @db.Timestamp(0)
  updated_at    DateTime?       @db.Timestamp(0)
  latitude      Float?
  longitude     Float?
  img           String?         @db.VarChar(255)
  bf_searches   bf_searches[]
  billing_datas billing_datas[]
  states        states          @relation(fields: [state_id], references: [id], onUpdate: Restrict, map: "cities_state_id_foreign")
  contacts      contacts[]
  mkt_profiles  mkt_profiles[]
  nfe_companies nfe_companies[]
  nfe_details   nfe_details[]

  @@index([state_id], map: "cities_state_id_foreign")
}

model city_service_codes {
  id             BigInt         @id @default(autoincrement()) @db.UnsignedBigInt
  entity_id      Int            @db.UnsignedInt
  nfe_company_id BigInt?        @db.UnsignedBigInt
  code           String         @db.VarChar(255)
  show           Int            @default(0) @db.TinyInt
  created_at     DateTime?      @db.Timestamp(0)
  updated_at     DateTime?      @db.Timestamp(0)
  entities       entities       @relation(fields: [entity_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "city_service_codes_entity_id_foreign")
  nfe_companies  nfe_companies? @relation(fields: [nfe_company_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "city_service_codes_nfe_company_id_foreign")
  nfe_details    nfe_details[]

  @@index([entity_id], map: "city_service_codes_entity_id_index")
  @@index([nfe_company_id], map: "city_service_codes_nfe_company_id_index")
}

model cnaes {
  id           BigInt         @id @default(autoincrement()) @db.UnsignedBigInt
  cnae         Int
  description  String         @db.Text
  cod_sector   String         @db.VarChar(255)
  name_sector  String         @db.VarChar(255)
  created_at   DateTime?      @db.Timestamp(0)
  updated_at   DateTime?      @db.Timestamp(0)
  company_cnae company_cnae[]
  nfe_details  nfe_details[]
}

model company_cnae {
  id             BigInt        @id @default(autoincrement()) @db.UnsignedBigInt
  cnae_id        BigInt        @db.UnsignedBigInt
  nfe_company_id BigInt        @db.UnsignedBigInt
  created_at     DateTime?     @db.Timestamp(0)
  updated_at     DateTime?     @db.Timestamp(0)
  cnaes          cnaes         @relation(fields: [cnae_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "company_cnae_cnae_id_foreign")
  nfe_companies  nfe_companies @relation(fields: [nfe_company_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "company_cnae_nfe_company_id_foreign")

  @@index([cnae_id], map: "company_cnae_cnae_id_index")
  @@index([nfe_company_id], map: "company_cnae_nfe_company_id_index")
}

model confidential_evaluation_model {
  id                  BigInt            @id @default(autoincrement()) @db.UnsignedBigInt
  evaluation_model_id Int               @db.UnsignedInt
  evaluation_id       Int               @db.UnsignedInt
  evaluations         evaluations       @relation(fields: [evaluation_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "confidential_evaluation_model_evaluation_id_foreign")
  evaluation_models   evaluation_models @relation(fields: [evaluation_model_id], references: [id], onUpdate: Restrict, map: "confidential_evaluation_model_evaluation_model_id_foreign")

  @@index([evaluation_id], map: "confidential_evaluation_model_evaluation_id_index")
  @@index([evaluation_model_id], map: "confidential_evaluation_model_evaluation_model_id_index")
}

model confidential_evolution_model {
  id                 BigInt           @id @default(autoincrement()) @db.UnsignedBigInt
  evolution_model_id BigInt           @db.UnsignedBigInt
  evolution_id       Int              @db.UnsignedInt
  evolutions         evolutions       @relation(fields: [evolution_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "confidential_evolution_model_evolution_id_foreign")
  evolution_models   evolution_models @relation(fields: [evolution_model_id], references: [id], onUpdate: Restrict, map: "confidential_evolution_model_evolution_model_id_foreign")

  @@index([evolution_id], map: "confidential_evolution_model_evolution_id_index")
  @@index([evolution_model_id], map: "confidential_evolution_model_evolution_model_id_index")
}

model contact_agreement {
  id                       BigInt     @id @default(autoincrement()) @db.UnsignedBigInt
  agreement_id             Int        @db.UnsignedInt
  contact_id               Int        @db.UnsignedInt
  agreement_identification String     @db.VarChar(255)
  created_at               DateTime?  @db.Timestamp(0)
  updated_at               DateTime?  @db.Timestamp(0)
  agreements               agreements @relation(fields: [agreement_id], references: [id], onUpdate: Restrict, map: "contact_agreement_agreement_id_foreign")
  contacts                 contacts   @relation(fields: [contact_id], references: [id], onUpdate: Restrict, map: "contact_agreement_contact_id_foreign")

  @@index([agreement_id], map: "contact_agreement_agreement_id_index")
  @@index([contact_id], map: "contact_agreement_contact_id_index")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model contact_entity {
  contact_id                     Int         @db.UnsignedInt
  entity_id                      Int         @db.UnsignedInt
  agreement_id                   Int?        @db.UnsignedInt
  agreement                      String?     @db.VarChar(255)
  agreement_number               String?     @db.VarChar(255)
  cns_number                     String?     @db.VarChar(15)
  expiration_date_agreement_card DateTime?   @db.Date
  beneficiary_card_name          String?     @db.VarChar(255)
  balance                        Decimal?    @db.Decimal(10, 2)
  created_at                     DateTime?   @db.Timestamp(0)
  updated_at                     DateTime?   @db.Timestamp(0)
  agreements                     agreements? @relation(fields: [agreement_id], references: [id], onUpdate: Restrict, map: "contact_entity_agreement_id_foreign")
  contacts                       contacts    @relation(fields: [contact_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "contact_entity_contact_id_foreign")
  entities                       entities    @relation(fields: [entity_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "contact_entity_entity_id_foreign")

  @@index([agreement_id], map: "contact_entity_agreement_id_index")
  @@index([contact_id], map: "contact_entity_contact_id_index")
  @@index([entity_id], map: "contact_entity_entity_id_index")
  @@ignore
}

model contact_message_settings {
  id                          BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  contact_id                  Int?      @db.UnsignedInt
  allow_appointment_reminders Int       @default(1) @db.TinyInt
  reminder_email              Int       @default(1) @db.TinyInt
  reminder_sms                Int       @default(1) @db.TinyInt
  reminder_whatsapp           Int       @default(1) @db.TinyInt
  allow_email_campaigns       Int       @default(1) @db.TinyInt
  allow_nps                   Int       @default(1) @db.TinyInt
  created_at                  DateTime? @db.Timestamp(0)
  updated_at                  DateTime? @db.Timestamp(0)
  contacts                    contacts? @relation(fields: [contact_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "contact_message_settings_contact_id_foreign")

  @@index([contact_id], map: "contact_message_settings_contact_id_index")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model contact_user {
  contact_id Int       @db.UnsignedInt
  user_id    Int       @db.UnsignedInt
  who_shared Int
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  contacts   contacts  @relation(fields: [contact_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "patient_user_patient_id_foreign")
  users      users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "patient_user_user_id_foreign")

  @@index([contact_id], map: "patient_user_patient_id_index")
  @@index([user_id], map: "patient_user_user_id_index")
  @@ignore
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model contacts {
  id                                               Int                                      @id @default(autoincrement()) @db.UnsignedInt
  name                                             String                                   @db.VarChar(255)
  document_name                                    String?                                  @db.VarChar(255)
  slug                                             String                                   @db.VarChar(255)
  gender                                           String?                                  @db.VarChar(255)
  age                                              Int?
  city                                             String?                                  @db.VarChar(255)
  state                                            String?                                  @db.VarChar(255)
  created_at                                       DateTime?                                @db.Timestamp(0)
  updated_at                                       DateTime?                                @db.Timestamp(0)
  date_birth                                       DateTime?                                @db.Date
  address                                          String?                                  @db.Text
  entity_id                                        Int?                                     @db.UnsignedInt
  origin_entity_id                                 Int?                                     @db.UnsignedInt
  marital_status                                   String?                                  @db.VarChar(255)
  profession                                       String?                                  @db.VarChar(255)
  company_name                                     String?                                  @db.VarChar(255)
  cellphone                                        String?                                  @db.VarChar(255)
  cpf                                              String?                                  @db.VarChar(255)
  email                                            String?                                  @db.VarChar(255)
  image_id                                         Int?                                     @db.UnsignedInt
  phone                                            String?                                  @db.VarChar(255)
  indication                                       Int?                                     @db.UnsignedInt
  agreement_number                                 String?                                  @db.VarChar(255)
  name_father                                      String?                                  @db.VarChar(255)
  cpf_father                                       String?                                  @db.VarChar(255)
  name_mother                                      String?                                  @db.VarChar(255)
  cpf_mother                                       String?                                  @db.VarChar(255)
  diagnosis                                        String?                                  @db.VarChar(255)
  agreement_id                                     Int?                                     @db.UnsignedInt
  rg                                               String?                                  @db.VarChar(255)
  informations                                     String?                                  @db.Text
  cep                                              String?                                  @db.VarChar(255)
  allow_admin_partner_data_access                  Int?                                     @db.TinyInt
  deleted_at                                       DateTime?                                @db.Timestamp(0)
  indication_type                                  String?                                  @db.VarChar(255)
  indication_text                                  String?                                  @db.VarChar(255)
  professional_indication_id                       Int?                                     @db.UnsignedInt
  doctor_indication_id                             Int?                                     @db.UnsignedInt
  neighborhood                                     String?                                  @db.VarChar(255)
  address_number                                   String?                                  @db.VarChar(255)
  address_complement                               String?                                  @db.VarChar(255)
  expiration_date_agreement_card                   DateTime?                                @db.Date
  cns_number                                       String?                                  @db.VarChar(15)
  import_token                                     String?                                  @db.VarChar(255)
  contact_type                                     Int                                      @default(0) @db.TinyInt
  crefito                                          String?                                  @db.VarChar(255)
  area                                             String?                                  @db.VarChar(255)
  bank_name                                        String?                                  @db.VarChar(255)
  bank_card_agency                                 String?                                  @db.VarChar(255)
  bank_card_number                                 String?                                  @db.VarChar(255)
  balance                                          Decimal?                                 @db.Decimal(10, 2)
  cnpj                                             String?                                  @db.VarChar(255)
  specialties                                      String?                                  @db.VarChar(255)
  import_id                                        Int?                                     @db.UnsignedInt
  country                                          String?                                  @default("brazil") @db.VarChar(255)
  country_phone                                    String                                   @default("br") @db.VarChar(255)
  country_phone_code                               String                                   @default("55") @db.VarChar(255)
  pix                                              String?                                  @db.VarChar(255)
  beneficiary_card_name                            String?                                  @db.VarChar(255)
  pix_type                                         String?                                  @db.VarChar(255)
  professional_concil                              String?                                  @db.VarChar(255)
  professional_concil_number                       String?                                  @db.VarChar(255)
  professional_concil_uf                           String?                                  @db.VarChar(255)
  professional_cbos                                String?                                  @db.VarChar(255)
  signature_image_id                               Int?                                     @db.UnsignedInt
  attendance_type                                  String?                                  @db.Text
  participation_degree                             String?                                  @db.Text
  school                                           String?                                  @db.VarChar(255)
  doctor                                           String?                                  @db.VarChar(255)
  medication                                       String?                                  @db.VarChar(255)
  contact_preference                               String                                   @db.VarChar(255)
  appointment_reports                              Int                                      @default(1) @db.TinyInt
  last_reported_at                                 DateTime                                 @db.Date
  allow_appointment_reminders                      Int                                      @default(1) @db.TinyInt
  allow_email_campaigns                            Int                                      @default(1) @db.TinyInt
  allow_nps                                        Int                                      @default(1) @db.TinyInt
  data_responsible                                 Boolean                                  @default(false)
  responsible_name                                 String?                                  @db.VarChar(255)
  responsible_cpf                                  String?                                  @db.VarChar(255)
  responsible_rg                                   String?                                  @db.VarChar(255)
  responsible_email                                String?                                  @db.VarChar(255)
  responsible_cep                                  String?                                  @db.VarChar(255)
  responsible_address                              String?                                  @db.VarChar(255)
  responsible_address_number                       String?                                  @db.VarChar(255)
  responsible_address_complement                   String?                                  @db.VarChar(255)
  responsible_neighborhood                         String?                                  @db.VarChar(255)
  responsible_city_id                              Int?                                     @db.UnsignedInt
  gympass_token                                    String?                                  @db.VarChar(255)
  app_user_contact_id                              BigInt?                                  @db.UnsignedBigInt
  fiquezen_invite_sent_at                          DateTime?                                @db.Timestamp(0)
  appointment_package_automatic_renewals           appointment_package_automatic_renewals[]
  appointment_package_contact                      appointment_package_contact[]
  appointments                                     appointments[]
  category_contact                                 category_contact[]
  contact_agreement                                contact_agreement[]
  contact_entity                                   contact_entity[]                         @ignore
  contact_message_settings                         contact_message_settings[]
  contact_user                                     contact_user[]                           @ignore
  imports                                          imports?                                 @relation(fields: [import_id], references: [id], onDelete: Restrict, map: "contacts_import_id_foreign")
  entities_contacts_origin_entity_idToentities     entities?                                @relation("contacts_origin_entity_idToentities", fields: [origin_entity_id], references: [id], onUpdate: Restrict, map: "contacts_origin_entity_id_foreign")
  cities                                           cities?                                  @relation(fields: [responsible_city_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "contacts_responsible_city_id_foreign")
  images_contacts_signature_image_idToimages       images?                                  @relation("contacts_signature_image_idToimages", fields: [signature_image_id], references: [id], onUpdate: Restrict, map: "contacts_signature_image_id_foreign")
  agreements                                       agreements?                              @relation(fields: [agreement_id], references: [id], onDelete: Restrict, map: "patients_agreement_id_foreign")
  doctors                                          doctors?                                 @relation(fields: [doctor_indication_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "patients_doctor_indication_id_foreign")
  entities_contacts_entity_idToentities            entities?                                @relation("contacts_entity_idToentities", fields: [entity_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "patients_entity_id_foreign")
  images_contacts_image_idToimages                 images?                                  @relation("contacts_image_idToimages", fields: [image_id], references: [id], onUpdate: Restrict, map: "patients_image_id_foreign")
  contacts                                         contacts?                                @relation("contactsTocontacts", fields: [indication], references: [id], onUpdate: Restrict, map: "patients_indication_foreign")
  other_contacts                                   contacts[]                               @relation("contactsTocontacts")
  users_contacts_professional_indication_idTousers users?                                   @relation("contacts_professional_indication_idTousers", fields: [professional_indication_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "patients_professional_indication_id_foreign")
  files                                            files[]
  gympass_bookings                                 gympass_bookings[]
  gympass_check_ins                                gympass_check_ins[]
  images_images_contact_idTocontacts               images[]                                 @relation("images_contact_idTocontacts")
  messages                                         messages[]
  mkt_net_promoter_score_contacts                  mkt_net_promoter_score_contacts[]
  mkt_teams                                        mkt_teams[]
  mkt_unsubscribe_email_contacts                   mkt_unsubscribe_email_contacts[]
  movements                                        movements[]
  nfe_details                                      nfe_details[]
  nfe_files                                        nfe_files[]
  payment_intermediation_movements                 payment_intermediation_movements[]
  pre_evaluations                                  pre_evaluations[]
  received_messages                                received_messages[]
  report_information                               report_information[]
  sadt_guide_professionals                         sadt_guide_professionals[]
  sadt_guides                                      sadt_guides[]
  tiss_guides                                      tiss_guides[]
  treatment_plans                                  treatment_plans[]
  users_users_contact_idTocontacts                 users[]                                  @relation("users_contact_idTocontacts")
  waiting_room_line                                waiting_room_line[]

  @@index([app_user_contact_id], map: "contacts_app_user_contact_id_index")
  @@index([cellphone], map: "contacts_cellphone_index")
  @@index([email], map: "contacts_email_index")
  @@index([import_id], map: "contacts_import_id_index")
  @@index([responsible_city_id], map: "contacts_nfse_city_id_index")
  @@index([origin_entity_id], map: "contacts_origin_entity_id_index")
  @@index([responsible_email], map: "contacts_responsible_email_index")
  @@index([signature_image_id], map: "contacts_signature_image_id_index")
  @@index([slug], map: "contacts_slug_index")
  @@index([agreement_id], map: "patients_agreement_id_index")
  @@index([doctor_indication_id], map: "patients_doctor_indication_id_index")
  @@index([entity_id], map: "patients_entity_id_index")
  @@index([image_id], map: "patients_image_id_index")
  @@index([indication], map: "patients_indication_index")
  @@index([professional_indication_id], map: "patients_professional_indication_id_index")
}

model cost_centers {
  id         Int         @id @default(autoincrement()) @db.UnsignedInt
  name       String      @db.VarChar(255)
  entity_id  Int         @db.UnsignedInt
  created_at DateTime?   @db.Timestamp(0)
  updated_at DateTime?   @db.Timestamp(0)
  entities   entities    @relation(fields: [entity_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "cost_centers_entity_id_foreign")
  movements  movements[]

  @@index([entity_id], map: "cost_centers_entity_id_index")
}

model councils {
  id       Int        @id @default(autoincrement()) @db.UnsignedInt
  name     String     @db.VarChar(255)
  entities entities[]
  partners partners[]
}

model coupon_free_additional {
  id                    BigInt              @id @default(autoincrement()) @db.UnsignedBigInt
  coupon_id             BigInt?             @db.UnsignedBigInt
  additional_package_id Int                 @db.UnsignedInt
  created_at            DateTime?           @db.Timestamp(0)
  updated_at            DateTime?           @db.Timestamp(0)
  additional_packages   additional_packages @relation(fields: [additional_package_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "coupon_free_additional_additional_package_id_foreign")
  coupons               coupons?            @relation(fields: [coupon_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "coupon_free_additional_coupon_id_foreign")

  @@index([additional_package_id], map: "coupon_free_additional_additional_package_id_index")
  @@index([coupon_id], map: "coupon_free_additional_coupon_id_index")
}

model coupon_specific_additional {
  id                    BigInt              @id @default(autoincrement()) @db.UnsignedBigInt
  coupon_id             BigInt?             @db.UnsignedBigInt
  additional_package_id Int                 @db.UnsignedInt
  created_at            DateTime?           @db.Timestamp(0)
  updated_at            DateTime?           @db.Timestamp(0)
  additional_packages   additional_packages @relation(fields: [additional_package_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "coupon_specific_additional_additional_package_id_foreign")
  coupons               coupons?            @relation(fields: [coupon_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "coupon_specific_additional_coupon_id_foreign")

  @@index([additional_package_id], map: "coupon_specific_additional_additional_package_id_index")
  @@index([coupon_id], map: "coupon_specific_additional_coupon_id_index")
}

model coupon_specific_plan {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  coupon_id  BigInt?   @db.UnsignedBigInt
  plan_id    Int       @db.UnsignedInt
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  coupons    coupons?  @relation(fields: [coupon_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "coupon_specific_plan_coupon_id_foreign")
  plans      plans     @relation(fields: [plan_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "coupon_specific_plan_plan_id_foreign")

  @@index([coupon_id], map: "coupon_specific_plan_coupon_id_index")
  @@index([plan_id], map: "coupon_specific_plan_plan_id_index")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model coupons {
  id                         BigInt                       @id @default(autoincrement()) @db.UnsignedBigInt
  description                String                       @db.VarChar(200)
  tag                        String                       @db.VarChar(100)
  free_sms                   Int                          @default(1) @db.TinyInt
  type_discount              String                       @db.VarChar(30)
  value                      Decimal                      @db.Decimal(10, 2)
  value_with_installment     Decimal                      @default(0.00) @db.Decimal(10, 2)
  valid_until                DateTime?                    @db.DateTime(0)
  limit                      Int
  duration_type              String                       @db.VarChar(255)
  duration_months            Int?
  status                     Int                          @default(1)
  deleted_at                 DateTime?                    @db.DateTime(0)
  created_at                 DateTime?                    @db.Timestamp(0)
  updated_at                 DateTime?                    @db.Timestamp(0)
  place_discount             String                       @db.VarChar(255)
  place_additional_id        Int?                         @db.UnsignedInt
  specific_plan              Int                          @default(0) @db.TinyInt
  specific_additional        Int                          @default(0) @db.TinyInt
  name                       String?                      @db.VarChar(255)
  partner                    Int                          @default(0) @db.TinyInt
  only_non_client            Int                          @default(0) @db.TinyInt
  coupon_free_additional     coupon_free_additional[]
  coupon_specific_additional coupon_specific_additional[]
  coupon_specific_plan       coupon_specific_plan[]
  additional_packages        additional_packages?         @relation(fields: [place_additional_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "coupons_place_additional_id_foreign")
  entities                   entities[]
  module_payment_customer    module_payment_customer[]

  @@index([place_additional_id], map: "coupons_place_additional_id_index")
}

model custom_documents {
  id                         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  title                      String    @db.VarChar(255)
  document_text              String    @db.Text
  add_patient_signature      Int       @default(0) @db.SmallInt
  entity_id                  Int       @db.UnsignedInt
  created_at                 DateTime? @db.Timestamp(0)
  updated_at                 DateTime? @db.Timestamp(0)
  add_professional_signature Int       @default(0) @db.SmallInt
  header_type                Int       @default(1) @db.TinyInt
  add_witness_signature      Int       @default(0) @db.SmallInt
  visible_for_secretaries    Int       @default(0) @db.TinyInt
  hide_date                  Int       @default(0) @db.TinyInt
  show_digital_signature     Int       @default(0) @db.TinyInt
  entities                   entities  @relation(fields: [entity_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "custom_documents_entity_id_foreign")
  files                      files[]

  @@index([entity_id], map: "custom_documents_entity_id_index")
}

model customer_subscription_adjustments {
  id                                BigInt                             @id @default(autoincrement()) @db.UnsignedBigInt
  customer_id                       BigInt?                            @db.UnsignedBigInt
  entity_id                         Int                                @db.UnsignedInt
  item_id                           BigInt?                            @db.UnsignedBigInt
  old_price                         Float?
  new_price                         Float?
  old_name                          String?                            @db.VarChar(255)
  new_name                          String?                            @db.VarChar(255)
  created_at                        DateTime?                          @db.Timestamp(0)
  updated_at                        DateTime?                          @db.Timestamp(0)
  last_register                     Int                                @default(0) @db.TinyInt
  readjusted_at                     DateTime?                          @db.DateTime(0)
  module_payment_customer           module_payment_customer?           @relation(fields: [customer_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "customer_subscription_adjustments_customer_id_foreign")
  entities                          entities                           @relation(fields: [entity_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "customer_subscription_adjustments_entity_id_foreign")
  module_payment_subscription_items module_payment_subscription_items? @relation(fields: [item_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "customer_subscription_adjustments_item_id_foreign")

  @@index([customer_id], map: "customer_subscription_adjustments_customer_id_index")
  @@index([entity_id], map: "customer_subscription_adjustments_entity_id_index")
  @@index([item_id], map: "customer_subscription_adjustments_item_id_index")
}

model doctor_agreement {
  id                              BigInt     @id @default(autoincrement()) @db.UnsignedBigInt
  agreement_id                    Int        @db.UnsignedInt
  doctor_id                       Int        @db.UnsignedInt
  doctor_agreement_identification String     @db.VarChar(255)
  created_at                      DateTime?  @db.Timestamp(0)
  updated_at                      DateTime?  @db.Timestamp(0)
  agreements                      agreements @relation(fields: [agreement_id], references: [id], onUpdate: Restrict, map: "doctor_agreement_agreement_id_foreign")
  doctors                         doctors    @relation(fields: [doctor_id], references: [id], onUpdate: Restrict, map: "doctor_agreement_doctor_id_foreign")

  @@index([agreement_id], map: "doctor_agreement_agreement_id_index")
  @@index([doctor_id], map: "doctor_agreement_doctor_id_index")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model doctor_user {
  doctor_id Int     @db.UnsignedInt
  user_id   Int     @db.UnsignedInt
  doctors   doctors @relation(fields: [doctor_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "doctor_user_doctor_id_foreign")
  users     users   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "doctor_user_user_id_foreign")

  @@index([doctor_id], map: "doctor_user_doctor_id_index")
  @@index([user_id], map: "doctor_user_user_id_index")
  @@ignore
}

model doctors {
  id                 Int                @id @default(autoincrement()) @db.UnsignedInt
  name               String             @db.VarChar(255)
  created_at         DateTime?          @db.Timestamp(0)
  updated_at         DateTime?          @db.Timestamp(0)
  cpf                String?            @db.VarChar(255)
  clinic_name        String?            @db.VarChar(255)
  concil             String?            @db.VarChar(255)
  concil_number      String?            @db.VarChar(255)
  concil_uf          String?            @db.VarChar(255)
  cbos               String?            @db.VarChar(255)
  entity_id          Int?               @db.UnsignedInt
  address            String?            @db.VarChar(255)
  address_complement String?            @db.VarChar(255)
  neighbourhood      String?            @db.VarChar(255)
  address_number     Int?
  phone              String?            @db.VarChar(255)
  cep                String?            @db.VarChar(255)
  state              String?            @db.VarChar(255)
  city               String?            @db.VarChar(255)
  deleted_at         DateTime?          @db.DateTime(0)
  contacts           contacts[]
  doctor_agreement   doctor_agreement[]
  doctor_user        doctor_user[]      @ignore
  entities           entities?          @relation(fields: [entity_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "doctors_entity_id_foreign")
  evaluations        evaluations[]
  sadt_guides        sadt_guides[]

  @@index([entity_id], map: "doctors_entity_id_index")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model entities {
  id                                                                                   Int                                    @id @default(autoincrement()) @db.UnsignedInt
  name                                                                                 String                                 @db.VarChar(255)
  alias                                                                                String?                                @db.VarChar(30)
  document                                                                             String                                 @db.VarChar(255)
  state                                                                                String                                 @db.VarChar(255)
  city                                                                                 String                                 @db.VarChar(255)
  address                                                                              String                                 @db.VarChar(255)
  number                                                                               String                                 @db.VarChar(255)
  complement                                                                           String?                                @db.VarChar(255)
  phone                                                                                String                                 @db.VarChar(255)
  users                                                                                Int
  users_free                                                                           Int                                    @default(0)
  patients                                                                             Int
  patients_free                                                                        Int                                    @default(0)
  appointments                                                                         Int
  appointments_free                                                                    Int                                    @default(0)
  messages                                                                             Int
  messages_free                                                                        Int                                    @default(0)
  whatsapps                                                                            Int                                    @default(0)
  whatsapps_free                                                                       Int                                    @default(0)
  messages_limit_warning                                                               Int                                    @default(1) @db.TinyInt
  value                                                                                Decimal                                @db.Decimal(10, 2)
  status                                                                               Int                                    @db.TinyInt
  plan_id                                                                              Int                                    @db.UnsignedInt
  main_entity_id                                                                       Int?                                   @db.UnsignedInt
  is_main_entity                                                                       Int?                                   @default(1) @db.TinyInt
  created_at                                                                           DateTime?                              @db.Timestamp(0)
  updated_at                                                                           DateTime?                              @db.Timestamp(0)
  stripe_id                                                                            String?                                @db.VarChar(255)
  card_brand                                                                           String?                                @db.VarChar(255)
  card_last_four                                                                       String?                                @db.VarChar(255)
  trial_ends_at                                                                        DateTime?                              @db.Timestamp(0)
  shared_appointments                                                                  Int?
  council_id                                                                           Int?                                   @db.UnsignedInt
  customer_at                                                                          DateTime?                              @db.DateTime(0)
  deleted_at                                                                           DateTime?                              @db.DateTime(0)
  partner_id                                                                           Int?                                   @db.UnsignedInt
  country                                                                              String                                 @default("BR") @db.VarChar(255)
  payment_failure_at                                                                   DateTime?                              @db.DateTime(0)
  image_id                                                                             Int?                                   @db.UnsignedInt
  qty_users                                                                            Int?
  call                                                                                 Int?                                   @default(1) @db.TinyInt
  observations                                                                         String?                                @db.Text
  schedule_card_info                                                                   String?                                @db.Text
  used_users                                                                           Int                                    @default(0)
  used_messages                                                                        Int                                    @default(0)
  used_appointments                                                                    Int                                    @default(0)
  used_patients                                                                        Int                                    @default(0)
  used_whatsapps                                                                       Int                                    @default(0)
  href                                                                                 String?                                @db.VarChar(255)
  cep                                                                                  String?                                @db.VarChar(255)
  neighborhood                                                                         String?                                @db.VarChar(255)
  is_client                                                                            Int                                    @default(0) @db.TinyInt
  intercom                                                                             Int                                    @default(0) @db.TinyInt
  subscription_period                                                                  Int?
  mrr                                                                                  Decimal?                               @db.Decimal(10, 2)
  shared_psico_appointments                                                            Int?                                   @db.TinyInt
  migration_data                                                                       Int?                                   @db.TinyInt
  complete_registration                                                                Int?                                   @default(0) @db.TinyInt
  allow_admin_partner_data_access                                                      Int?                                   @db.TinyInt
  canceled_at                                                                          DateTime?                              @db.Date
  pipedrive_person_id                                                                  Int?
  pipedrive_org_id                                                                     Int?
  pipedrive_deal_id                                                                    Int?
  tags                                                                                 String?                                @db.VarChar(255)
  beta_testers                                                                         Int                                    @default(0) @db.TinyInt
  finance_test_limit                                                                   DateTime?                              @db.DateTime(0)
  marketing_test_limit                                                                 DateTime?                              @db.DateTime(0)
  cnes_code                                                                            String?                                @db.VarChar(255)
  currency                                                                             String                                 @default("Real") @db.VarChar(255)
  events                                                                               String?                                @db.VarChar(255)
  commission_financial_category_id                                                     Int                                    @default(46) @db.UnsignedInt
  nfes                                                                                 Int                                    @default(0)
  nfes_free                                                                            Int                                    @default(0)
  used_nfes                                                                            Int                                    @default(0)
  units                                                                                Int                                    @default(1)
  units_free                                                                           Int                                    @default(0)
  used_units                                                                           Int                                    @default(1)
  corporate_name                                                                       String?                                @db.VarChar(255)
  entity_type                                                                          Int                                    @default(0) @db.TinyInt
  its_intercom                                                                         Int                                    @default(1) @db.TinyInt
  allow_receive_messages                                                               Boolean                                @default(false)
  plan_details                                                                         Int                                    @default(0) @db.TinyInt
  ticket_or_card                                                                       String?                                @db.VarChar(255)
  coupon_id                                                                            BigInt?                                @db.UnsignedBigInt
  origin                                                                               String                                 @default("Site") @db.VarChar(255)
  trial_buscafisio_ends_at                                                             DateTime?                              @db.Timestamp(0)
  used_trial_from_buscafisio                                                           Boolean                                @default(false)
  used_emails                                                                          Int                                    @default(0)
  emails                                                                               Int                                    @default(0)
  queue_store_appointments                                                             String                                 @default("store_appointments_1") @db.VarChar(255)
  dynamodb_log_register                                                                String                                 @default("activity_logs_table") @db.VarChar(255)
  email                                                                                String?                                @db.VarChar(255)
  is_checked_joker                                                                     Int                                    @default(0) @db.TinyInt
  accounts                                                                             accounts[]
  additional_package_entity                                                            additional_package_entity[]            @ignore
  affiliate_entity                                                                     affiliate_entity[]
  affiliate_histories                                                                  affiliate_histories[]
  affiliates                                                                           affiliates[]
  agreements                                                                           agreements[]
  appointment_audio                                                                    appointment_audio[]
  appointment_packages                                                                 appointment_packages[]
  appointments_relation                                                                appointments[]
  area_entity                                                                          area_entity[]                          @ignore
  attendance_confirmations                                                             attendance_confirmations[]
  backups                                                                              backups[]
  billing_datas                                                                        billing_datas[]
  chatgpt_answers                                                                      chatgpt_answers[]
  chatgpt_questions                                                                    chatgpt_questions[]
  city_service_codes                                                                   city_service_codes[]
  contact_entity                                                                       contact_entity[]                       @ignore
  contacts_contacts_origin_entity_idToentities                                         contacts[]                             @relation("contacts_origin_entity_idToentities")
  contacts_contacts_entity_idToentities                                                contacts[]                             @relation("contacts_entity_idToentities")
  cost_centers                                                                         cost_centers[]
  custom_documents                                                                     custom_documents[]
  customer_subscription_adjustments                                                    customer_subscription_adjustments[]
  doctors                                                                              doctors[]
  financial_categories_entities_commission_financial_category_idTofinancial_categories financial_categories                   @relation("entities_commission_financial_category_idTofinancial_categories", fields: [commission_financial_category_id], references: [id], onUpdate: Restrict, map: "entities_commission_financial_category_id_foreign")
  councils                                                                             councils?                              @relation(fields: [council_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "entities_council_id_foreign")
  coupons                                                                              coupons?                               @relation(fields: [coupon_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "entities_coupon_id_foreign")
  images_entities_image_idToimages                                                     images?                                @relation("entities_image_idToimages", fields: [image_id], references: [id], onUpdate: Restrict, map: "entities_image_id_foreign")
  entities                                                                             entities?                              @relation("entitiesToentities", fields: [main_entity_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "entities_main_entity_id_foreign")
  other_entities                                                                       entities[]                             @relation("entitiesToentities")
  partners                                                                             partners?                              @relation(fields: [partner_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "entities_partner_id_foreign")
  plans                                                                                plans                                  @relation(fields: [plan_id], references: [id], onUpdate: Restrict, map: "entities_plan_id_foreign")
  entity_agreement                                                                     entity_agreement[]
  entity_agreement_hide                                                                entity_agreement_hide[]
  entity_status_hide                                                                   entity_status_hide[]
  entity_user                                                                          entity_user[]                          @ignore
  evaluation_models                                                                    evaluation_models[]
  evolution_models                                                                     evolution_models[]
  excel_files                                                                          excel_files[]
  federal_service_codes                                                                federal_service_codes[]
  file_waiting_room                                                                    file_waiting_room[]
  files                                                                                files[]
  financial_categories_financial_categories_entity_idToentities                        financial_categories[]                 @relation("financial_categories_entity_idToentities")
  financial_category_hide                                                              financial_category_hide[]
  gympass_bookings                                                                     gympass_bookings[]
  gympass_check_ins                                                                    gympass_check_ins[]
  gympass_classes                                                                      gympass_classes[]
  gympass_configs                                                                      gympass_configs[]
  gympass_products                                                                     gympass_products[]
  gympass_slots                                                                        gympass_slots[]
  health_scores                                                                        health_scores[]
  holidays                                                                             holidays[]
  holidays_hide                                                                        holidays_hide[]
  images_images_entity_idToentities                                                    images[]                               @relation("images_entity_idToentities")
  imports                                                                              imports[]
  message_settings                                                                     message_settings[]
  messages_relation                                                                    messages[]
  mkt_automatic_birthday_messages                                                      mkt_automatic_birthday_messages[]
  mkt_automation_messages                                                              mkt_automation_messages[]
  mkt_automations                                                                      mkt_automations[]
  mkt_net_promoter_scores                                                              mkt_net_promoter_scores[]
  mkt_profiles                                                                         mkt_profiles[]
  mkt_segments                                                                         mkt_segments[]
  mkt_segments_hide                                                                    mkt_segments_hide[]
  mkt_signatures                                                                       mkt_signatures[]
  mkt_templates                                                                        mkt_templates[]
  mkt_templates_hide                                                                   mkt_templates_hide[]
  mkt_watermarks                                                                       mkt_watermarks[]
  module_payment_charges                                                               module_payment_charges[]
  module_payment_customer                                                              module_payment_customer[]
  module_payment_cycles                                                                module_payment_cycles[]
  module_payment_discounts                                                             module_payment_discounts[]
  module_payment_increments                                                            module_payment_increments[]
  module_payment_invoices                                                              module_payment_invoices[]
  module_payment_items_invoices                                                        module_payment_items_invoices[]
  module_payment_subscription                                                          module_payment_subscription[]
  movements                                                                            movements[]
  nfe_companies                                                                        nfe_companies[]
  nfe_details                                                                          nfe_details[]
  nfe_files                                                                            nfe_files[]
  notifications                                                                        notifications[]
  payment_intermediation_anticipations                                                 payment_intermediation_anticipations[]
  payment_intermediation_banks                                                         payment_intermediation_banks[]
  payment_intermediation_movements                                                     payment_intermediation_movements[]
  payment_intermediation_receivers                                                     payment_intermediation_receivers[]
  payment_intermediation_returns                                                       payment_intermediation_returns[]
  payment_intermediation_transfers                                                     payment_intermediation_transfers[]
  payment_methods                                                                      payment_methods[]
  pre_evaluations                                                                      pre_evaluations[]
  procedures                                                                           procedures[]
  received_messages                                                                    received_messages[]
  report_information                                                                   report_information[]
  room_user                                                                            room_user[]
  rooms                                                                                rooms[]
  sadt_guides                                                                          sadt_guides[]
  settings_attendance_confirmations                                                    settings_attendance_confirmations[]
  settings_calendar                                                                    settings_calendar[]
  status_relation                                                                      status[]
  tiss_guides                                                                          tiss_guides[]
  tiss_lots                                                                            tiss_lots[]
  tuss_own_packages                                                                    tuss_own_packages[]
  waiting_room_line                                                                    waiting_room_line[]
  zenvia_conversion_retail_data                                                        zenvia_conversion_retail_data[]

  @@index([commission_financial_category_id], map: "entities_commission_financial_category_id_index")
  @@index([council_id], map: "entities_council_id_index")
  @@index([coupon_id], map: "entities_coupon_id_index")
  @@index([entity_type], map: "entities_entity_type_index")
  @@index([image_id], map: "entities_image_id_index")
  @@index([main_entity_id], map: "entities_main_entity_id_index")
  @@index([partner_id], map: "entities_partner_id_index")
  @@index([plan_details], map: "entities_plan_details_index")
  @@index([plan_id], map: "entities_plan_id_index")
  @@index([ticket_or_card], map: "entities_ticket_or_card_index")
}

model entity_agreement {
  id                       BigInt     @id @default(autoincrement()) @db.UnsignedBigInt
  agreement_id             Int        @db.UnsignedInt
  entity_id                Int        @db.UnsignedInt
  agreement_identification String     @db.VarChar(255)
  created_at               DateTime?  @db.Timestamp(0)
  updated_at               DateTime?  @db.Timestamp(0)
  agreements               agreements @relation(fields: [agreement_id], references: [id], onDelete: Cascade, map: "entity_agreement_agreement_id_foreign")
  entities                 entities   @relation(fields: [entity_id], references: [id], onDelete: Cascade, map: "entity_agreement_entity_id_foreign")

  @@index([agreement_id], map: "entity_agreement_agreement_id_index")
  @@index([entity_id], map: "entity_agreement_entity_id_index")
}

model entity_agreement_hide {
  id           BigInt     @id @default(autoincrement()) @db.UnsignedBigInt
  entity_id    Int        @db.UnsignedInt
  agreement_id Int        @db.UnsignedInt
  agreements   agreements @relation(fields: [agreement_id], references: [id], onUpdate: Restrict, map: "entity_agreement_hide_agreement_id_foreign")
  entities     entities   @relation(fields: [entity_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "entity_agreement_hide_entity_id_foreign")

  @@index([agreement_id], map: "entity_agreement_hide_agreement_id_index")
  @@index([entity_id], map: "entity_agreement_hide_entity_id_index")
}

model entity_status_hide {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  entity_id  Int       @db.UnsignedInt
  status_id  Int       @db.UnsignedInt
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  entities   entities  @relation(fields: [entity_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "entity_status_hide_entity_id_foreign")
  status     status    @relation(fields: [status_id], references: [id], onUpdate: Restrict, map: "entity_status_hide_status_id_foreign")

  @@index([entity_id], map: "entity_status_hide_entity_id_index")
  @@index([status_id], map: "entity_status_hide_status_id_index")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model entity_user {
  entity_id  Int       @db.UnsignedInt
  user_id    Int       @db.UnsignedInt
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  entities   entities  @relation(fields: [entity_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "entity_user_entity_id_foreign")
  users      users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "entity_user_user_id_foreign")

  @@index([entity_id], map: "entity_user_entity_id_index")
  @@index([user_id], map: "entity_user_user_id_index")
  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model evaluation_file {
  evaluation_id Int         @db.UnsignedInt
  file_id       Int         @db.UnsignedInt
  evaluations   evaluations @relation(fields: [evaluation_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "evaluation_file_evaluation_id_foreign")
  files         files       @relation(fields: [file_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "evaluation_file_file_id_foreign")

  @@index([evaluation_id], map: "evaluation_file_evaluation_id_index")
  @@index([file_id], map: "evaluation_file_file_id_index")
  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model evaluation_model_pre_evaluations {
  pre_evaluation_id   BigInt            @db.UnsignedBigInt
  evaluation_model_id Int               @db.UnsignedInt
  appointment_token   String            @db.VarChar(255)
  evaluation_models   evaluation_models @relation(fields: [evaluation_model_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "evaluation_model_pre_evaluations_evaluation_model_id_foreign")
  pre_evaluations     pre_evaluations   @relation(fields: [pre_evaluation_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "evaluation_model_pre_evaluations_pre_evaluation_id_foreign")

  @@index([evaluation_model_id], map: "evaluation_model_pre_evaluations_evaluation_model_id_index")
  @@index([pre_evaluation_id], map: "evaluation_model_pre_evaluations_pre_evaluation_id_index")
  @@ignore
}

model evaluation_models {
  id                               Int                                @id @default(autoincrement()) @db.UnsignedInt
  name                             String                             @db.VarChar(255)
  slug                             String                             @db.VarChar(255)
  entity_id                        Int?                               @db.UnsignedInt
  created_at                       DateTime?                          @db.Timestamp(0)
  updated_at                       DateTime?                          @db.Timestamp(0)
  deleted_at                       DateTime?                          @db.Timestamp(0)
  is_confidential                  Boolean                            @default(false)
  is_pre_evaluation                Boolean                            @default(false)
  confidential_evaluation_model    confidential_evaluation_model[]
  evaluation_model_pre_evaluations evaluation_model_pre_evaluations[] @ignore
  entities                         entities?                          @relation(fields: [entity_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "evaluation_models_entity_id_foreign")
  fields                           fields[]

  @@index([entity_id], map: "evaluation_models_entity_id_index")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model evaluations {
  id                                               Int                             @id @default(autoincrement()) @db.UnsignedInt
  main_complaint                                   String                          @db.Text
  history_current_disease                          String?                         @db.Text
  previous_medical_history                         String?                         @db.Text
  family_history                                   String?                         @db.Text
  smoker                                           String?                         @db.VarChar(255)
  how_long_smoker                                  String?                         @db.VarChar(255)
  frequency_smoker                                 String?                         @db.VarChar(255)
  drink                                            String?                         @db.VarChar(255)
  frequency_drink                                  String?                         @db.VarChar(255)
  drugs                                            String?                         @db.VarChar(255)
  how_long_drugs                                   String?                         @db.VarChar(255)
  frequency_drugs                                  String?                         @db.VarChar(255)
  previous_view                                    String?                         @db.VarChar(255)
  posterior_view                                   String?                         @db.VarChar(255)
  right_side_view                                  String?                         @db.VarChar(255)
  left_side_view                                   String?                         @db.VarChar(255)
  unit                                             String?                         @db.VarChar(255)
  bed                                              String?                         @db.VarChar(255)
  observations_postural_evaluation                 String?                         @db.Text
  medical_diagnostic                               String?                         @db.Text
  appointment_id                                   Int                             @db.UnsignedInt
  procedure_id                                     Int?                            @db.UnsignedInt
  doctor_id                                        Int?                            @db.UnsignedInt
  cid10_id                                         Int?                            @db.UnsignedInt
  created_at                                       DateTime?                       @db.Timestamp(0)
  updated_at                                       DateTime?                       @db.Timestamp(0)
  comment                                          String                          @db.Text
  image_previous_view                              Int?                            @db.UnsignedInt
  image_posterior_view                             Int?                            @db.UnsignedInt
  image_right_side_view                            Int?                            @db.UnsignedInt
  image_left_side_view                             Int?                            @db.UnsignedInt
  physical_objective                               String?                         @db.VarChar(255)
  physical_pa                                      String?                         @db.VarChar(255)
  physical_fcrep                                   String?                         @db.VarChar(255)
  physical_height                                  String?                         @db.VarChar(255)
  physical_weight                                  String?                         @db.VarChar(255)
  physical_imc                                     String?                         @db.VarChar(255)
  physical_parq                                    String?                         @db.Text
  physical_medical_history                         String?                         @db.Text
  physical_functional_test                         String?                         @db.Text
  physical_anaerobic_test                          String?                         @db.Text
  physical_agility_test                            String?                         @db.Text
  physical_power_test                              String?                         @db.Text
  physical_muscle_test                             String?                         @db.Text
  physical_aerobic_test                            String?                         @db.Text
  physical_final_award                             String?                         @db.Text
  type                                             Int                             @default(1) @db.TinyInt
  area_selected                                    String?                         @db.Text
  image_area                                       evaluations_image_area?
  deleted_at                                       DateTime?                       @db.Timestamp(0)
  confidential_evaluation_model                    confidential_evaluation_model[]
  evaluation_file                                  evaluation_file[]               @ignore
  appointments                                     appointments                    @relation(fields: [appointment_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "evaluations_appointment_id_foreign")
  cid10s                                           cid10s?                         @relation(fields: [cid10_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "evaluations_cid10_id_foreign")
  doctors                                          doctors?                        @relation(fields: [doctor_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "evaluations_doctor_id_foreign")
  images_evaluations_image_left_side_viewToimages  images?                         @relation("evaluations_image_left_side_viewToimages", fields: [image_left_side_view], references: [id], onUpdate: Restrict, map: "evaluations_image_left_side_view_foreign")
  images_evaluations_image_posterior_viewToimages  images?                         @relation("evaluations_image_posterior_viewToimages", fields: [image_posterior_view], references: [id], onUpdate: Restrict, map: "evaluations_image_posterior_view_foreign")
  images_evaluations_image_previous_viewToimages   images?                         @relation("evaluations_image_previous_viewToimages", fields: [image_previous_view], references: [id], onUpdate: Restrict, map: "evaluations_image_previous_view_foreign")
  images_evaluations_image_right_side_viewToimages images?                         @relation("evaluations_image_right_side_viewToimages", fields: [image_right_side_view], references: [id], onUpdate: Restrict, map: "evaluations_image_right_side_view_foreign")
  procedures                                       procedures?                     @relation(fields: [procedure_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "evaluations_procedure_id_foreign")
  results                                          results[]
  treatment_plans                                  treatment_plans[]

  @@index([appointment_id], map: "evaluations_appointment_id_index")
  @@index([cid10_id], map: "evaluations_cid10_id_index")
  @@index([created_at], map: "evaluations_created_at_index")
  @@index([doctor_id], map: "evaluations_doctor_id_index")
  @@index([image_left_side_view], map: "evaluations_image_left_side_view_index")
  @@index([image_posterior_view], map: "evaluations_image_posterior_view_index")
  @@index([image_previous_view], map: "evaluations_image_previous_view_index")
  @@index([image_right_side_view], map: "evaluations_image_right_side_view_index")
  @@index([procedure_id], map: "evaluations_procedure_id_index")
  @@index([type], map: "evaluations_type_index")
  @@index([updated_at], map: "evaluations_updated_at_index")
}

model evolution_fields {
  id                 BigInt              @id @default(autoincrement()) @db.UnsignedBigInt
  title              String              @db.VarChar(255)
  name               String              @db.VarChar(255)
  type               String              @db.VarChar(255)
  order              Int
  evolution_model_id BigInt              @db.UnsignedBigInt
  created_at         DateTime?           @db.Timestamp(0)
  updated_at         DateTime?           @db.Timestamp(0)
  deleted_at         DateTime?           @db.Timestamp(0)
  description        String?             @db.Text
  evolution_models   evolution_models    @relation(fields: [evolution_model_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "evolution_fields_evolution_model_id_foreign")
  evolution_options  evolution_options[]
  evolution_results  evolution_results[]

  @@index([evolution_model_id], map: "evolution_fields_evolution_model_id_index")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model evolution_file {
  evolution_id Int        @db.UnsignedInt
  file_id      Int        @db.UnsignedInt
  evolutions   evolutions @relation(fields: [evolution_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "evolution_file_evolution_id_foreign")
  files        files      @relation(fields: [file_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "evolution_file_file_id_foreign")

  @@index([evolution_id], map: "evolution_file_evolution_id_index")
  @@index([file_id], map: "evolution_file_file_id_index")
  @@ignore
}

model evolution_models {
  id                           BigInt                         @id @default(autoincrement()) @db.UnsignedBigInt
  name                         String                         @db.VarChar(255)
  slug                         String                         @db.VarChar(255)
  entity_id                    Int                            @db.UnsignedInt
  deleted_at                   DateTime?                      @db.Timestamp(0)
  created_at                   DateTime?                      @db.Timestamp(0)
  updated_at                   DateTime?                      @db.Timestamp(0)
  is_confidential              Boolean                        @default(false)
  confidential_evolution_model confidential_evolution_model[]
  evolution_fields             evolution_fields[]
  entities                     entities                       @relation(fields: [entity_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "evolution_models_entity_id_foreign")

  @@index([entity_id], map: "evolution_models_entity_id_index")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model evolution_options {
  id                 BigInt           @id @default(autoincrement()) @db.UnsignedBigInt
  name               String           @db.VarChar(255)
  order              Int?
  evolution_field_id BigInt           @db.UnsignedBigInt
  created_at         DateTime?        @db.Timestamp(0)
  updated_at         DateTime?        @db.Timestamp(0)
  evolution_fields   evolution_fields @relation(fields: [evolution_field_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "evolution_options_evolution_field_id_foreign")

  @@index([evolution_field_id], map: "evolution_options_evolution_field_id_index")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model evolution_procedure {
  evolution_id Int        @db.UnsignedInt
  procedure_id Int        @db.UnsignedInt
  created_at   DateTime?  @db.Timestamp(0)
  updated_at   DateTime?  @db.Timestamp(0)
  evolutions   evolutions @relation(fields: [evolution_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "evolution_procedure_evolution_id_foreign")
  procedures   procedures @relation(fields: [procedure_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "evolution_procedure_procedure_id_foreign")

  @@index([evolution_id], map: "evolution_procedure_evolution_id_index")
  @@index([procedure_id], map: "evolution_procedure_procedure_id_index")
  @@ignore
}

model evolution_results {
  id                 BigInt           @id @default(autoincrement()) @db.UnsignedBigInt
  result             String           @db.Text
  evolution_field_id BigInt           @db.UnsignedBigInt
  evolution_id       Int              @db.UnsignedInt
  created_at         DateTime?        @db.Timestamp(0)
  updated_at         DateTime?        @db.Timestamp(0)
  evolution_fields   evolution_fields @relation(fields: [evolution_field_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "evolution_results_evolution_field_id_foreign")
  evolutions         evolutions       @relation(fields: [evolution_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "evolution_results_evolution_id_foreign")

  @@index([evolution_field_id], map: "evolution_results_evolution_field_id_index")
  @@index([evolution_id], map: "evolution_results_evolution_id_index")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model evolutions {
  id                           Int                            @id @default(autoincrement()) @db.UnsignedInt
  evolution                    String                         @db.MediumText
  appointment_id               Int                            @db.UnsignedInt
  created_at                   DateTime?                      @db.Timestamp(0)
  updated_at                   DateTime?                      @db.Timestamp(0)
  type                         Int                            @default(0) @db.TinyInt
  deleted_at                   DateTime?                      @db.Timestamp(0)
  procedure_id                 Int?                           @db.UnsignedInt
  confidential_evolution_model confidential_evolution_model[]
  evolution_file               evolution_file[]               @ignore
  evolution_procedure          evolution_procedure[]          @ignore
  evolution_results            evolution_results[]
  appointments                 appointments                   @relation(fields: [appointment_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "evolutions_appointment_id_foreign")
  procedures                   procedures?                    @relation(fields: [procedure_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "evolutions_procedure_id_foreign")

  @@index([appointment_id], map: "evolutions_appointment_id_index")
  @@index([created_at], map: "evolutions_created_at_index")
  @@index([procedure_id], map: "evolutions_procedure_id_index")
  @@index([type], map: "evolutions_type_index")
  @@index([updated_at], map: "evolutions_updated_at_index")
}

model excel_files {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  entity_id  Int       @db.UnsignedInt
  file_id    Int?      @db.UnsignedInt
  token      String    @db.VarChar(255)
  origin     String    @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  entities   entities  @relation(fields: [entity_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "excel_files_entity_id_foreign")
  files      files?    @relation(fields: [file_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "excel_files_file_id_foreign")

  @@index([entity_id], map: "excel_files_entity_id_index")
  @@index([file_id], map: "excel_files_file_id_index")
}

model failed_jobs {
  id         BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  connection String   @db.Text
  queue      String   @db.Text
  payload    String   @db.LongText
  exception  String   @db.LongText
  failed_at  DateTime @default(now()) @db.Timestamp(0)
}

model federal_service_codes {
  id             BigInt         @id @default(autoincrement()) @db.UnsignedBigInt
  entity_id      Int            @db.UnsignedInt
  nfe_company_id BigInt?        @db.UnsignedBigInt
  code           String         @db.VarChar(255)
  show           Int            @default(0) @db.TinyInt
  created_at     DateTime?      @db.Timestamp(0)
  updated_at     DateTime?      @db.Timestamp(0)
  entities       entities       @relation(fields: [entity_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "federal_service_codes_entity_id_foreign")
  nfe_companies  nfe_companies? @relation(fields: [nfe_company_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "federal_service_codes_nfe_company_id_foreign")
  nfe_details    nfe_details[]

  @@index([entity_id], map: "federal_service_codes_entity_id_index")
  @@index([nfe_company_id], map: "federal_service_codes_nfe_company_id_index")
}

model fields {
  id                     Int                      @id @default(autoincrement()) @db.UnsignedInt
  title                  String                   @db.VarChar(255)
  name                   String                   @db.VarChar(255)
  type                   String                   @db.VarChar(255)
  order                  Int
  evaluation_model_id    Int                      @db.UnsignedInt
  created_at             DateTime?                @db.Timestamp(0)
  updated_at             DateTime?                @db.Timestamp(0)
  deleted_at             DateTime?                @db.Timestamp(0)
  description            String?                  @db.Text
  evaluation_models      evaluation_models        @relation(fields: [evaluation_model_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "fields_evaluation_model_id_foreign")
  options                options[]
  pre_evaluation_results pre_evaluation_results[]
  results                results[]

  @@index([evaluation_model_id], map: "fields_evaluation_model_id_index")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model file_movement {
  movement_id Int       @db.UnsignedInt
  file_id     Int       @db.UnsignedInt
  files       files     @relation(fields: [file_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "file_movement_file_id_foreign")
  movements   movements @relation(fields: [movement_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "file_movement_movement_id_foreign")

  @@index([file_id], map: "file_movement_file_id_index")
  @@index([movement_id], map: "file_movement_movement_id_index")
  @@ignore
}

model file_waiting_room {
  id        BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  file_id   Int      @db.UnsignedInt
  entity_id Int      @db.UnsignedInt
  type      String   @db.VarChar(255)
  position  Int
  entities  entities @relation(fields: [entity_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "file_waiting_room_entity_id_foreign")
  files     files    @relation(fields: [file_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "file_waiting_room_file_id_foreign")

  @@index([entity_id], map: "file_waiting_room_entity_id_index")
  @@index([file_id], map: "file_waiting_room_file_id_index")
}

model files {
  id                                     Int                 @id @default(autoincrement()) @db.UnsignedInt
  name                                   String              @db.VarChar(255)
  ext                                    String              @db.VarChar(50)
  description                            String              @db.VarChar(255)
  created_at                             DateTime?           @db.Timestamp(0)
  updated_at                             DateTime?           @db.Timestamp(0)
  entity_id                              Int?                @db.UnsignedInt
  already_changed                        Int                 @db.TinyInt
  user_id                                Int?                @db.UnsignedInt
  contact_id                             Int?                @db.UnsignedInt
  custom_document_id                     BigInt?             @db.UnsignedBigInt
  movement_id                            Int?                @db.UnsignedInt
  backups                                backups[]
  evaluation_file                        evaluation_file[]   @ignore
  evolution_file                         evolution_file[]    @ignore
  excel_files                            excel_files[]
  file_movement                          file_movement[]     @ignore
  file_waiting_room                      file_waiting_room[]
  contacts                               contacts?           @relation(fields: [contact_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "files_contact_id_foreign")
  custom_documents                       custom_documents?   @relation(fields: [custom_document_id], references: [id], onUpdate: Restrict, map: "files_custom_document_id_foreign")
  entities                               entities?           @relation(fields: [entity_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "files_entity_id_foreign")
  movements_files_movement_idTomovements movements?          @relation("files_movement_idTomovements", fields: [movement_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "files_movement_id_foreign")
  users                                  users?              @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "files_user_id_foreign")
  imports_imports_csv_idTofiles          imports[]           @relation("imports_csv_idTofiles")
  imports_imports_log_idTofiles          imports[]           @relation("imports_log_idTofiles")
  movements_movements_file_idTofiles     movements[]         @relation("movements_file_idTofiles")
  nfe_companies                          nfe_companies[]

  @@index([contact_id], map: "files_contact_id_index")
  @@index([custom_document_id], map: "files_custom_document_id_foreign")
  @@index([entity_id], map: "files_entity_id_index")
  @@index([movement_id], map: "files_movement_id_foreign")
  @@index([user_id], map: "files_user_id_index")
}

model financial_categories {
  id                                                                       Int                       @id @default(autoincrement()) @db.UnsignedInt
  name                                                                     String                    @db.VarChar(255)
  type                                                                     String                    @db.VarChar(255)
  created_at                                                               DateTime?                 @db.Timestamp(0)
  updated_at                                                               DateTime?                 @db.Timestamp(0)
  entity_id                                                                Int?                      @db.UnsignedInt
  deleted_at                                                               DateTime?                 @db.Timestamp(0)
  entities_entities_commission_financial_category_idTofinancial_categories entities[]                @relation("entities_commission_financial_category_idTofinancial_categories")
  entities_financial_categories_entity_idToentities                        entities?                 @relation("financial_categories_entity_idToentities", fields: [entity_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "financial_categories_entity_id_foreign")
  financial_category_hide                                                  financial_category_hide[]
  movements                                                                movements[]

  @@index([entity_id], map: "financial_categories_entity_id_index")
  @@index([type], map: "financial_categories_type_index")
}

model financial_category_hide {
  id                    BigInt               @id @default(autoincrement()) @db.UnsignedBigInt
  entity_id             Int                  @db.UnsignedInt
  financial_category_id Int                  @db.UnsignedInt
  created_at            DateTime?            @db.Timestamp(0)
  updated_at            DateTime?            @db.Timestamp(0)
  entities              entities             @relation(fields: [entity_id], references: [id], onUpdate: Restrict, map: "financial_category_hide_entity_id_foreign")
  financial_categories  financial_categories @relation(fields: [financial_category_id], references: [id], onUpdate: Restrict, map: "financial_category_hide_financial_category_id_foreign")

  @@index([entity_id], map: "financial_category_hide_entity_id_foreign")
  @@index([financial_category_id], map: "financial_category_hide_financial_category_id_foreign")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model fz_configs {
  id                           BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  created_at                   DateTime? @db.Timestamp(0)
  updated_at                   DateTime? @db.Timestamp(0)
  entity_id                    BigInt    @db.UnsignedBigInt
  medical_record_available     Boolean   @default(false)
  appointment_changeable_until Int       @default(1)
  appointment_cancelable_until Int       @default(1)
  is_approved                  Boolean   @default(false)
  is_enabled                   Boolean   @default(false)
  disabled_at                  DateTime? @db.Timestamp(0)
}

model fz_faq_tags {
  id                  BigInt                @id @default(autoincrement()) @db.UnsignedBigInt
  created_at          DateTime?             @db.Timestamp(0)
  updated_at          DateTime?             @db.Timestamp(0)
  name                String                @db.VarChar(255)
  color               String                @db.VarChar(255)
  fz_faqs_fz_faq_tags fz_faqs_fz_faq_tags[]
}

model fz_faqs {
  id                  BigInt                @id @default(autoincrement()) @db.UnsignedBigInt
  created_at          DateTime?             @db.Timestamp(0)
  updated_at          DateTime?             @db.Timestamp(0)
  title               String                @db.VarChar(255)
  sub_title           String?               @db.VarChar(255)
  body                String                @db.MediumText
  published           Boolean               @default(false)
  fz_faqs_fz_faq_tags fz_faqs_fz_faq_tags[]
}

model fz_faqs_fz_faq_tags {
  id            BigInt      @id @default(autoincrement()) @db.UnsignedBigInt
  fz_faq_id     BigInt      @db.UnsignedBigInt
  fz_faq_tag_id BigInt      @db.UnsignedBigInt
  created_at    DateTime?   @db.Timestamp(0)
  updated_at    DateTime?   @db.Timestamp(0)
  fz_faqs       fz_faqs     @relation(fields: [fz_faq_id], references: [id], onUpdate: Restrict, map: "fz_faqs_fz_faq_tags_fz_faq_id_foreign")
  fz_faq_tags   fz_faq_tags @relation(fields: [fz_faq_tag_id], references: [id], onUpdate: Restrict, map: "fz_faqs_fz_faq_tags_fz_faq_tag_id_foreign")

  @@index([fz_faq_id], map: "fz_faqs_fz_faq_tags_fz_faq_id_foreign")
  @@index([fz_faq_tag_id], map: "fz_faqs_fz_faq_tags_fz_faq_tag_id_foreign")
}

model fz_procedures {
  id           BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  created_at   DateTime? @db.Timestamp(0)
  updated_at   DateTime? @db.Timestamp(0)
  entity_id    BigInt    @db.UnsignedBigInt
  name         String    @db.VarChar(255)
  description  String?   @db.VarChar(255)
  tiss_code    String?   @db.VarChar(255)
  procedure_id BigInt?   @db.UnsignedBigInt

  @@unique([name, entity_id], map: "fz_procedures_name_entity_id_unique")
}

model fz_solicitations {
  id               BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  created_at       DateTime? @db.Timestamp(0)
  updated_at       DateTime? @db.Timestamp(0)
  entity_id        BigInt    @db.UnsignedBigInt
  start_time       DateTime  @db.Time(0)
  end_time         DateTime? @db.Time(0)
  date             DateTime? @db.Date
  agreement_id     BigInt?   @db.UnsignedBigInt
  contact_id       BigInt?   @db.UnsignedBigInt
  fz_procedure_id  BigInt?   @db.UnsignedBigInt
  specialty_id     BigInt?   @db.UnsignedBigInt
  observation      String?   @db.VarChar(255)
  status           Int       @default(0) @db.SmallInt
  rejection_reason Int?
}

model fz_specialties {
  id           BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  created_at   DateTime? @db.Timestamp(0)
  updated_at   DateTime? @db.Timestamp(0)
  entity_id    BigInt    @db.UnsignedBigInt
  name         String    @db.VarChar(255)
  specialty_id BigInt?   @db.UnsignedBigInt
}

model fz_time_slots {
  id              BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  created_at      DateTime? @db.Timestamp(0)
  updated_at      DateTime? @db.Timestamp(0)
  entity_id       BigInt    @db.UnsignedBigInt
  professional_id BigInt?   @db.UnsignedBigInt
  time            DateTime  @db.Time(0)
  week_days       Int
  slots_ammount   Int

  @@unique([time, entity_id], map: "fz_time_slots_time_entity_id_unique")
}

model google_accounts {
  id                         Int                          @id @default(autoincrement()) @db.UnsignedInt
  user_id                    Int                          @db.UnsignedInt
  token                      Json
  created_at                 DateTime?                    @db.Timestamp(0)
  updated_at                 DateTime?                    @db.Timestamp(0)
  appointment_google_account appointment_google_account[]
  users                      users                        @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "google_accounts_user_id_foreign")
  google_calendars           google_calendars[]

  @@index([user_id], map: "google_accounts_user_id_foreign")
}

model google_calendars {
  id                   Int             @id @default(autoincrement()) @db.UnsignedInt
  google_account_id    Int             @db.UnsignedInt
  google_id            String          @db.VarChar(255)
  name                 String          @db.VarChar(255)
  color                String          @db.VarChar(255)
  timezone             String          @db.VarChar(255)
  created_at           DateTime?       @db.Timestamp(0)
  updated_at           DateTime?       @db.Timestamp(0)
  is_zenfisio_calendar Int?            @db.SmallInt
  primary              Int?            @db.SmallInt
  google_accounts      google_accounts @relation(fields: [google_account_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "google_calendars_google_account_id_foreign")
  google_events        google_events[]

  @@index([google_account_id], map: "google_calendars_google_account_id_foreign")
}

model google_events {
  id                  Int              @id @default(autoincrement()) @db.UnsignedInt
  google_calendar_id  Int              @db.UnsignedInt
  google_id           String           @db.VarChar(255)
  name                String           @db.VarChar(255)
  description         String?          @db.Text
  allday              Boolean          @default(false)
  started_at          DateTime?        @db.DateTime(0)
  ended_at            DateTime?        @db.DateTime(0)
  created_at          DateTime?        @db.Timestamp(0)
  updated_at          DateTime?        @db.Timestamp(0)
  recurrence          String?          @db.VarChar(255)
  recurring_event_id  String?          @db.VarChar(255)
  original_started_at DateTime?        @db.DateTime(0)
  status              String?          @db.VarChar(255)
  recurrence_until    DateTime?        @db.DateTime(0)
  user_id             Int?             @db.UnsignedInt
  google_calendars    google_calendars @relation(fields: [google_calendar_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "google_events_google_calendar_id_foreign")
  users               users?           @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "google_events_user_id_foreign")

  @@index([created_at], map: "google_events_created_at_index")
  @@index([ended_at], map: "google_events_ended_at_index")
  @@index([google_calendar_id], map: "google_events_google_calendar_id_foreign")
  @@index([google_id], map: "google_events_google_id_index")
  @@index([original_started_at], map: "google_events_original_started_at_index")
  @@index([recurrence], map: "google_events_recurrence_index")
  @@index([recurrence_until], map: "google_events_recurrence_until_index")
  @@index([recurring_event_id], map: "google_events_recurring_event_id_index")
  @@index([started_at], map: "google_events_started_at_index")
  @@index([updated_at], map: "google_events_updated_at_index")
  @@index([user_id], map: "google_events_user_id_index")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model google_syncs {
  id                   String    @db.VarChar(255)
  synchronizable_type  String    @db.VarChar(255)
  synchronizable_id    BigInt    @db.UnsignedBigInt
  token                String?   @db.VarChar(255)
  last_synchronized_at DateTime  @db.DateTime(0)
  created_at           DateTime? @db.Timestamp(0)
  updated_at           DateTime? @db.Timestamp(0)
  user_id              Int?      @db.UnsignedInt
  users                users?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "google_syncs_user_id_foreign")

  @@index([synchronizable_type, synchronizable_id], map: "google_syncs_synchronizable_type_synchronizable_id_index")
  @@index([user_id], map: "google_syncs_user_id_index")
  @@ignore
}

model gympass_bookings {
  id                                                                                       BigInt              @id @default(autoincrement()) @db.UnsignedBigInt
  created_at                                                                               DateTime?           @db.Timestamp(0)
  updated_at                                                                               DateTime?           @db.Timestamp(0)
  event_type                                                                               String              @db.VarChar(255)
  event_id                                                                                 String?             @db.VarChar(255)
  booking_number                                                                           String              @db.VarChar(255)
  contact_id                                                                               Int?                @db.UnsignedInt
  entity_id                                                                                Int                 @db.UnsignedInt
  gympass_slot_id                                                                          BigInt?             @db.UnsignedBigInt
  gympass_class_id                                                                         BigInt?             @db.UnsignedBigInt
  gympass_booking_cancelation_id                                                           BigInt?             @db.UnsignedBigInt
  gympass_booking_check_in_id                                                              BigInt?             @db.UnsignedBigInt
  reason                                                                                   String?             @db.Text
  status                                                                                   Int?
  processed                                                                                Boolean             @default(false)
  appointment_id                                                                           Int?                @db.UnsignedInt
  appointments                                                                             appointments?       @relation(fields: [appointment_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "gympass_bookings_appointment_id_foreign")
  contacts                                                                                 contacts?           @relation(fields: [contact_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "gympass_bookings_contact_id_foreign")
  entities                                                                                 entities            @relation(fields: [entity_id], references: [id], onUpdate: Restrict, map: "gympass_bookings_entity_id_foreign")
  gympass_bookings_gympass_bookings_gympass_booking_cancelation_idTogympass_bookings       gympass_bookings?   @relation("gympass_bookings_gympass_booking_cancelation_idTogympass_bookings", fields: [gympass_booking_cancelation_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "gympass_bookings_gympass_booking_cancelation_id_foreign")
  other_gympass_bookings_gympass_bookings_gympass_booking_cancelation_idTogympass_bookings gympass_bookings[]  @relation("gympass_bookings_gympass_booking_cancelation_idTogympass_bookings")
  gympass_bookings_gympass_bookings_gympass_booking_check_in_idTogympass_bookings          gympass_bookings?   @relation("gympass_bookings_gympass_booking_check_in_idTogympass_bookings", fields: [gympass_booking_check_in_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "gympass_bookings_gympass_booking_check_in_id_foreign")
  other_gympass_bookings_gympass_bookings_gympass_booking_check_in_idTogympass_bookings    gympass_bookings[]  @relation("gympass_bookings_gympass_booking_check_in_idTogympass_bookings")
  gympass_classes                                                                          gympass_classes?    @relation(fields: [gympass_class_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "gympass_bookings_gympass_class_id_foreign")
  gympass_slots                                                                            gympass_slots?      @relation(fields: [gympass_slot_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "gympass_bookings_gympass_slot_id_foreign")
  gympass_check_ins                                                                        gympass_check_ins[]

  @@index([appointment_id], map: "gympass_bookings_appointment_id_foreign")
  @@index([contact_id], map: "gympass_bookings_contact_id_foreign")
  @@index([entity_id], map: "gympass_bookings_entity_id_foreign")
  @@index([gympass_booking_cancelation_id], map: "gympass_bookings_gympass_booking_cancelation_id_foreign")
  @@index([gympass_booking_check_in_id], map: "gympass_bookings_gympass_booking_check_in_id_foreign")
  @@index([gympass_class_id], map: "gympass_bookings_gympass_class_id_foreign")
  @@index([gympass_slot_id], map: "gympass_bookings_gympass_slot_id_foreign")
}

model gympass_check_ins {
  id                 BigInt            @id @default(autoincrement()) @db.UnsignedBigInt
  created_at         DateTime?         @db.Timestamp(0)
  updated_at         DateTime?         @db.Timestamp(0)
  event_type         String            @db.VarChar(255)
  entity_id          Int               @db.UnsignedInt
  contact_id         Int               @db.UnsignedInt
  latitude           Float?
  longitude          Float?
  processed          Boolean           @default(false)
  approved           Boolean           @default(false)
  gympass_booking_id BigInt?           @db.UnsignedBigInt
  reject_reason      String?           @db.VarChar(255)
  contacts           contacts          @relation(fields: [contact_id], references: [id], onUpdate: Restrict, map: "gympass_check_ins_contact_id_foreign")
  entities           entities          @relation(fields: [entity_id], references: [id], onUpdate: Restrict, map: "gympass_check_ins_entity_id_foreign")
  gympass_bookings   gympass_bookings? @relation(fields: [gympass_booking_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "gympass_check_ins_gympass_booking_id_foreign")

  @@index([contact_id], map: "gympass_check_ins_contact_id_foreign")
  @@index([entity_id], map: "gympass_check_ins_entity_id_foreign")
  @@index([gympass_booking_id], map: "gympass_check_ins_gympass_booking_id_foreign")
}

model gympass_classes {
  id                 BigInt             @id @default(autoincrement()) @db.UnsignedBigInt
  gympass_id         Int                @db.UnsignedInt
  created_at         DateTime?          @db.Timestamp(0)
  updated_at         DateTime?          @db.Timestamp(0)
  name               String             @db.VarChar(255)
  description        String             @db.Text
  notes              String             @db.Text
  bookable           Boolean
  is_visible         Boolean
  gympass_product_id BigInt             @db.UnsignedBigInt
  reference          String             @db.VarChar(255)
  categories         String             @db.VarChar(255)
  system_id          Int                @db.UnsignedInt
  entity_id          Int                @db.UnsignedInt
  gympass_bookings   gympass_bookings[]
  entities           entities           @relation(fields: [entity_id], references: [id], onUpdate: Restrict, map: "gympass_classes_entity_id_foreign")
  gympass_products   gympass_products   @relation(fields: [gympass_product_id], references: [id], onUpdate: Restrict, map: "gympass_classes_gympass_product_id_foreign")
  gympass_slots      gympass_slots[]

  @@index([entity_id], map: "gympass_classes_entity_id_foreign")
  @@index([gympass_product_id], map: "gympass_classes_gympass_product_id_foreign")
}

model gympass_configs {
  id                             BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  created_at                     DateTime? @db.Timestamp(0)
  updated_at                     DateTime? @db.Timestamp(0)
  entity_id                      Int       @db.UnsignedInt
  gym_id                         String    @db.VarChar(255)
  appointment_manual_approvement Boolean
  appointment_automatic_checkin  Boolean   @default(false)
  aproved_by_gympass             Boolean   @default(false)
  entities                       entities  @relation(fields: [entity_id], references: [id], onUpdate: Restrict, map: "gympass_configs_entity_id_foreign")

  @@index([entity_id], map: "gympass_configs_entity_id_foreign")
}

model gympass_products {
  id                 BigInt            @id @default(autoincrement()) @db.UnsignedBigInt
  created_at         DateTime?         @db.Timestamp(0)
  updated_at         DateTime?         @db.Timestamp(0)
  entity_id          Int               @db.UnsignedInt
  name               String            @db.VarChar(255)
  gympass_product_id BigInt            @db.UnsignedBigInt
  gympass_updated_at DateTime          @db.Timestamp(0)
  gympass_classes    gympass_classes[]
  entities           entities          @relation(fields: [entity_id], references: [id], onUpdate: Restrict, map: "gympass_products_entity_id_foreign")
  gympass_slots      gympass_slots[]

  @@index([entity_id], map: "gympass_products_entity_id_foreign")
}

model gympass_slots {
  id                       BigInt             @id @default(autoincrement()) @db.UnsignedBigInt
  created_at               DateTime?          @db.Timestamp(0)
  updated_at               DateTime?          @db.Timestamp(0)
  gympass_id               Int?               @db.UnsignedInt
  entity_id                Int                @db.UnsignedInt
  gympass_class_id         BigInt             @db.UnsignedBigInt
  occur_date               DateTime           @db.Timestamp(0)
  status                   Boolean
  length_in_minutes        Int
  total_capacity           Int
  total_booked             Int
  gympass_product_id       BigInt             @db.UnsignedBigInt
  booking_window_opens_at  DateTime           @db.Timestamp(0)
  booking_window_closes_at DateTime           @db.Timestamp(0)
  virtual                  Boolean
  cancellable_until        DateTime?          @db.Timestamp(0)
  room_id                  Int?               @db.UnsignedInt
  rate                     Float?
  user_id                  Int?               @db.UnsignedInt
  virtual_class_url        String?            @db.Text
  gympass_bookings         gympass_bookings[]
  entities                 entities           @relation(fields: [entity_id], references: [id], onUpdate: Restrict, map: "gympass_slots_entity_id_foreign")
  gympass_classes          gympass_classes    @relation(fields: [gympass_class_id], references: [id], onUpdate: Restrict, map: "gympass_slots_gympass_class_id_foreign")
  gympass_products         gympass_products   @relation(fields: [gympass_product_id], references: [id], onUpdate: Restrict, map: "gympass_slots_gympass_product_id_foreign")
  rooms                    rooms?             @relation(fields: [room_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "gympass_slots_room_id_foreign")
  users                    users?             @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "gympass_slots_user_id_foreign")

  @@index([entity_id], map: "gympass_slots_entity_id_foreign")
  @@index([gympass_class_id], map: "gympass_slots_gympass_class_id_foreign")
  @@index([gympass_product_id], map: "gympass_slots_gympass_product_id_foreign")
  @@index([room_id], map: "gympass_slots_room_id_foreign")
  @@index([user_id], map: "gympass_slots_user_id_foreign")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model health_scores {
  id                                   BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  entity_id                            Int       @db.UnsignedInt
  plan_id                              Int       @db.UnsignedInt
  logged_in_last_days                  Int       @default(0) @db.TinyInt
  registered_evaluations_or_evolutions Int       @default(0) @db.TinyInt
  registered_movements                 Int       @default(0)
  registered_patients                  Int       @default(0)
  registered_attended                  Int       @default(0)
  registered_appointment               Int       @default(0)
  registered_team                      Int       @default(0) @db.TinyInt
  configured_perfil                    Int       @default(0) @db.TinyInt
  registered_services                  Int       @default(0) @db.TinyInt
  registered_agreements                Int       @default(0) @db.TinyInt
  sent_nps_in_last_days                Int       @default(0) @db.TinyInt
  is_zen_fisio_marketing_customer      Int       @default(0) @db.TinyInt
  created_at                           DateTime? @db.Timestamp(0)
  updated_at                           DateTime? @db.Timestamp(0)
  score                                Int       @default(0)
  deleted_at                           DateTime? @db.Timestamp(0)
  pct_score_reduction                  Int?
  entities                             entities  @relation(fields: [entity_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "health_scores_entity_id_foreign")
  plans                                plans     @relation(fields: [plan_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "health_scores_plan_id_foreign")

  @@index([entity_id], map: "health_scores_entity_id_index")
  @@index([plan_id], map: "health_scores_plan_id_index")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model holidays {
  id            BigInt          @id @default(autoincrement()) @db.UnsignedBigInt
  title         String          @db.VarChar(255)
  date          DateTime        @db.Date
  entity_id     Int?            @db.UnsignedInt
  created_at    DateTime?       @db.Timestamp(0)
  updated_at    DateTime?       @db.Timestamp(0)
  deleted_at    DateTime?       @db.Timestamp(0)
  facultative   Boolean         @default(false)
  entities      entities?       @relation(fields: [entity_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "holidays_entity_id_foreign")
  holidays_hide holidays_hide[]

  @@index([entity_id], map: "holidays_entity_id_index")
}

model holidays_hide {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  entity_id  Int       @db.UnsignedInt
  holiday_id BigInt    @db.UnsignedBigInt
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  deleted_at DateTime? @db.Timestamp(0)
  entities   entities  @relation(fields: [entity_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "holidays_hide_entity_id_foreign")
  holidays   holidays  @relation(fields: [holiday_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "holidays_hide_holiday_id_foreign")

  @@index([entity_id], map: "holidays_hide_entity_id_index")
  @@index([holiday_id], map: "holidays_hide_holiday_id_index")
}

model images {
  id                                                    Int                        @id @default(autoincrement()) @db.UnsignedInt
  src                                                   String                     @db.VarChar(255)
  alt                                                   String                     @db.VarChar(255)
  ext                                                   String                     @db.VarChar(255)
  created_at                                            DateTime?                  @db.Timestamp(0)
  updated_at                                            DateTime?                  @db.Timestamp(0)
  entity_id                                             Int?                       @db.UnsignedInt
  already_changed                                       Int                        @db.TinyInt
  download_count                                        Int                        @default(0) @db.UnsignedInt
  description                                           String?                    @db.Text
  user_id                                               Int?                       @db.UnsignedInt
  contact_id                                            Int?                       @db.UnsignedInt
  mkt_type                                              Int?                       @db.TinyInt
  color                                                 String?                    @db.VarChar(255)
  watermark_position                                    String?                    @db.VarChar(255)
  is_free                                               Int?                       @db.TinyInt
  edit_link                                             String?                    @db.VarChar(255)
  edit_type                                             String?                    @db.VarChar(255)
  mkt_profile_id                                        BigInt?                    @db.UnsignedBigInt
  attendance_confirmations                              attendance_confirmations[]
  contacts_contacts_signature_image_idToimages          contacts[]                 @relation("contacts_signature_image_idToimages")
  contacts_contacts_image_idToimages                    contacts[]                 @relation("contacts_image_idToimages")
  entities_entities_image_idToimages                    entities[]                 @relation("entities_image_idToimages")
  evaluations_evaluations_image_left_side_viewToimages  evaluations[]              @relation("evaluations_image_left_side_viewToimages")
  evaluations_evaluations_image_posterior_viewToimages  evaluations[]              @relation("evaluations_image_posterior_viewToimages")
  evaluations_evaluations_image_previous_viewToimages   evaluations[]              @relation("evaluations_image_previous_viewToimages")
  evaluations_evaluations_image_right_side_viewToimages evaluations[]              @relation("evaluations_image_right_side_viewToimages")
  contacts_images_contact_idTocontacts                  contacts?                  @relation("images_contact_idTocontacts", fields: [contact_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "images_contact_id_foreign")
  entities_images_entity_idToentities                   entities?                  @relation("images_entity_idToentities", fields: [entity_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "images_entity_id_foreign")
  mkt_profiles_images_mkt_profile_idTomkt_profiles      mkt_profiles?              @relation("images_mkt_profile_idTomkt_profiles", fields: [mkt_profile_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "images_mkt_profile_id_foreign")
  users                                                 users?                     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "images_user_id_foreign")
  mkt_category_image                                    mkt_category_image[]
  mkt_galleries                                         mkt_galleries[]
  mkt_profiles_mkt_profiles_logo_img_idToimages         mkt_profiles[]             @relation("mkt_profiles_logo_img_idToimages")
  mkt_teams                                             mkt_teams[]
  mkt_watermarks                                        mkt_watermarks[]

  @@index([contact_id], map: "images_contact_id_index")
  @@index([entity_id], map: "images_entity_id_index")
  @@index([mkt_profile_id], map: "images_mkt_profile_id_foreign")
  @@index([user_id], map: "images_user_id_index")
}

model imports {
  id                          Int        @id @default(autoincrement()) @db.UnsignedInt
  created_at                  DateTime?  @db.Timestamp(0)
  updated_at                  DateTime?  @db.Timestamp(0)
  qty_success                 Int        @default(0)
  qty_fail                    Int        @default(0)
  user_id                     Int        @db.UnsignedInt
  entity_id                   Int        @db.UnsignedInt
  csv_id                      Int        @db.UnsignedInt
  log_id                      Int        @db.UnsignedInt
  finished_at                 DateTime?  @db.Timestamp(0)
  deleted_at                  DateTime?  @db.Timestamp(0)
  failed_at                   DateTime?  @db.Timestamp(0)
  contacts                    contacts[]
  files_imports_csv_idTofiles files      @relation("imports_csv_idTofiles", fields: [csv_id], references: [id], map: "imports_csv_id_foreign")
  entities                    entities   @relation(fields: [entity_id], references: [id], map: "imports_entity_id_foreign")
  files_imports_log_idTofiles files      @relation("imports_log_idTofiles", fields: [log_id], references: [id], map: "imports_log_id_foreign")
  users                       users      @relation(fields: [user_id], references: [id], map: "imports_user_id_foreign")

  @@index([csv_id], map: "imports_csv_id_index")
  @@index([entity_id], map: "imports_entity_id_index")
  @@index([log_id], map: "imports_log_id_index")
  @@index([user_id], map: "imports_user_id_index")
}

model indications {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  user_id    Int?      @db.UnsignedInt
  email      String    @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  deleted_at DateTime? @db.Timestamp(0)
  situation  Int       @default(0) @db.TinyInt
  users      users?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "indications_user_id_foreign")

  @@index([user_id], map: "indications_user_id_index")
}

model jobs {
  id           BigInt @id @default(autoincrement()) @db.UnsignedBigInt
  queue        String @db.VarChar(255)
  payload      String @db.LongText
  attempts     Int    @db.UnsignedTinyInt
  reserved_at  Int?   @db.UnsignedInt
  available_at Int    @db.UnsignedInt
  created_at   Int    @db.UnsignedInt

  @@index([queue], map: "jobs_queue_index")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model links {
  id             Int              @id @default(autoincrement()) @db.UnsignedInt
  token          String           @unique(map: "links_token_unique") @db.VarChar(255)
  redirect       String           @db.VarChar(255)
  created_at     DateTime?        @db.Timestamp(0)
  updated_at     DateTime?        @db.Timestamp(0)
  clicks         Int              @default(0)
  whatsapp_links whatsapp_links[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model message_settings {
  id                         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  entity_name                String    @db.VarChar(20)
  reply_to                   String?   @db.VarChar(255)
  phone                      String    @db.VarChar(255)
  site                       String?   @db.VarChar(255)
  entity_id                  Int?      @db.UnsignedInt
  created_at                 DateTime? @db.Timestamp(0)
  updated_at                 DateTime? @db.Timestamp(0)
  address                    String?   @db.VarChar(255)
  confirmation               Int       @default(0) @db.TinyInt
  whatsapp_confirmation      Int       @default(1) @db.TinyInt
  birthday_message           String?   @db.Text
  sms_message                String?   @db.VarChar(255)
  email_message              String?   @db.Text
  whatsapp_message           String?   @db.Text
  finance_whatsapp_message   String?   @db.Text
  patient_appointment_report Int       @default(0) @db.TinyInt
  whatsapp                   String?   @db.VarChar(255)
  whatsapp_short             String?   @unique(map: "message_settings_whatsapp_short_unique") @db.VarChar(255)
  entities                   entities? @relation(fields: [entity_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "message_settings_entity_id_foreign")

  @@index([entity_id], map: "message_settings_entity_id_index")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model messages {
  id                         Int                      @id @default(autoincrement()) @db.UnsignedInt
  reminder_schedule          String?                  @db.VarChar(255)
  status                     Int                      @db.TinyInt
  cellphone                  String?                  @db.VarChar(255)
  whatsapp                   Int                      @default(0) @db.TinyInt
  timezone                   String                   @db.VarChar(255)
  date_time                  DateTime                 @db.DateTime(0)
  message                    String                   @db.LongText
  appointment_id             Int?                     @db.UnsignedInt
  created_at                 DateTime?                @db.Timestamp(0)
  updated_at                 DateTime?                @db.Timestamp(0)
  entity_id                  Int?                     @db.UnsignedInt
  subject                    String?                  @db.VarChar(255)
  template                   String?                  @db.VarChar(255)
  notification_id            Int?                     @db.UnsignedInt
  name                       String?                  @db.VarChar(255)
  email                      String?                  @db.VarChar(255)
  reply_to                   String?                  @db.VarChar(255)
  movement_id                Int?                     @db.UnsignedInt
  deleted_at                 DateTime?                @db.Timestamp(0)
  type                       Int                      @default(0) @db.SmallInt
  opened                     Int?                     @db.TinyInt
  clicked                    Int?                     @db.TinyInt
  mkt_automation_messages_id BigInt?                  @db.UnsignedBigInt
  name_from                  String?                  @db.VarChar(255)
  email_from                 String?                  @db.VarChar(255)
  date_sent                  DateTime?                @db.DateTime(0)
  error_message              String?                  @db.VarChar(255)
  user_id                    Int?                     @db.UnsignedInt
  contact_id                 Int?                     @db.UnsignedInt
  report_information_id      BigInt?                  @db.UnsignedBigInt
  service_user_send          String?                  @db.VarChar(255)
  zapi_id                    String?                  @db.VarChar(255)
  appointments               appointments?            @relation(fields: [appointment_id], references: [id], onDelete: Cascade, map: "messages_appointment_id_foreign")
  contacts                   contacts?                @relation(fields: [contact_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "messages_contact_id_foreign")
  entities                   entities?                @relation(fields: [entity_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "messages_entity_id_foreign")
  mkt_automation_messages    mkt_automation_messages? @relation(fields: [mkt_automation_messages_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "messages_mkt_automation_messages_id_foreign")
  movements                  movements?               @relation(fields: [movement_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "messages_movement_id_foreign")
  notifications              notifications?           @relation(fields: [notification_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "messages_notification_id_foreign")
  report_information         report_information?      @relation(fields: [report_information_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "messages_report_information_id_foreign")
  users                      users?                   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "messages_user_id_foreign")
  received_messages          received_messages[]

  @@index([appointment_id], map: "messages_appointment_id_index")
  @@index([contact_id], map: "messages_contact_id_index")
  @@index([created_at], map: "messages_created_at_index")
  @@index([date_sent], map: "messages_date_sent_index")
  @@index([date_time, entity_id], map: "messages_date_time_entity_id_index")
  @@index([date_time], map: "messages_date_time_index")
  @@index([entity_id], map: "messages_entity_id_index")
  @@index([mkt_automation_messages_id], map: "messages_mkt_automation_messages_id_index")
  @@index([movement_id], map: "messages_movement_id_foreign")
  @@index([notification_id], map: "messages_notification_id_index")
  @@index([report_information_id], map: "messages_report_information_id_foreign")
  @@index([service_user_send], map: "messages_service_user_send_index")
  @@index([status], map: "messages_status_index")
  @@index([type], map: "messages_type_index")
  @@index([updated_at], map: "messages_updated_at_index")
  @@index([user_id], map: "messages_user_id_index")
  @@index([zapi_id], map: "messages_zapi_id_index")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model migrate_cities {
  id                           BigInt              @id @default(autoincrement()) @db.UnsignedBigInt
  name                         String              @db.VarChar(255)
  state                        String              @db.VarChar(255)
  ibge_code                    String              @db.VarChar(255)
  standard                     String              @db.VarChar(255)
  url_article                  String              @db.VarChar(255)
  created_at                   DateTime?           @db.Timestamp(0)
  updated_at                   DateTime?           @db.Timestamp(0)
  synchronous                  String              @default("S") @db.VarChar(255)
  need_user                    Int                 @default(0) @db.TinyInt
  default_series               String?             @db.VarChar(255)
  federal_service_code_default String?             @db.VarChar(255)
  city_service_code_default    String?             @db.VarChar(255)
  nature_operations            nature_operations[]
  nfe_companies                nfe_companies[]
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model migrations {
  migration String @db.VarChar(255)
  batch     Int

  @@ignore
}

model mkt_analytics {
  id             Int           @id @default(autoincrement()) @db.UnsignedInt
  ip             String        @db.VarChar(255)
  mkt_profile_id BigInt?       @db.UnsignedBigInt
  created_at     DateTime?     @db.Timestamp(0)
  updated_at     DateTime?     @db.Timestamp(0)
  mkt_profiles   mkt_profiles? @relation(fields: [mkt_profile_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "mkt_analytics_mkt_profile_id_foreign")

  @@index([mkt_profile_id], map: "mkt_analytics_mkt_profile_id_foreign")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model mkt_automatic_birthday_messages {
  id                BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  active_email      Boolean
  sms_time          DateTime  @db.Time(0)
  sms_template      String    @db.VarChar(255)
  email_time        DateTime  @db.Time(0)
  email_template    String    @db.MediumText
  whatsapp_template String    @db.Text
  entity_id         Int?      @db.UnsignedInt
  created_at        DateTime? @db.Timestamp(0)
  updated_at        DateTime? @db.Timestamp(0)
  active_sms        Int       @db.TinyInt
  entities          entities? @relation(fields: [entity_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "mkt_automatic_birthday_messages_entity_id_foreign")

  @@index([entity_id], map: "mkt_automatic_birthday_messages_entity_id_index")
}

model mkt_automation_messages {
  id                BigInt          @id @default(autoincrement()) @db.UnsignedBigInt
  email_body        String          @db.LongText
  layout            String          @default("layouts.email.app") @db.VarChar(255)
  date              DateTime?       @db.DateTime(0)
  entity_id         Int             @db.UnsignedInt
  mkt_automation_id BigInt          @db.UnsignedBigInt
  mkt_segment_id    BigInt?         @db.UnsignedBigInt
  created_at        DateTime?       @db.Timestamp(0)
  updated_at        DateTime?       @db.Timestamp(0)
  subject           String          @db.VarChar(255)
  mkt_signature_id  BigInt?         @db.UnsignedBigInt
  user_id           Int?            @db.UnsignedInt
  color             String          @default("green") @db.VarChar(255)
  messages          messages[]
  entities          entities        @relation(fields: [entity_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "mkt_automation_messages_entity_id_foreign")
  mkt_automations   mkt_automations @relation(fields: [mkt_automation_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "mkt_automation_messages_mkt_automation_id_foreign")
  mkt_segments      mkt_segments?   @relation(fields: [mkt_segment_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "mkt_automation_messages_mkt_segment_id_foreign")
  mkt_signatures    mkt_signatures? @relation(fields: [mkt_signature_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "mkt_automation_messages_mkt_signature_id_foreign")
  users             users?          @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "mkt_automation_messages_user_id_foreign")

  @@index([entity_id], map: "mkt_automation_messages_entity_id_index")
  @@index([mkt_automation_id], map: "mkt_automation_messages_mkt_automation_id_index")
  @@index([mkt_segment_id], map: "mkt_automation_messages_mkt_segment_id_index")
  @@index([mkt_signature_id], map: "mkt_automation_messages_mkt_signature_id_index")
  @@index([user_id], map: "mkt_automation_messages_user_id_index")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model mkt_automations {
  id                      BigInt                    @id @default(autoincrement()) @db.UnsignedBigInt
  name                    String                    @db.VarChar(255)
  status                  Int                       @default(0) @db.TinyInt
  entity_id               Int                       @db.UnsignedInt
  created_at              DateTime?                 @db.Timestamp(0)
  updated_at              DateTime?                 @db.Timestamp(0)
  mkt_template_id         BigInt?                   @db.UnsignedBigInt
  qty_send                Float                     @default(0)
  qty_clicked             Float                     @default(0)
  qty_opened              Float                     @default(0)
  qty_delivered           Float                     @default(0)
  qty_failed              Float                     @default(0)
  mkt_automation_messages mkt_automation_messages[]
  entities                entities                  @relation(fields: [entity_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "mkt_automations_entity_id_foreign")
  mkt_templates           mkt_templates?            @relation(fields: [mkt_template_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "mkt_automations_mkt_template_id_foreign")

  @@index([entity_id], map: "mkt_automations_entity_id_index")
  @@index([mkt_template_id], map: "mkt_automations_mkt_template_id_index")
}

model mkt_categories {
  id                 BigInt               @id @default(autoincrement()) @db.UnsignedBigInt
  name               String               @db.VarChar(255)
  created_at         DateTime?            @db.Timestamp(0)
  updated_at         DateTime?            @db.Timestamp(0)
  color              String               @default("#4ad897") @db.VarChar(255)
  only_appearance    Int                  @default(0) @db.TinyInt
  mkt_category_image mkt_category_image[]
}

model mkt_category_image {
  id              BigInt         @id @default(autoincrement()) @db.UnsignedBigInt
  mkt_category_id BigInt         @db.UnsignedBigInt
  image_id        Int            @db.UnsignedInt
  created_at      DateTime?      @db.Timestamp(0)
  updated_at      DateTime?      @db.Timestamp(0)
  images          images         @relation(fields: [image_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "mkt_category_image_image_id_foreign")
  mkt_categories  mkt_categories @relation(fields: [mkt_category_id], references: [id], onUpdate: Restrict, map: "mkt_category_image_mkt_category_id_foreign")

  @@index([image_id], map: "mkt_category_image_image_id_index")
  @@index([mkt_category_id], map: "mkt_category_image_mkt_category_id_index")
}

model mkt_galleries {
  id             BigInt       @id @default(autoincrement()) @db.UnsignedBigInt
  mkt_profile_id BigInt       @db.UnsignedBigInt
  image_id       Int?         @db.UnsignedInt
  created_at     DateTime?    @db.Timestamp(0)
  updated_at     DateTime?    @db.Timestamp(0)
  images         images?      @relation(fields: [image_id], references: [id], onUpdate: Restrict, map: "mkt_galleries_image_id_foreign")
  mkt_profiles   mkt_profiles @relation(fields: [mkt_profile_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "mkt_galleries_mkt_profile_id_foreign")

  @@index([image_id], map: "mkt_galleries_image_id_index")
  @@index([mkt_profile_id], map: "mkt_galleries_mkt_profile_id_foreign")
}

model mkt_net_promoter_score_contacts {
  id                        BigInt                  @id @default(autoincrement()) @db.UnsignedBigInt
  mkt_net_promoter_score_id BigInt                  @db.UnsignedBigInt
  contact_id                Int                     @db.UnsignedInt
  link                      String                  @db.VarChar(255)
  result                    Int?
  date_answer               DateTime?               @db.DateTime(0)
  comment                   String?                 @db.Text
  created_at                DateTime?               @db.Timestamp(0)
  updated_at                DateTime?               @db.Timestamp(0)
  contacts                  contacts                @relation(fields: [contact_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "mkt_net_promoter_score_contacts_contact_id_foreign")
  mkt_net_promoter_scores   mkt_net_promoter_scores @relation(fields: [mkt_net_promoter_score_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "mkt_nps_foreign")

  @@index([contact_id], map: "mkt_net_promoter_score_contacts_contact_id_index")
  @@index([mkt_net_promoter_score_id], map: "mkt_nps_foreign")
}

model mkt_net_promoter_scores {
  id                              BigInt                            @id @default(autoincrement()) @db.UnsignedBigInt
  name                            String                            @db.VarChar(255)
  entity_id                       Int                               @db.UnsignedInt
  created_at                      DateTime?                         @db.Timestamp(0)
  updated_at                      DateTime?                         @db.Timestamp(0)
  filters                         String                            @db.Text
  mkt_net_promoter_score_contacts mkt_net_promoter_score_contacts[]
  entities                        entities                          @relation(fields: [entity_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "mkt_net_promoter_scores_entity_id_foreign")

  @@index([entity_id], map: "mkt_net_promoter_scores_entity_id_index")
}

model mkt_online_schedule_config_user {
  id                            BigInt                      @id @default(autoincrement()) @db.UnsignedBigInt
  mkt_online_schedule_config_id BigInt                      @db.UnsignedBigInt
  user_id                       Int?                        @db.UnsignedInt
  created_at                    DateTime?                   @db.Timestamp(0)
  updated_at                    DateTime?                   @db.Timestamp(0)
  mkt_online_schedule_configs   mkt_online_schedule_configs @relation(fields: [mkt_online_schedule_config_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "mkt_on_sch_cf_id")
  users                         users?                      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "mkt_online_schedule_config_user_user_id_foreign")

  @@index([mkt_online_schedule_config_id], map: "mkt_on_sch_cf_id")
  @@index([user_id], map: "mkt_online_schedule_config_user_user_id_index")
}

model mkt_online_schedule_configs {
  id                              BigInt                            @id @default(autoincrement()) @db.UnsignedBigInt
  active                          Int                               @default(0) @db.SmallInt
  mkt_profile_id                  BigInt                            @db.UnsignedBigInt
  created_at                      DateTime?                         @db.Timestamp(0)
  updated_at                      DateTime?                         @db.Timestamp(0)
  send_sms                        Int?                              @db.TinyInt
  mkt_online_schedule_config_user mkt_online_schedule_config_user[]
  mkt_profiles                    mkt_profiles                      @relation(fields: [mkt_profile_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "mkt_online_schedule_configs_mkt_profile_id_foreign")

  @@index([mkt_profile_id], map: "mkt_online_schedule_configs_mkt_profile_id_foreign")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model mkt_online_schedules {
  id             BigInt        @id @default(autoincrement()) @db.UnsignedBigInt
  mkt_profile_id BigInt        @db.UnsignedBigInt
  name           String        @db.VarChar(255)
  email          String        @db.VarChar(255)
  phone_number   String        @db.VarChar(255)
  schedule_time  DateTime      @db.Time(0)
  observation    String?       @db.Text
  status         Int           @default(0) @db.SmallInt
  created_at     DateTime?     @db.Timestamp(0)
  updated_at     DateTime?     @db.Timestamp(0)
  schedule_date  DateTime      @db.Date
  mkt_service_id BigInt?       @db.UnsignedBigInt
  specialty_id   Int?          @db.UnsignedInt
  token          String?       @unique(map: "mkt_online_schedules_token_unique") @db.VarChar(255)
  area           String?       @db.VarChar(255)
  agreement      String?       @db.VarChar(255)
  mkt_profiles   mkt_profiles  @relation(fields: [mkt_profile_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "mkt_online_schedules_mkt_profile_id_foreign")
  mkt_services   mkt_services? @relation(fields: [mkt_service_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "mkt_online_schedules_mkt_service_id_foreign")
  specialties    specialties?  @relation(fields: [specialty_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "mkt_online_schedules_specialty_id_foreign")

  @@index([mkt_profile_id], map: "mkt_online_schedules_mkt_profile_id_foreign")
  @@index([mkt_service_id], map: "mkt_online_schedules_mkt_service_id_foreign")
  @@index([specialty_id], map: "mkt_online_schedules_specialty_id_index")
}

model mkt_profile_agreements {
  id             BigInt       @id @default(autoincrement()) @db.UnsignedBigInt
  mkt_profile_id BigInt       @db.UnsignedBigInt
  agreement_slug String       @db.VarChar(255)
  created_at     DateTime?    @db.Timestamp(0)
  updated_at     DateTime?    @db.Timestamp(0)
  mkt_profiles   mkt_profiles @relation(fields: [mkt_profile_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "mkt_profile_agreements_mkt_profile_id_foreign")

  @@index([mkt_profile_id], map: "mkt_profile_agreements_mkt_profile_id_foreign")
}

model mkt_profile_scores {
  id             BigInt       @id @default(autoincrement()) @db.UnsignedBigInt
  mkt_profile_id BigInt       @db.UnsignedBigInt
  name           String       @db.VarChar(255)
  email          String       @db.VarChar(255)
  comment        String?      @db.Text
  score          Decimal      @db.Decimal(4, 2)
  attendance     Decimal      @db.Decimal(4, 2)
  secretary      Decimal      @db.Decimal(4, 2)
  created_at     DateTime?    @db.Timestamp(0)
  updated_at     DateTime?    @db.Timestamp(0)
  visible_on_web Int          @default(1) @db.TinyInt
  mkt_profiles   mkt_profiles @relation(fields: [mkt_profile_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "mkt_profile_scores_mkt_profile_id_foreign")

  @@index([mkt_profile_id], map: "mkt_profile_scores_mkt_profile_id_foreign")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model mkt_profiles {
  id                                         BigInt                        @id @default(autoincrement()) @db.UnsignedBigInt
  slug                                       String                        @unique(map: "mkt_profiles_slug_unique")
  name                                       String
  address                                    String?
  neighborhood                               String?                       @db.VarChar(255)
  address_number                             String?                       @db.VarChar(255)
  phone                                      String?
  whatsapp                                   String?
  email                                      String?                       @db.VarChar(255)
  description                                String?                       @db.Text
  slogan                                     String?                       @db.VarChar(255)
  city_id                                    Int?                          @db.UnsignedInt
  logo_img_id                                Int?                          @db.UnsignedInt
  background_template                        Int                           @default(1) @db.SmallInt
  latitude                                   Decimal?                      @db.Decimal(10, 8)
  longitude                                  Decimal?                      @db.Decimal(11, 8)
  facebook                                   String?                       @db.VarChar(255)
  twitter                                    String?                       @db.VarChar(255)
  instagram                                  String?                       @db.VarChar(255)
  entity_id                                  Int?                          @db.UnsignedInt
  created_at                                 DateTime?                     @db.Timestamp(0)
  updated_at                                 DateTime?                     @db.Timestamp(0)
  url_domain                                 String?                       @db.VarChar(255)
  complement                                 String?                       @db.VarChar(255)
  site                                       String?                       @db.VarChar(255)
  cep                                        String?                       @db.VarChar(255)
  origin                                     String                        @default("App") @db.VarChar(255)
  show_on_plataform                          Int                           @default(1) @db.SmallInt
  youtube                                    String?                       @db.VarChar(255)
  show_whatsapp_btn                          Int                           @default(0) @db.SmallInt
  schedule_type                              Int                           @default(1) @db.TinyInt
  images_images_mkt_profile_idTomkt_profiles images[]                      @relation("images_mkt_profile_idTomkt_profiles")
  mkt_analytics                              mkt_analytics[]
  mkt_galleries                              mkt_galleries[]
  mkt_online_schedule_configs                mkt_online_schedule_configs[]
  mkt_online_schedules                       mkt_online_schedules[]
  mkt_profile_agreements                     mkt_profile_agreements[]
  mkt_profile_scores                         mkt_profile_scores[]
  cities                                     cities?                       @relation(fields: [city_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "mkt_profiles_city_id_foreign")
  entities                                   entities?                     @relation(fields: [entity_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "mkt_profiles_entity_id_foreign")
  images_mkt_profiles_logo_img_idToimages    images?                       @relation("mkt_profiles_logo_img_idToimages", fields: [logo_img_id], references: [id], onUpdate: Restrict, map: "mkt_profiles_logo_img_id_foreign")
  mkt_schedule_specialties                   mkt_schedule_specialties[]
  mkt_services                               mkt_services[]
  mkt_teams                                  mkt_teams[]

  @@index([city_id], map: "mkt_profiles_city_id_foreign")
  @@index([entity_id], map: "mkt_profiles_entity_id_index")
  @@index([logo_img_id], map: "mkt_profiles_logo_img_id_foreign")
}

model mkt_schedule_specialties {
  id                              Int                               @id @default(autoincrement()) @db.UnsignedInt
  specialty_id                    Int?                              @db.UnsignedInt
  mkt_profile_id                  BigInt                            @db.UnsignedBigInt
  default_duration                Int?
  limit_date                      Int?
  scheduling_days_times           Json?
  created_at                      DateTime?                         @db.Timestamp(0)
  updated_at                      DateTime?                         @db.Timestamp(0)
  advance_time                    Int
  mkt_profiles                    mkt_profiles                      @relation(fields: [mkt_profile_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "mkt_schedule_specialties_mkt_profile_id_foreign")
  specialties                     specialties?                      @relation(fields: [specialty_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "mkt_schedule_specialties_specialty_id_foreign")
  mkt_team_mkt_schedule_specialty mkt_team_mkt_schedule_specialty[]

  @@index([mkt_profile_id], map: "mkt_schedule_specialties_mkt_profile_id_index")
  @@index([specialty_id], map: "mkt_schedule_specialties_specialty_id_index")
}

model mkt_segments {
  id                      BigInt                    @id @default(autoincrement()) @db.UnsignedBigInt
  name                    String                    @db.VarChar(255)
  filters                 Json
  entity_id               Int?                      @db.UnsignedInt
  created_at              DateTime?                 @db.Timestamp(0)
  updated_at              DateTime?                 @db.Timestamp(0)
  deleted_at              DateTime?                 @db.DateTime(0)
  mkt_automation_messages mkt_automation_messages[]
  entities                entities?                 @relation(fields: [entity_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "mkt_segments_entity_id_foreign")
  mkt_segments_hide       mkt_segments_hide[]
  mkt_templates           mkt_templates[]

  @@index([entity_id], map: "mkt_segments_entity_id_index")
}

model mkt_segments_hide {
  id             BigInt       @id @default(autoincrement()) @db.UnsignedBigInt
  entity_id      Int          @db.UnsignedInt
  mkt_segment_id BigInt       @db.UnsignedBigInt
  created_at     DateTime?    @db.Timestamp(0)
  updated_at     DateTime?    @db.Timestamp(0)
  entities       entities     @relation(fields: [entity_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "mkt_segments_hide_entity_id_foreign")
  mkt_segments   mkt_segments @relation(fields: [mkt_segment_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "mkt_segments_hide_mkt_segment_id_foreign")

  @@index([entity_id], map: "mkt_segments_hide_entity_id_index")
  @@index([mkt_segment_id], map: "mkt_segments_hide_mkt_segment_id_index")
}

model mkt_services {
  id                   BigInt                 @id @default(autoincrement()) @db.UnsignedBigInt
  name                 String                 @db.VarChar(255)
  definition           String                 @db.VarChar(255)
  description          String                 @db.Text
  mkt_profile_id       BigInt                 @db.UnsignedBigInt
  created_at           DateTime?              @db.Timestamp(0)
  updated_at           DateTime?              @db.Timestamp(0)
  mkt_online_schedules mkt_online_schedules[]
  mkt_profiles         mkt_profiles           @relation(fields: [mkt_profile_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "mkt_services_mkt_profile_id_foreign")

  @@index([mkt_profile_id], map: "mkt_services_mkt_profile_id_foreign")
}

model mkt_signatures {
  id                      BigInt                    @id @default(autoincrement()) @db.UnsignedBigInt
  created_at              DateTime?                 @db.Timestamp(0)
  updated_at              DateTime?                 @db.Timestamp(0)
  title                   String                    @db.VarChar(255)
  signature               String                    @db.Text
  entity_id               Int                       @db.UnsignedInt
  deleted_at              DateTime?                 @db.DateTime(0)
  mkt_automation_messages mkt_automation_messages[]
  entities                entities                  @relation(fields: [entity_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "mkt_signatures_entity_id_foreign")
  mkt_templates           mkt_templates[]

  @@index([entity_id], map: "mkt_signatures_entity_id_index")
}

model mkt_team_mkt_schedule_specialty {
  id                       BigInt                   @id @default(autoincrement()) @db.UnsignedBigInt
  schedule_specialty_id    Int                      @db.UnsignedInt
  mkt_team_id              BigInt                   @db.UnsignedBigInt
  created_at               DateTime?                @db.Timestamp(0)
  updated_at               DateTime?                @db.Timestamp(0)
  mkt_teams                mkt_teams                @relation(fields: [mkt_team_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "mkt_team_mkt_schedule_specialty_mkt_team_id_foreign")
  mkt_schedule_specialties mkt_schedule_specialties @relation(fields: [schedule_specialty_id], references: [id], onDelete: Cascade, map: "mkt_team_mkt_schedule_specialty_schedule_specialty_id_foreign")

  @@index([mkt_team_id], map: "mkt_team_mkt_schedule_specialty_mkt_team_id_index")
  @@index([schedule_specialty_id], map: "mkt_team_mkt_schedule_specialty_schedule_specialty_id_index")
}

model mkt_team_specialty {
  id           BigInt      @id @default(autoincrement()) @db.UnsignedBigInt
  specialty_id Int         @db.UnsignedInt
  mkt_team_id  BigInt      @db.UnsignedBigInt
  created_at   DateTime?   @db.Timestamp(0)
  updated_at   DateTime?   @db.Timestamp(0)
  mkt_teams    mkt_teams   @relation(fields: [mkt_team_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "mkt_team_specialty_mkt_team_id_foreign")
  specialties  specialties @relation(fields: [specialty_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "mkt_team_specialty_specialty_id_foreign")

  @@index([mkt_team_id], map: "mkt_team_specialty_mkt_team_id_index")
  @@index([specialty_id], map: "mkt_team_specialty_specialty_id_index")
}

model mkt_teams {
  id                              BigInt                            @id @default(autoincrement()) @db.UnsignedBigInt
  name                            String                            @db.VarChar(255)
  description                     String?                           @db.Text
  image_id                        Int?                              @db.UnsignedInt
  area                            String                            @db.VarChar(255)
  mkt_profile_id                  BigInt                            @db.UnsignedBigInt
  created_at                      DateTime?                         @db.Timestamp(0)
  updated_at                      DateTime?                         @db.Timestamp(0)
  contact_id                      Int?                              @db.UnsignedInt
  register                        String?                           @db.VarChar(255)
  deleted_at                      DateTime?                         @db.Timestamp(0)
  mkt_team_mkt_schedule_specialty mkt_team_mkt_schedule_specialty[]
  mkt_team_specialty              mkt_team_specialty[]
  contacts                        contacts?                         @relation(fields: [contact_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "mkt_teams_contact_id_foreign")
  images                          images?                           @relation(fields: [image_id], references: [id], onUpdate: Restrict, map: "mkt_teams_image_id_foreign")
  mkt_profiles                    mkt_profiles                      @relation(fields: [mkt_profile_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "mkt_teams_mkt_profile_id_foreign")

  @@index([contact_id], map: "mkt_teams_contact_id_foreign")
  @@index([image_id], map: "mkt_teams_image_id_index")
  @@index([mkt_profile_id], map: "mkt_teams_mkt_profile_id_foreign")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model mkt_templates {
  id                 BigInt               @id @default(autoincrement()) @db.UnsignedBigInt
  name               String               @db.VarChar(255)
  uses_count         String               @default("0") @db.VarChar(255)
  email_subject      String               @db.VarChar(255)
  email_body         String?              @db.Text
  mkt_segment_id     BigInt?              @db.UnsignedBigInt
  entity_id          Int?                 @db.UnsignedInt
  deleted_at         DateTime?            @db.Timestamp(0)
  created_at         DateTime?            @db.Timestamp(0)
  updated_at         DateTime?            @db.Timestamp(0)
  status             Int                  @default(1) @db.TinyInt
  color              String               @default("green") @db.VarChar(255)
  layout             String               @default("layouts.email.templates.corporative-default") @db.VarChar(50)
  mkt_signature_id   BigInt?              @db.UnsignedBigInt
  is_new             Int                  @default(0) @db.TinyInt
  mkt_automations    mkt_automations[]
  entities           entities?            @relation(fields: [entity_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "mkt_templates_entity_id_foreign")
  mkt_segments       mkt_segments?        @relation(fields: [mkt_segment_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "mkt_templates_mkt_segment_id_foreign")
  mkt_signatures     mkt_signatures?      @relation(fields: [mkt_signature_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "mkt_templates_mkt_signature_id_foreign")
  mkt_templates_hide mkt_templates_hide[]

  @@index([entity_id], map: "mkt_templates_entity_id_index")
  @@index([mkt_segment_id], map: "mkt_templates_mkt_segment_id_index")
  @@index([mkt_signature_id], map: "mkt_templates_mkt_signature_id_index")
}

model mkt_templates_hide {
  id              BigInt        @id @default(autoincrement()) @db.UnsignedBigInt
  entity_id       Int           @db.UnsignedInt
  mkt_template_id BigInt        @db.UnsignedBigInt
  created_at      DateTime?     @db.Timestamp(0)
  updated_at      DateTime?     @db.Timestamp(0)
  entities        entities      @relation(fields: [entity_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "mkt_templates_hide_entity_id_foreign")
  mkt_templates   mkt_templates @relation(fields: [mkt_template_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "mkt_templates_hide_mkt_template_id_foreign")

  @@index([entity_id], map: "mkt_templates_hide_entity_id_index")
  @@index([mkt_template_id], map: "mkt_templates_hide_mkt_template_id_index")
}

model mkt_unsubscribe_email_contacts {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  user_id    Int       @db.UnsignedInt
  contact_id Int       @db.UnsignedInt
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  contacts   contacts  @relation(fields: [contact_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "mkt_unsubscribe_email_contacts_contact_id_foreign")
  users      users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "mkt_unsubscribe_email_contacts_user_id_foreign")

  @@index([contact_id], map: "mkt_unsubscribe_email_contacts_contact_id_index")
  @@index([user_id], map: "mkt_unsubscribe_email_contacts_user_id_index")
}

model mkt_watermarks {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  image_id   Int?      @db.UnsignedInt
  entity_id  Int       @db.UnsignedInt
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  entities   entities  @relation(fields: [entity_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "mkt_watermarks_entity_id_foreign")
  images     images?   @relation(fields: [image_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "mkt_watermarks_image_id_foreign")

  @@index([entity_id], map: "mkt_watermarks_entity_id_foreign")
  @@index([image_id], map: "mkt_watermarks_image_id_foreign")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model module_payment_card {
  id                      BigInt                  @id @default(autoincrement()) @db.UnsignedBigInt
  customer_id             BigInt                  @db.UnsignedBigInt
  card_key                String                  @db.VarChar(50)
  brand                   String                  @db.VarChar(15)
  holder_name             String                  @db.VarChar(100)
  first_digits            String                  @db.VarChar(6)
  last_digits             String                  @db.VarChar(6)
  fingerprint             String                  @db.VarChar(100)
  country                 String                  @db.VarChar(100)
  valid                   Int                     @default(1) @db.TinyInt
  expiration_date         String                  @db.VarChar(10)
  deleted_at              DateTime?               @db.DateTime(0)
  created_at              DateTime?               @db.Timestamp(0)
  updated_at              DateTime?               @db.Timestamp(0)
  billing_data_id         BigInt?                 @db.UnsignedBigInt
  billing_datas           billing_datas?          @relation(fields: [billing_data_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "module_payment_card_billing_data_id_foreign")
  module_payment_customer module_payment_customer @relation(fields: [customer_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "module_payment_card_customer_id_foreign")

  @@index([billing_data_id], map: "module_payment_card_billing_data_id_index")
  @@index([customer_id], map: "module_payment_card_customer_id_index")
}

model module_payment_charge_cycles {
  id                     BigInt                  @id @default(autoincrement()) @db.UnsignedBigInt
  start_at               DateTime                @db.DateTime(0)
  end_at                 DateTime                @db.DateTime(0)
  cycle_id               BigInt?                 @db.UnsignedBigInt
  charge_id              BigInt?                 @db.UnsignedBigInt
  created_at             DateTime?               @db.Timestamp(0)
  updated_at             DateTime?               @db.Timestamp(0)
  cycle_key              String?                 @db.VarChar(255)
  module_payment_charges module_payment_charges? @relation(fields: [charge_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "module_payment_charge_cycles_charge_id_foreign")
  module_payment_cycles  module_payment_cycles?  @relation(fields: [cycle_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "module_payment_charge_cycles_cycle_id_foreign")

  @@index([charge_id], map: "module_payment_charge_cycles_charge_id_index")
  @@index([cycle_id], map: "module_payment_charge_cycles_cycle_id_index")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model module_payment_charges {
  id                            BigInt                          @id @default(autoincrement()) @db.UnsignedBigInt
  charge_key                    String?                         @db.VarChar(255)
  customer_id                   BigInt?                         @db.UnsignedBigInt
  subscription_id               BigInt?                         @db.UnsignedBigInt
  invoice_id                    BigInt?                         @db.UnsignedBigInt
  entity_id                     Int?                            @db.UnsignedInt
  code                          String?                         @db.VarChar(255)
  gateway_id                    String?                         @db.VarChar(255)
  amount                        Float?
  payment_method                String?                         @db.VarChar(255)
  status                        String?                         @db.VarChar(255)
  due_at                        DateTime?                       @db.DateTime(0)
  last_transaction_key          String?                         @db.VarChar(255)
  created_at                    DateTime?                       @db.Timestamp(0)
  updated_at                    DateTime?                       @db.Timestamp(0)
  paid_at                       DateTime?                       @db.DateTime(0)
  paid_amount                   Float?
  description                   String?                         @db.VarChar(255)
  send_at                       DateTime?                       @db.DateTime(0)
  invoices                      Json?
  deleted_at                    DateTime?                       @db.Timestamp(0)
  refunded_value                Float?
  tax                           Float?
  charge_single_generate_nfse   Int                             @default(0) @db.TinyInt
  nfe_detail_id                 BigInt?                         @db.UnsignedBigInt
  module_payment_charge_cycles  module_payment_charge_cycles[]
  module_payment_customer       module_payment_customer?        @relation(fields: [customer_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "module_payment_charges_customer_id_foreign")
  entities                      entities?                       @relation(fields: [entity_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "module_payment_charges_entity_id_foreign")
  module_payment_invoices       module_payment_invoices?        @relation(fields: [invoice_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "module_payment_charges_invoice_id_foreign")
  nfe_details                   nfe_details?                    @relation(fields: [nfe_detail_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "module_payment_charges_nfe_detail_id_foreign")
  module_payment_subscription   module_payment_subscription?    @relation(fields: [subscription_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "module_payment_charges_subscription_id_foreign")
  module_payment_items_invoices module_payment_items_invoices[]
  module_payment_transaction    module_payment_transaction[]

  @@index([customer_id], map: "module_payment_charges_customer_id_index")
  @@index([entity_id], map: "module_payment_charges_entity_id_index")
  @@index([invoice_id], map: "module_payment_charges_invoice_id_index")
  @@index([nfe_detail_id], map: "module_payment_charges_nfe_detail_id_index")
  @@index([subscription_id], map: "module_payment_charges_subscription_id_index")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model module_payment_customer {
  id                                   BigInt                                 @id @default(autoincrement()) @db.UnsignedBigInt
  customer_key                         String?                                @db.VarChar(255)
  entity_id                            Int                                    @db.UnsignedInt
  postback_code_check                  String?                                @db.VarChar(500)
  name                                 String?                                @db.VarChar(200)
  email                                String?                                @db.VarChar(200)
  external_id                          String?                                @db.VarChar(200)
  type                                 String?                                @db.VarChar(20)
  country                              String?                                @db.VarChar(50)
  birthday                             String?                                @db.VarChar(50)
  deleted_at                           DateTime?                              @db.DateTime(0)
  created_at                           DateTime?                              @db.Timestamp(0)
  updated_at                           DateTime?                              @db.Timestamp(0)
  service                              String                                 @db.VarChar(255)
  is_client                            Int                                    @default(0) @db.TinyInt
  schedule_subscription                Int                                    @default(0) @db.TinyInt
  days_ticket_expiration               Int?                                   @db.TinyInt
  start_at                             DateTime?                              @db.DateTime(0)
  dont_send_email_first                Int                                    @default(0) @db.TinyInt
  readjusted_at                        DateTime?                              @db.DateTime(0)
  plan_id                              Int?                                   @db.UnsignedInt
  coupon_id                            BigInt?                                @db.UnsignedBigInt
  mrr                                  Decimal?                               @default(0.00) @db.Decimal(10, 2)
  value                                Decimal?                               @default(0.00) @db.Decimal(10, 2)
  subscription_period                  Int?
  status                               Int?
  plan_name                            String?                                @db.VarChar(255)
  payment_method                       String?                                @db.VarChar(255)
  automatic_nfse                       Int                                    @default(0) @db.TinyInt
  block_ticket                         Int                                    @default(0) @db.TinyInt
  billing_datas                        billing_datas[]
  customer_subscription_adjustments    customer_subscription_adjustments[]
  module_payment_card                  module_payment_card[]
  module_payment_charges               module_payment_charges[]
  coupons                              coupons?                               @relation(fields: [coupon_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "module_payment_customer_coupon_id_foreign")
  entities                             entities                               @relation(fields: [entity_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "module_payment_customer_entity_id_foreign")
  plans                                plans?                                 @relation(fields: [plan_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "module_payment_customer_plan_id_foreign")
  module_payment_cycles                module_payment_cycles[]
  module_payment_discounts             module_payment_discounts[]
  module_payment_increments            module_payment_increments[]
  module_payment_invoices              module_payment_invoices[]
  module_payment_items_invoices        module_payment_items_invoices[]
  module_payment_subscription          module_payment_subscription[]
  module_payment_transaction           module_payment_transaction[]
  nfe_details                          nfe_details[]
  payment_intermediation_anticipations payment_intermediation_anticipations[]
  payment_intermediation_banks         payment_intermediation_banks[]
  payment_intermediation_movements     payment_intermediation_movements[]
  payment_intermediation_receivers     payment_intermediation_receivers[]
  payment_intermediation_transfers     payment_intermediation_transfers[]

  @@index([coupon_id], map: "module_payment_customer_coupon_id_index")
  @@index([customer_key], map: "module_payment_customer_customer_key_index")
  @@index([entity_id], map: "module_payment_customer_entity_id_index")
  @@index([plan_id], map: "module_payment_customer_plan_id_index")
}

model module_payment_cycles {
  id                                                                                             BigInt                          @id @default(autoincrement()) @db.UnsignedBigInt
  cycle_key                                                                                      String?                         @db.VarChar(255)
  customer_id                                                                                    BigInt?                         @db.UnsignedBigInt
  subscription_id                                                                                BigInt?                         @db.UnsignedBigInt
  entity_id                                                                                      Int?                            @db.UnsignedInt
  status                                                                                         String?                         @db.VarChar(255)
  cycle                                                                                          Int?
  duration                                                                                       Int?
  start_at                                                                                       DateTime?                       @db.DateTime(0)
  end_at                                                                                         DateTime?                       @db.DateTime(0)
  billing_at                                                                                     DateTime?                       @db.DateTime(0)
  created_at                                                                                     DateTime?                       @db.Timestamp(0)
  updated_at                                                                                     DateTime?                       @db.Timestamp(0)
  module_payment_charge_cycles                                                                   module_payment_charge_cycles[]
  module_payment_customer                                                                        module_payment_customer?        @relation(fields: [customer_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "module_payment_cycles_customer_id_foreign")
  entities                                                                                       entities?                       @relation(fields: [entity_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "module_payment_cycles_entity_id_foreign")
  module_payment_subscription_module_payment_cycles_subscription_idTomodule_payment_subscription module_payment_subscription?    @relation("module_payment_cycles_subscription_idTomodule_payment_subscription", fields: [subscription_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "module_payment_cycles_subscription_id_foreign")
  module_payment_invoices                                                                        module_payment_invoices[]
  module_payment_items_invoices                                                                  module_payment_items_invoices[]
  module_payment_subscription_module_payment_subscription_cycle_idTomodule_payment_cycles        module_payment_subscription[]   @relation("module_payment_subscription_cycle_idTomodule_payment_cycles")

  @@index([customer_id], map: "module_payment_cycles_customer_id_index")
  @@index([entity_id], map: "module_payment_cycles_entity_id_index")
  @@index([subscription_id], map: "module_payment_cycles_subscription_id_index")
}

model module_payment_discounts {
  id                            BigInt                          @id @default(autoincrement()) @db.UnsignedBigInt
  entity_id                     Int                             @db.UnsignedInt
  customer_id                   BigInt                          @db.UnsignedBigInt
  subscription_id               BigInt?                         @db.UnsignedBigInt
  value                         Float
  discount_type                 String                          @db.VarChar(255)
  description                   String                          @db.Text
  created_at                    DateTime?                       @db.Timestamp(0)
  updated_at                    DateTime?                       @db.Timestamp(0)
  discount_key                  String?                         @db.VarChar(255)
  cycles                        Int?
  deleted_at                    DateTime?                       @db.Timestamp(0)
  module_payment_customer       module_payment_customer         @relation(fields: [customer_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "module_payment_discounts_customer_id_foreign")
  entities                      entities                        @relation(fields: [entity_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "module_payment_discounts_entity_id_foreign")
  module_payment_subscription   module_payment_subscription?    @relation(fields: [subscription_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "module_payment_discounts_subscription_id_foreign")
  module_payment_items_invoices module_payment_items_invoices[]

  @@index([customer_id], map: "module_payment_discounts_customer_id_index")
  @@index([entity_id], map: "module_payment_discounts_entity_id_index")
  @@index([subscription_id], map: "module_payment_discounts_subscription_id_index")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model module_payment_increments {
  id                            BigInt                          @id @default(autoincrement()) @db.UnsignedBigInt
  entity_id                     Int                             @db.UnsignedInt
  customer_id                   BigInt                          @db.UnsignedBigInt
  subscription_id               BigInt?                         @db.UnsignedBigInt
  value                         Float
  increment_type                String                          @db.VarChar(255)
  description                   String                          @db.Text
  created_at                    DateTime?                       @db.Timestamp(0)
  updated_at                    DateTime?                       @db.Timestamp(0)
  increment_key                 String?                         @db.VarChar(255)
  cycles                        Int?
  type                          String?                         @db.VarChar(255)
  module_payment_customer       module_payment_customer         @relation(fields: [customer_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "module_payment_increments_customer_id_foreign")
  entities                      entities                        @relation(fields: [entity_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "module_payment_increments_entity_id_foreign")
  module_payment_subscription   module_payment_subscription?    @relation(fields: [subscription_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "module_payment_increments_subscription_id_foreign")
  module_payment_items_invoices module_payment_items_invoices[]

  @@index([customer_id], map: "module_payment_increments_customer_id_index")
  @@index([entity_id], map: "module_payment_increments_entity_id_index")
  @@index([subscription_id], map: "module_payment_increments_subscription_id_index")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model module_payment_invoices {
  id                            BigInt                          @id @default(autoincrement()) @db.UnsignedBigInt
  invoice_key                   String?                         @db.VarChar(255)
  customer_id                   BigInt?                         @db.UnsignedBigInt
  subscription_id               BigInt?                         @db.UnsignedBigInt
  entity_id                     Int?                            @db.UnsignedInt
  amount                        Float
  status                        String?                         @db.VarChar(255)
  payment_method                String?                         @db.VarChar(255)
  code                          String?                         @db.VarChar(255)
  due_at                        DateTime?                       @db.DateTime(0)
  billing_at                    DateTime?                       @db.DateTime(0)
  seen_at                       DateTime?                       @db.DateTime(0)
  canceled_at                   DateTime?                       @db.DateTime(0)
  installments                  Int?
  total_discount                Float?
  total_increment               Float?
  created_at                    DateTime?                       @db.Timestamp(0)
  updated_at                    DateTime?                       @db.Timestamp(0)
  cycle_id                      BigInt?                         @db.UnsignedBigInt
  cycle_start_at                DateTime?                       @db.DateTime(0)
  cycle_end_at                  DateTime?                       @db.DateTime(0)
  module_payment_charges        module_payment_charges[]
  module_payment_customer       module_payment_customer?        @relation(fields: [customer_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "module_payment_invoices_customer_id_foreign")
  module_payment_cycles         module_payment_cycles?          @relation(fields: [cycle_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "module_payment_invoices_cycle_id_foreign")
  entities                      entities?                       @relation(fields: [entity_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "module_payment_invoices_entity_id_foreign")
  module_payment_subscription   module_payment_subscription?    @relation(fields: [subscription_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "module_payment_invoices_subscription_id_foreign")
  module_payment_items_invoices module_payment_items_invoices[]

  @@index([customer_id], map: "module_payment_invoices_customer_id_index")
  @@index([cycle_id], map: "module_payment_invoices_cycle_id_index")
  @@index([entity_id], map: "module_payment_invoices_entity_id_index")
  @@index([subscription_id], map: "module_payment_invoices_subscription_id_index")
}

model module_payment_items_invoices {
  id                                BigInt                             @id @default(autoincrement()) @db.UnsignedBigInt
  invoice_id                        BigInt                             @db.UnsignedBigInt
  item_id                           BigInt?                            @db.UnsignedBigInt
  discount_id                       BigInt?                            @db.UnsignedBigInt
  increment_id                      BigInt?                            @db.UnsignedBigInt
  cycle_id                          BigInt?                            @db.UnsignedBigInt
  customer_id                       BigInt?                            @db.UnsignedBigInt
  subscription_id                   BigInt?                            @db.UnsignedBigInt
  entity_id                         Int?                               @db.UnsignedInt
  charge_id                         BigInt?                            @db.UnsignedBigInt
  created_at                        DateTime?                          @db.Timestamp(0)
  updated_at                        DateTime?                          @db.Timestamp(0)
  module_payment_charges            module_payment_charges?            @relation(fields: [charge_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "module_payment_items_invoices_charge_id_foreign")
  module_payment_customer           module_payment_customer?           @relation(fields: [customer_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "module_payment_items_invoices_customer_id_foreign")
  module_payment_cycles             module_payment_cycles?             @relation(fields: [cycle_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "module_payment_items_invoices_cycle_id_foreign")
  module_payment_discounts          module_payment_discounts?          @relation(fields: [discount_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "module_payment_items_invoices_discount_id_foreign")
  entities                          entities?                          @relation(fields: [entity_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "module_payment_items_invoices_entity_id_foreign")
  module_payment_increments         module_payment_increments?         @relation(fields: [increment_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "module_payment_items_invoices_increment_id_foreign")
  module_payment_invoices           module_payment_invoices            @relation(fields: [invoice_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "module_payment_items_invoices_invoice_id_foreign")
  module_payment_subscription_items module_payment_subscription_items? @relation(fields: [item_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "module_payment_items_invoices_item_id_foreign")
  module_payment_subscription       module_payment_subscription?       @relation(fields: [subscription_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "module_payment_items_invoices_subscription_id_foreign")

  @@index([charge_id], map: "module_payment_items_invoices_charge_id_index")
  @@index([customer_id], map: "module_payment_items_invoices_customer_id_index")
  @@index([cycle_id], map: "module_payment_items_invoices_cycle_id_index")
  @@index([discount_id], map: "module_payment_items_invoices_discount_id_index")
  @@index([entity_id], map: "module_payment_items_invoices_entity_id_index")
  @@index([increment_id], map: "module_payment_items_invoices_increment_id_index")
  @@index([invoice_id], map: "module_payment_items_invoices_invoice_id_index")
  @@index([item_id], map: "module_payment_items_invoices_item_id_index")
  @@index([subscription_id], map: "module_payment_items_invoices_subscription_id_index")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model module_payment_logs {
  id          BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  entity_id   Int       @db.UnsignedInt
  title       String    @db.VarChar(255)
  description String    @db.Text
  type        Int
  deleted_at  DateTime? @db.DateTime(0)
  created_at  DateTime? @db.Timestamp(0)
  updated_at  DateTime? @db.Timestamp(0)

  @@index([entity_id], map: "module_payment_logs_entity_id_index")
  @@index([title], map: "module_payment_logs_title_index")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model module_payment_object {
  id                          BigInt                        @id @default(autoincrement()) @db.UnsignedBigInt
  type                        String                        @db.VarChar(255)
  object                      String                        @db.MediumText
  deleted_at                  DateTime?                     @db.DateTime(0)
  created_at                  DateTime?                     @db.Timestamp(0)
  updated_at                  DateTime?                     @db.Timestamp(0)
  title                       String?                       @db.VarChar(150)
  entity_id                   Int?
  module_payment_subscription module_payment_subscription[]
  module_payment_transaction  module_payment_transaction[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model module_payment_subscription {
  id                                                                                       BigInt                              @id @default(autoincrement()) @db.UnsignedBigInt
  subscription_key                                                                         String?                             @db.VarChar(255)
  entity_id                                                                                Int                                 @db.UnsignedInt
  customer_id                                                                              BigInt                              @db.UnsignedBigInt
  object_id                                                                                BigInt?                             @db.UnsignedBigInt
  postback_url                                                                             String                              @db.VarChar(500)
  payment_method                                                                           String                              @db.VarChar(255)
  current_period_start                                                                     DateTime                            @db.DateTime(0)
  current_period_end                                                                       DateTime                            @db.DateTime(0)
  card_brand                                                                               String?                             @db.VarChar(255)
  card_last_digits                                                                         String?                             @db.VarChar(255)
  charges                                                                                  Int?
  status                                                                                   String?                             @db.VarChar(255)
  settled_charges                                                                          Int?
  manage_token                                                                             String?                             @db.VarChar(255)
  manage_url                                                                               String?                             @db.VarChar(255)
  deleted_at                                                                               DateTime?                           @db.DateTime(0)
  created_at                                                                               DateTime?                           @db.Timestamp(0)
  updated_at                                                                               DateTime?                           @db.Timestamp(0)
  cicly_key                                                                                String?                             @db.VarChar(255)
  total_value                                                                              Float?                              @default(0)
  last_value                                                                               Float?                              @default(0)
  cycle_id                                                                                 BigInt?                             @db.UnsignedBigInt
  statement_descriptor                                                                     String?                             @db.VarChar(255)
  installments                                                                             Int                                 @default(1) @db.TinyInt
  module_payment_charges                                                                   module_payment_charges[]
  module_payment_cycles_module_payment_cycles_subscription_idTomodule_payment_subscription module_payment_cycles[]             @relation("module_payment_cycles_subscription_idTomodule_payment_subscription")
  module_payment_discounts                                                                 module_payment_discounts[]
  module_payment_increments                                                                module_payment_increments[]
  module_payment_invoices                                                                  module_payment_invoices[]
  module_payment_items_invoices                                                            module_payment_items_invoices[]
  module_payment_customer                                                                  module_payment_customer             @relation(fields: [customer_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "module_payment_subscription_customer_id_foreign")
  module_payment_cycles_module_payment_subscription_cycle_idTomodule_payment_cycles        module_payment_cycles?              @relation("module_payment_subscription_cycle_idTomodule_payment_cycles", fields: [cycle_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "module_payment_subscription_cycle_id_foreign")
  entities                                                                                 entities                            @relation(fields: [entity_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "module_payment_subscription_entity_id_foreign")
  module_payment_object                                                                    module_payment_object?              @relation(fields: [object_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "module_payment_subscription_object_id_foreign")
  module_payment_subscription_items                                                        module_payment_subscription_items[]
  module_payment_transaction                                                               module_payment_transaction[]

  @@index([customer_id], map: "module_payment_subscription_customer_id_index")
  @@index([cycle_id], map: "module_payment_subscription_cycle_id_index")
  @@index([entity_id], map: "module_payment_subscription_entity_id_index")
  @@index([object_id], map: "module_payment_subscription_object_id_index")
  @@index([subscription_key], map: "module_payment_subscription_subscription_key_index")
}

model module_payment_subscription_items {
  id                                BigInt                              @id @default(autoincrement()) @db.UnsignedBigInt
  item_key                          String                              @db.VarChar(255)
  description                       String?                             @db.VarChar(150)
  name                              String?                             @db.VarChar(150)
  quantity                          Int?
  price                             Float?
  created_at                        DateTime?                           @db.Timestamp(0)
  updated_at                        DateTime?                           @db.Timestamp(0)
  deleted_at                        DateTime?                           @db.Timestamp(0)
  subscription_id                   BigInt?                             @db.UnsignedBigInt
  is_plan                           Int                                 @default(0) @db.TinyInt
  customer_subscription_adjustments customer_subscription_adjustments[]
  module_payment_items_invoices     module_payment_items_invoices[]
  module_payment_subscription       module_payment_subscription?        @relation(fields: [subscription_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "module_payment_subscription_items_subscription_id_foreign")

  @@index([subscription_id], map: "module_payment_subscription_items_subscription_id_index")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model module_payment_transaction {
  id                          BigInt                       @id @default(autoincrement()) @db.UnsignedBigInt
  transaction_key             String?                      @db.VarChar(255)
  entity_id                   Int                          @db.UnsignedInt
  customer_id                 BigInt                       @db.UnsignedBigInt
  object_id                   BigInt?                      @db.UnsignedBigInt
  subscription_id             BigInt?                      @db.UnsignedBigInt
  status                      String?                      @db.VarChar(50)
  refuse_reason               String?                      @db.VarChar(50)
  status_reason               String?                      @db.VarChar(50)
  acquirer_name               String?                      @db.VarChar(50)
  acquirer_id                 String?                      @db.VarChar(200)
  acquirer_response_code      String?                      @db.VarChar(50)
  authorization_code          String?                      @db.VarChar(50)
  soft_descriptor             String?                      @db.VarChar(13)
  tid                         String?                      @db.VarChar(255)
  nsu                         String?                      @db.VarChar(255)
  amount                      Float?
  authorized_amount           Int?
  paid_amount                 Int?
  refunded_amount             Int?
  installments                Int?
  cost                        Float?
  card_holder_name            String?                      @db.VarChar(100)
  card_last_digits            String?                      @db.VarChar(4)
  card_first_digits           String?                      @db.VarChar(6)
  card_brand                  String?                      @db.VarChar(20)
  card_pin_mode               String?                      @db.VarChar(50)
  postback_url                String?                      @db.VarChar(500)
  payment_method              String?                      @db.VarChar(50)
  capture_method              String?                      @db.VarChar(50)
  antifraud_score             String?                      @db.VarChar(50)
  boleto_url                  String?                      @db.Text
  boleto_barcode              String?                      @db.VarChar(100)
  boleto_expiration_date      DateTime?                    @db.DateTime(0)
  referer                     String?                      @db.VarChar(50)
  ip                          String?                      @db.VarChar(40)
  reference_key               String?                      @db.VarChar(200)
  deleted_at                  DateTime?                    @db.DateTime(0)
  created_at                  DateTime?                    @db.Timestamp(0)
  updated_at                  DateTime?                    @db.Timestamp(0)
  is_pro_rata                 Int                          @default(0) @db.TinyInt
  has_first_advice            Boolean                      @default(false)
  has_second_advice           Boolean                      @default(false)
  charge_id                   BigInt?                      @db.UnsignedBigInt
  module_payment_charges      module_payment_charges?      @relation(fields: [charge_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "module_payment_transaction_charge_id_foreign")
  module_payment_customer     module_payment_customer      @relation(fields: [customer_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "module_payment_transaction_customer_id_foreign")
  module_payment_object       module_payment_object?       @relation(fields: [object_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "module_payment_transaction_object_id_foreign")
  module_payment_subscription module_payment_subscription? @relation(fields: [subscription_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "module_payment_transaction_subscription_id_foreign")

  @@index([charge_id], map: "module_payment_transaction_charge_id_index")
  @@index([customer_id], map: "module_payment_transaction_customer_id_index")
  @@index([entity_id], map: "module_payment_transaction_entity_id_index")
  @@index([object_id], map: "module_payment_transaction_object_id_index")
  @@index([subscription_id], map: "module_payment_transaction_subscription_id_index")
  @@index([transaction_key], map: "module_payment_transaction_transaction_key_index")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model movements {
  id                                                   Int                                @id @default(autoincrement()) @db.UnsignedInt
  description                                          String                             @db.VarChar(255)
  value                                                Decimal                            @db.Decimal(10, 2)
  financialCategoryId                                Int?                                @db.UnsignedInt @map("financial_category_id")
  accountId                                           Int                                @db.UnsignedInt @map("account_id")
  dateMaturity                                        DateTime                           @db.Date @map("date_maturity")
  dateCompetency                                      DateTime?                          @db.Date @map("date_competency")
  datePayment                                         DateTime?                          @db.Date @map("date_payment")
  paymentMethods                                      String?                            @db.VarChar(255) @map("payment_methods")
  userId                                              Int?                               @db.UnsignedInt @map("user_id")
  procedureId                                         Int?                               @db.UnsignedInt @map("procedure_id")
  contactId                                           Int?                               @db.UnsignedInt @map("contact_id")
  entityId                                            Int?                               @db.UnsignedInt @map("entity_id")
  additional                                           String?                            @db.Text
  type                                                 Int                                @db.TinyInt
  creditType                                          Int?                               @db.TinyInt @map("credit_type")
  createdAt                                           DateTime?                          @db.Timestamp(0) @map("created_at")
  updatedAt                                           DateTime?                          @db.Timestamp(0) @map("updated_at")
  appointmentId                                       Int?                               @db.UnsignedInt @map("appointment_id")
  information                                          String?                            @db.Text
  agreementId                                         Int?                               @db.UnsignedInt @map("agreement_id")
  owner                                                Int?                               @db.UnsignedInt
  movementId                                          Int?                               @db.UnsignedInt @map("movement_id")
  fileId                                              Int?                               @db.UnsignedInt @map("file_id")
  costCenterId                                       Int?                               @db.UnsignedInt @map("cost_center_id")
  deletedAt                                           DateTime?                          @db.Timestamp(0) @map("deleted_at")
  isDeleted                                           Boolean                            @default(false) @map("is_deleted")
  token                                                String?                            @db.VarChar(255)
  appointmentPackageToken                            String?                            @db.VarChar(255) @map("appointment_package_token")
  recurrenceEntryToken                               String?                            @db.VarChar(255) @map("recurrence_entry_token")
  recurrenceToken                                     String?                            @db.VarChar(255) @map("recurrence_token")
  recurrenceType                                      Int?                               @db.TinyInt @map("recurrence_type")
  nfeGenerated                                        Int?                               @db.TinyInt @map("nfe_generated")
  taxMovementId                                      Int?                               @db.UnsignedInt @map("tax_movement_id")
  paymentMethodId                                    BigInt?                            @db.UnsignedBigInt @map("payment_method_id")
  taxType                                             Int                                @default(0) @map("tax_type")
  taxValue                                            Float                              @default(0) @map("tax_value")
  totalTaxes                                          Float                              @default(0) @map("total_taxes")
  financialCategoryType                              String?                            @db.VarChar(255) @map("financial_category_type")
  partialPayment                                      Decimal?                           @db.Decimal(10, 2) @map("partial_payment")
  groupToken                                          String?                            @db.VarChar(255) @map("group_token")
  packageRenewalToken                                String?                            @db.VarChar(255) @map("package_renewal_token")
  startPeriodRenewal                                 DateTime?                          @db.Date @map("start_period_renewal")
  file_movement                                        file_movement[]                    @ignore
  files_files_movement_idTomovements                   files[]                            @relation("files_movement_idTomovements")
  messages                                             messages[]
  accounts                                             accounts?                           @relation(fields: [accountId], references: [id], onUpdate: Restrict, map: "movements_account_id_foreign")
  agreements                                           agreements?                        @relation(fields: [agreementId], references: [id], onDelete: Restrict, map: "movements_agreement_id_foreign")
  appointments                                         appointments?                      @relation(fields: [appointmentId], references: [id], onDelete: Cascade, map: "movements_appointment_id_foreign")
  cost_centers                                         cost_centers?                      @relation(fields: [costCenterId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "movements_cost_center_id_foreign")
  entities                                             entities?                          @relation(fields: [entityId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "movements_entity_id_foreign")
  files_movements_file_idTofiles                       files?                             @relation("movements_file_idTofiles", fields: [fileId], references: [id], map: "movements_file_id_foreign")
  financial_categories                                 financial_categories?               @relation(fields: [financialCategoryId], references: [id], onUpdate: Restrict, map: "movements_financial_category_id_foreign")
  movements_movements_movement_idTomovements           movements?                         @relation("movements_movement_idTomovements", fields: [movementId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "movements_movement_id_foreign")
  other_movements_movements_movement_idTomovements     movements[]                        @relation("movements_movement_idTomovements")
  users_movements_ownerTousers                         users?                             @relation("movements_ownerTousers", fields: [owner], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "movements_owner_foreign")
  contacts                                             contacts?                          @relation(fields: [contactId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "movements_patient_id_foreign")
  payment_methods_relation                             payment_methods?                   @relation(fields: [paymentMethodId], references: [id], onUpdate: Restrict, map: "movements_payment_method_id_foreign")
  procedures                                           procedures?                        @relation(fields: [procedureId], references: [id], onUpdate: Restrict, map: "movements_procedure_id_foreign")
  movements_movements_tax_movement_idTomovements       movements?                         @relation("movements_tax_movement_idTomovements", fields: [taxMovementId], references: [id], onUpdate: Restrict, map: "movements_tax_movement_id_foreign")
  other_movements_movements_tax_movement_idTomovements movements[]                        @relation("movements_tax_movement_idTomovements")
  users_movements_user_idTousers                       users?                             @relation("movements_user_idTousers", fields: [userId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "movements_user_id_foreign")
  nfe_details                                          nfe_details[]
  payment_intermediation_movements                     payment_intermediation_movements[]

  @@index([accountId], map: "movements_account_id_index")
  @@index([agreementId], map: "movements_agreement_id_index")
  @@index([appointmentId, datePayment], map: "movements_appointment_id_date_payment_index")
  @@index([appointmentId], map: "movements_appointment_id_index")
  @@index([appointmentPackageToken], map: "movements_appointment_package_token_index")
  @@index([costCenterId], map: "movements_cost_center_id_index")
  @@index([createdAt], map: "movements_created_at_index")
  @@index([dateCompetency, entityId], map: "movements_date_competency_entity_id_index")
  @@index([dateCompetency], map: "movements_date_competency_index")
  @@index([dateMaturity, entityId], map: "movements_date_maturity_entity_id_index")
  @@index([dateMaturity], map: "movements_date_maturity_index")
  @@index([datePayment, dateMaturity], map: "movements_date_payment_date_maturity_index")
  @@index([datePayment, entityId], map: "movements_date_payment_entity_id_index")
  @@index([datePayment], map: "movements_date_payment_index")
  @@index([datePayment, type], map: "movements_date_payment_type_index")
  @@index([entityId], map: "movements_entity_id_index")
  @@index([fileId], map: "movements_file_id_index")
  @@index([financialCategoryId], map: "movements_financial_category_id_index")
  @@index([financialCategoryType], map: "movements_financial_category_type_index")
  @@index([groupToken], map: "movements_group_token_index")
  @@index([isDeleted, entityId], map: "movements_is_deleted_entity_id_index")
  @@index([isDeleted], map: "movements_is_deleted_index")
  @@index([movementId], map: "movements_movement_id_index")
  @@index([owner], map: "movements_owner_index")
  @@index([packageRenewalToken], map: "movements_package_renewal_token_index")
  @@index([contactId], map: "movements_patient_id_index")
  @@index([paymentMethodId], map: "movements_payment_method_id_index")
  @@index([procedureId], map: "movements_procedure_id_index")
  @@index([recurrenceToken], map: "movements_recurrence_token_index")
  @@index([recurrenceType], map: "movements_recurrence_type_index")
  @@index([startPeriodRenewal], map: "movements_start_period_renewal_index")
  @@index([taxMovementId], map: "movements_tax_movement_id_index")
  @@index([token], map: "movements_token_index")
  @@index([type], map: "movements_type_index")
  @@index([updatedAt], map: "movements_updated_at_index")
  @@index([userId], map: "movements_user_id_index")
  @@index([value], map: "movements_value_index")
}

model nature_operations {
  id              BigInt         @id @default(autoincrement()) @db.UnsignedBigInt
  invoicy_code    Int            @db.TinyInt
  description     String         @db.VarChar(255)
  migrate_city_id BigInt         @db.UnsignedBigInt
  created_at      DateTime?      @db.Timestamp(0)
  updated_at      DateTime?      @db.Timestamp(0)
  migrate_cities  migrate_cities @relation(fields: [migrate_city_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "nature_operations_migrate_city_id_foreign")
  nfe_details     nfe_details[]

  @@index([migrate_city_id], map: "nature_operations_migrate_city_id_index")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model nfe_companies {
  id                      BigInt                  @id @default(autoincrement()) @db.UnsignedBigInt
  entity_id               Int                     @db.UnsignedInt
  city_id                 Int                     @db.UnsignedInt
  service                 String                  @default("nfe.io") @db.VarChar(255)
  created_at              DateTime?               @db.Timestamp(0)
  updated_at              DateTime?               @db.Timestamp(0)
  city_service_code       String?                 @db.VarChar(255)
  federal_service_code    String                  @db.VarChar(255)
  nfe_id                  String                  @db.VarChar(255)
  email                   String                  @db.VarChar(255)
  cnpj                    String                  @db.VarChar(255)
  file_id                 Int?                    @db.UnsignedInt
  password_certificate    String                  @db.VarChar(255)
  municipal_registration  String                  @db.VarChar(255)
  simple_national         Int                     @default(0) @db.TinyInt
  cultural_incentive      Int                     @default(0) @db.TinyInt
  migrate_city_id         BigInt                  @db.UnsignedBigInt
  series                  String?                 @db.VarChar(255)
  special_taxation_regime Int?                    @db.TinyInt
  user_prefecture         String?                 @db.VarChar(255)
  password_prefecture     String?                 @db.VarChar(255)
  primary_key             String?                 @db.VarChar(255)
  send_nfse_by_email      Int                     @default(0) @db.TinyInt
  default_aliquot_cofins  Decimal?                @db.Decimal(10, 2)
  default_aliquot_pis     Decimal?                @db.Decimal(10, 2)
  default_aliquot_csll    Decimal?                @db.Decimal(10, 2)
  default_aliquot_ir      Decimal?                @db.Decimal(10, 2)
  default_aliquot_inss    Decimal?                @db.Decimal(10, 2)
  city_service_codes      city_service_codes[]
  company_cnae            company_cnae[]
  federal_service_codes   federal_service_codes[]
  cities                  cities                  @relation(fields: [city_id], references: [id], onUpdate: Restrict, map: "nfe_companies_city_id_foreign")
  entities                entities                @relation(fields: [entity_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "nfe_companies_entity_id_foreign")
  files                   files?                  @relation(fields: [file_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "nfe_companies_file_id_foreign")
  migrate_cities          migrate_cities          @relation(fields: [migrate_city_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "nfe_companies_migrate_city_id_foreign")
  nfe_details             nfe_details[]
  nfe_files               nfe_files[]

  @@index([city_id], map: "nfe_companies_city_id_index")
  @@index([cultural_incentive], map: "nfe_companies_cultural_incentive_index")
  @@index([entity_id], map: "nfe_companies_entity_id_index")
  @@index([file_id], map: "nfe_companies_file_id_index")
  @@index([migrate_city_id], map: "nfe_companies_migrate_city_id_index")
  @@index([simple_national], map: "nfe_companies_simple_national_index")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model nfe_details {
  id                      BigInt                   @id @default(autoincrement()) @db.UnsignedBigInt
  description             String                   @db.VarChar(255)
  value                   String                   @db.VarChar(255)
  entity_id               Int                      @db.UnsignedInt
  user_id                 Int                      @db.UnsignedInt
  city_id                 Int                      @db.UnsignedInt
  contact_id              Int?                     @db.UnsignedInt
  movement_id             Int?                     @db.UnsignedInt
  created_at              DateTime?                @db.Timestamp(0)
  updated_at              DateTime?                @db.Timestamp(0)
  nfe_company_id          BigInt                   @db.UnsignedBigInt
  cnae_id                 BigInt                   @db.UnsignedBigInt
  nfe_id                  String                   @db.VarChar(255)
  status                  String?                  @db.VarChar(255)
  number                  Int?
  serie                   String?                  @db.VarChar(255)
  aliquot_iss             String?                  @db.VarChar(255)
  conditional_discount    String?                  @db.VarChar(255)
  nature_operation_id     BigInt?                  @db.UnsignedBigInt
  iss_withheld            Int                      @default(2) @db.TinyInt
  nfse_number             String?                  @db.VarChar(255)
  reason_code             String?                  @db.VarChar(255)
  reason_description      String?                  @db.VarChar(255)
  deleted_at              DateTime?                @db.Timestamp(0)
  iss                     Decimal?                 @db.Decimal(10, 2)
  nfse_url                String?                  @db.Text
  customer_id             BigInt?                  @db.UnsignedBigInt
  federal_service_code_id BigInt?                  @db.UnsignedBigInt
  inss                    Decimal?                 @db.Decimal(10, 2)
  cofins                  Decimal?                 @db.Decimal(10, 2)
  pis                     Decimal?                 @db.Decimal(10, 2)
  csll                    Decimal?                 @db.Decimal(10, 2)
  ir                      Decimal?                 @db.Decimal(10, 2)
  aliquot_cofins          Decimal?                 @db.Decimal(10, 2)
  aliquot_pis             Decimal?                 @db.Decimal(10, 2)
  aliquot_csll            Decimal?                 @db.Decimal(10, 2)
  aliquot_ir              Decimal?                 @db.Decimal(10, 2)
  aliquot_inss            Decimal?                 @db.Decimal(10, 2)
  value_liquid            Decimal?                 @db.Decimal(10, 2)
  city_service_code_id    BigInt?                  @db.UnsignedBigInt
  module_payment_charges  module_payment_charges[]
  cities                  cities                   @relation(fields: [city_id], references: [id], onUpdate: Restrict, map: "nfe_details_city_id_foreign")
  city_service_codes      city_service_codes?      @relation(fields: [city_service_code_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "nfe_details_city_service_code_id_foreign")
  cnaes                   cnaes                    @relation(fields: [cnae_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "nfe_details_cnae_id_foreign")
  contacts                contacts?                @relation(fields: [contact_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "nfe_details_contact_id_foreign")
  module_payment_customer module_payment_customer? @relation(fields: [customer_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "nfe_details_customer_id_foreign")
  entities                entities                 @relation(fields: [entity_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "nfe_details_entity_id_foreign")
  federal_service_codes   federal_service_codes?   @relation(fields: [federal_service_code_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "nfe_details_federal_service_code_id_foreign")
  movements               movements?               @relation(fields: [movement_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "nfe_details_movement_id_foreign")
  nature_operations       nature_operations?       @relation(fields: [nature_operation_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "nfe_details_nature_operation_id_foreign")
  nfe_companies           nfe_companies            @relation(fields: [nfe_company_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "nfe_details_nfe_company_id_foreign")
  users                   users                    @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "nfe_details_user_id_foreign")
  nfe_files               nfe_files[]
  nfe_rejection           nfe_rejection[]

  @@index([city_id], map: "nfe_details_city_id_index")
  @@index([city_service_code_id], map: "nfe_details_city_service_code_id_index")
  @@index([cnae_id], map: "nfe_details_cnae_id_index")
  @@index([contact_id], map: "nfe_details_contact_id_foreign")
  @@index([customer_id], map: "nfe_details_customer_id_index")
  @@index([entity_id], map: "nfe_details_entity_id_index")
  @@index([federal_service_code_id], map: "nfe_details_federal_service_code_id_index")
  @@index([iss_withheld], map: "nfe_details_iss_withheld_index")
  @@index([movement_id], map: "nfe_details_movement_id_index")
  @@index([nature_operation_id], map: "nfe_details_nature_operation_id_index")
  @@index([nfe_company_id], map: "nfe_details_nfe_company_id_index")
  @@index([user_id], map: "nfe_details_user_id_index")
}

model nfe_files {
  id             BigInt        @id @default(autoincrement()) @db.UnsignedBigInt
  name           String        @db.VarChar(255)
  ext            String        @db.VarChar(255)
  description    String        @db.Text
  entity_id      Int           @db.UnsignedInt
  user_id        Int           @db.UnsignedInt
  contact_id     Int?          @db.UnsignedInt
  nfe_company_id BigInt        @db.UnsignedBigInt
  nfe_detail_id  BigInt        @db.UnsignedBigInt
  created_at     DateTime?     @db.Timestamp(0)
  updated_at     DateTime?     @db.Timestamp(0)
  contacts       contacts?     @relation(fields: [contact_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "nfe_files_contact_id_foreign")
  entities       entities      @relation(fields: [entity_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "nfe_files_entity_id_foreign")
  nfe_companies  nfe_companies @relation(fields: [nfe_company_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "nfe_files_nfe_company_id_foreign")
  nfe_details    nfe_details   @relation(fields: [nfe_detail_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "nfe_files_nfe_detail_id_foreign")
  users          users         @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "nfe_files_user_id_foreign")

  @@index([contact_id], map: "nfe_files_contact_id_foreign")
  @@index([entity_id], map: "nfe_files_entity_id_index")
  @@index([nfe_company_id], map: "nfe_files_nfe_company_id_index")
  @@index([nfe_detail_id], map: "nfe_files_nfe_detail_id_index")
  @@index([user_id], map: "nfe_files_user_id_index")
}

model nfe_rejection {
  id                 BigInt       @id @default(autoincrement()) @db.UnsignedBigInt
  nfe_detail_id      BigInt?      @db.UnsignedBigInt
  reason_code        String       @db.VarChar(255)
  reason_description String       @db.VarChar(255)
  created_at         DateTime?    @db.Timestamp(0)
  updated_at         DateTime?    @db.Timestamp(0)
  nfe_details        nfe_details? @relation(fields: [nfe_detail_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "nfe_rejection_nfe_detail_id_foreign")

  @@index([nfe_detail_id], map: "nfe_rejection_nfe_detail_id_index")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model notification_user {
  notification_id Int?           @db.UnsignedInt
  user_id         Int?           @db.UnsignedInt
  status          Int            @default(0) @db.TinyInt
  timezone        String         @db.VarChar(255)
  deleted_at      DateTime?      @db.Timestamp(0)
  notifications   notifications? @relation(fields: [notification_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "notification_user_notification_id_foreign")
  users           users?         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "notification_user_user_id_foreign")

  @@index([notification_id], map: "notification_user_notification_id_index")
  @@index([user_id], map: "notification_user_user_id_index")
  @@ignore
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model notifications {
  id                          Int                           @id @default(autoincrement()) @db.UnsignedInt
  user_id                     Int?                          @db.UnsignedInt
  entity_id                   Int                           @db.UnsignedInt
  message                     String                        @db.Text
  html                        String?                       @db.Text
  type                        Int                           @default(0) @db.TinyInt
  date_time                   DateTime                      @default(now()) @db.DateTime(0)
  created_at                  DateTime?                     @db.Timestamp(0)
  updated_at                  DateTime?                     @db.Timestamp(0)
  appointment_package_contact appointment_package_contact[]
  messages                    messages[]
  notification_user           notification_user[]           @ignore
  entities                    entities                      @relation(fields: [entity_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "notifications_entity_id_foreign")
  users                       users?                        @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "notifications_user_id_foreign")

  @@index([entity_id], map: "notifications_entity_id_index")
  @@index([user_id], map: "notifications_user_id_index")
}

model nps {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  user_id    Int       @db.UnsignedInt
  score      Int       @db.TinyInt
  text       String?   @db.VarChar(255)
  ip_address String    @db.VarChar(255)
  origin_url String    @db.VarChar(255)
  voted_at   DateTime  @default(dbgenerated("'0000-00-00 00:00:00'")) @db.Timestamp(0)
  users      users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "nps_user_id_foreign")

  @@index([user_id], map: "nps_user_id_index")
}

model oauth_access_tokens {
  id         String    @id @db.VarChar(100)
  user_id    BigInt?
  client_id  Int       @db.UnsignedInt
  name       String?   @db.VarChar(255)
  scopes     String?   @db.Text
  revoked    Boolean
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  expires_at DateTime? @db.DateTime(0)

  @@index([user_id], map: "oauth_access_tokens_user_id_index")
}

model oauth_auth_codes {
  id         String    @id @db.VarChar(100)
  user_id    BigInt
  client_id  Int       @db.UnsignedInt
  scopes     String?   @db.Text
  revoked    Boolean
  expires_at DateTime? @db.DateTime(0)
}

model oauth_clients {
  id                     Int       @id @default(autoincrement()) @db.UnsignedInt
  user_id                BigInt?
  name                   String    @db.VarChar(255)
  secret                 String    @db.VarChar(100)
  redirect               String    @db.Text
  personal_access_client Boolean
  password_client        Boolean
  revoked                Boolean
  created_at             DateTime? @db.Timestamp(0)
  updated_at             DateTime? @db.Timestamp(0)

  @@index([user_id], map: "oauth_clients_user_id_index")
}

model oauth_personal_access_clients {
  id         Int       @id @default(autoincrement()) @db.UnsignedInt
  client_id  Int       @db.UnsignedInt
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)

  @@index([client_id], map: "oauth_personal_access_clients_client_id_index")
}

model oauth_refresh_tokens {
  id              String    @id @db.VarChar(100)
  access_token_id String    @db.VarChar(100)
  revoked         Boolean
  expires_at      DateTime? @db.DateTime(0)

  @@index([access_token_id], map: "oauth_refresh_tokens_access_token_id_index")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model options {
  id         Int       @id @default(autoincrement()) @db.UnsignedInt
  name       String    @db.Text
  order      Int?
  field_id   Int       @db.UnsignedInt
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  fields     fields    @relation(fields: [field_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "options_field_id_foreign")

  @@index([field_id], map: "options_field_id_index")
}

model owner_appointments {
  user_id        Int          @db.UnsignedInt
  appointment_id Int          @db.UnsignedInt
  appointments   appointments @relation(fields: [appointment_id], references: [id], onDelete: Cascade, map: "owner_appointments_appointment_id_foreign")
  users          users        @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "owner_appointments_user_id_foreign")

  @@id([user_id, appointment_id])
  @@index([appointment_id], map: "owner_appointments_appointment_id_foreign")
}

model partners {
  id                    Int        @id @default(autoincrement()) @db.UnsignedInt
  name                  String     @db.VarChar(255)
  coupon                String     @db.VarChar(255)
  trial_days            Int
  discount_percentage   Int
  commission_percentage Int
  council_id            Int?       @db.UnsignedInt
  created_at            DateTime?  @db.Timestamp(0)
  updated_at            DateTime?  @db.Timestamp(0)
  entities              entities[]
  councils              councils?  @relation(fields: [council_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "partners_council_id_foreign")
  users                 users[]

  @@index([council_id], map: "partners_council_id_index")
}

model password_histories {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  password   String    @db.VarChar(255)
  user_id    Int       @db.UnsignedInt
  users      users     @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "password_histories_user_id_foreign")

  @@unique([user_id, password], map: "user_unique_password")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model password_resets {
  email      String   @db.VarChar(255)
  token      String   @db.VarChar(255)
  created_at DateTime @default(now()) @db.Timestamp(0)

  @@index([email], map: "password_resets_email_index")
  @@index([token], map: "password_resets_token_index")
  @@ignore
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model payment_intermediation_anticipations {
  id                               BigInt                            @id @default(autoincrement()) @db.UnsignedBigInt
  customer_id                      BigInt?                           @db.UnsignedBigInt
  entity_id                        Int                               @db.UnsignedInt
  receiver_id                      BigInt?                           @db.UnsignedBigInt
  anticipation_key                 String                            @db.VarChar(255)
  build                            Int                               @default(1) @db.TinyInt
  automatic_transfer               Int                               @default(0) @db.TinyInt
  status                           String                            @db.VarChar(255)
  timeframe                        String                            @db.VarChar(255)
  amount                           Float                             @default(0)
  anticipation_fee                 Float                             @default(0)
  payment_date                     DateTime                          @db.Timestamp(0)
  created_at                       DateTime?                         @db.Timestamp(0)
  updated_at                       DateTime?                         @db.Timestamp(0)
  module_payment_customer          module_payment_customer?          @relation(fields: [customer_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "payment_intermediation_anticipations_customer_id_foreign")
  entities                         entities                          @relation(fields: [entity_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "payment_intermediation_anticipations_entity_id_foreign")
  payment_intermediation_receivers payment_intermediation_receivers? @relation(fields: [receiver_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "payment_intermediation_anticipations_receiver_id_foreign")

  @@index([customer_id], map: "payment_intermediation_anticipations_customer_id_index")
  @@index([entity_id], map: "payment_intermediation_anticipations_entity_id_index")
  @@index([receiver_id], map: "payment_intermediation_anticipations_receiver_id_index")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model payment_intermediation_balance_histories {
  id                               BigInt                           @id @default(autoincrement()) @db.UnsignedBigInt
  available_amount                 Decimal                          @db.Decimal(10, 2)
  transferred_amount               Decimal                          @db.Decimal(10, 2)
  waiting_funds_amount             Decimal                          @db.Decimal(10, 2)
  tax_pix                          Decimal                          @db.Decimal(10, 2)
  tax_ticket                       Decimal                          @db.Decimal(10, 2)
  tax_credit_card_default          Decimal                          @db.Decimal(10, 2)
  tax_credit_card_lower            Decimal                          @db.Decimal(10, 2)
  tax_credit_card_higher           Decimal                          @db.Decimal(10, 2)
  min_amount_transfer              Decimal                          @db.Decimal(10, 2)
  receiver_id                      BigInt                           @db.UnsignedBigInt
  rate_range_id                    BigInt                           @db.UnsignedBigInt
  created_at                       DateTime?                        @db.Timestamp(0)
  updated_at                       DateTime?                        @db.Timestamp(0)
  rate_ranges                      rate_ranges                      @relation(fields: [rate_range_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "payment_intermediation_balance_histories_rate_range_id_foreign")
  payment_intermediation_receivers payment_intermediation_receivers @relation(fields: [receiver_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "payment_intermediation_balance_histories_receiver_id_foreign")

  @@index([rate_range_id], map: "payment_intermediation_balance_histories_rate_range_id_index")
  @@index([receiver_id], map: "payment_intermediation_balance_histories_receiver_id_index")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model payment_intermediation_banks {
  id                                          BigInt                                        @id @default(autoincrement()) @db.UnsignedBigInt
  bank_key                                    String?                                       @db.VarChar(255)
  bank                                        String                                        @db.VarChar(255)
  holder_name                                 String                                        @db.VarChar(255)
  holder_document                             String                                        @db.VarChar(255)
  account_number                              String                                        @db.VarChar(255)
  account_check_digit                         String                                        @db.VarChar(255)
  branch_number                               String                                        @db.VarChar(255)
  branch_check_digit                          String                                        @db.VarChar(255)
  type                                        String                                        @db.VarChar(255)
  entity_id                                   Int                                           @db.UnsignedInt
  customer_id                                 BigInt?                                       @db.UnsignedBigInt
  receiver_id                                 BigInt                                        @db.UnsignedBigInt
  created_at                                  DateTime?                                     @db.Timestamp(0)
  updated_at                                  DateTime?                                     @db.Timestamp(0)
  bank_active                                 Int                                           @default(0) @db.TinyInt
  module_payment_customer                     module_payment_customer?                      @relation(fields: [customer_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "payment_intermediation_banks_customer_id_foreign")
  entities                                    entities                                      @relation(fields: [entity_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "payment_intermediation_banks_entity_id_foreign")
  payment_intermediation_receivers            payment_intermediation_receivers              @relation(fields: [receiver_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "payment_intermediation_banks_receiver_id_foreign")
  payment_intermediation_movements            payment_intermediation_movements[]
  payment_intermediation_request_active_banks payment_intermediation_request_active_banks[]
  payment_intermediation_transfers            payment_intermediation_transfers[]

  @@index([customer_id], map: "payment_intermediation_banks_customer_id_index")
  @@index([entity_id], map: "payment_intermediation_banks_entity_id_index")
  @@index([receiver_id], map: "payment_intermediation_banks_receiver_id_index")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model payment_intermediation_movements {
  id                                     BigInt                             @id @default(autoincrement()) @db.UnsignedBigInt
  order_key                              String?                            @db.VarChar(255)
  charge_key                             String?                            @db.VarChar(255)
  transaction_key                        String?                            @db.VarChar(255)
  transfer_key                           String                             @db.VarChar(255)
  customer_id                            BigInt?                            @db.UnsignedBigInt
  entity_id                              Int                                @db.UnsignedInt
  receiver_id                            BigInt?                            @db.UnsignedBigInt
  contact_id                             Int?                               @db.UnsignedInt
  movement_id                            Int?                               @db.UnsignedInt
  type                                   Int                                @default(1) @db.TinyInt
  name                                   String                             @db.VarChar(255)
  email                                  String                             @db.VarChar(255)
  document                               String                             @db.VarChar(255)
  phone                                  String                             @db.VarChar(255)
  amount                                 Float
  tax                                    Float
  tax_processing                         Float                              @default(0)
  take_rate                              Decimal                            @default(0.00) @db.Decimal(10, 2)
  payment_method                         String?                            @db.VarChar(255)
  status                                 String                             @db.VarChar(255)
  due_at                                 DateTime?                          @db.DateTime(0)
  last_transaction_key                   String?                            @db.VarChar(255)
  paid_at                                DateTime?                          @db.DateTime(0)
  paid_amount                            Float?
  description                            String?                            @db.VarChar(255)
  url_boleto                             String?                            @db.VarChar(255)
  created_at                             DateTime?                          @db.Timestamp(0)
  updated_at                             DateTime?                          @db.Timestamp(0)
  token                                  String                             @unique(map: "payment_intermediation_movements_token_unique") @db.VarChar(255)
  acquirer_name                          String?                            @db.VarChar(255)
  acquirer_message                       String?                            @db.VarChar(255)
  acquirer_return_code                   String?                            @db.VarChar(255)
  barcode_number                         String?                            @db.VarChar(255)
  selected_payments_methods              Json?
  return_id                              BigInt?                            @db.UnsignedBigInt
  funding_estimated_date                 DateTime?                          @db.DateTime(0)
  bank_id                                BigInt?                            @db.UnsignedBigInt
  pm_movement_id                         BigInt?                            @db.UnsignedBigInt
  link_validity_at                       DateTime?                          @db.DateTime(0)
  refunded_value                         Float?                             @default(0)
  allow_installment                      Int                                @default(0) @db.TinyInt
  installments                           Int                                @default(1) @db.TinyInt
  current_installment                    Int?                               @db.TinyInt
  installment_token                      String                             @db.VarChar(255)
  max_installments                       Int                                @default(1) @db.TinyInt
  deleted_at                             DateTime?                          @db.Timestamp(0)
  brand                                  String?                            @db.VarChar(255)
  owner                                  Int?                               @db.UnsignedInt
  disable_link_at                        DateTime?                          @db.Timestamp(0)
  recurrence_token                       String?                            @db.VarChar(255)
  frequency_type                         String?                            @db.VarChar(255)
  recurrence                             Int?                               @db.TinyInt
  recurrence_at                          DateTime?                          @db.Timestamp(0)
  send_link                              Int?                               @db.TinyInt
  date_issue                             DateTime?                          @db.Date
  payment_intermediation_banks           payment_intermediation_banks?      @relation(fields: [bank_id], references: [id], onUpdate: Restrict, map: "payment_intermediation_movements_bank_id_foreign")
  contacts                               contacts?                          @relation(fields: [contact_id], references: [id], onUpdate: Restrict, map: "payment_intermediation_movements_contact_id_foreign")
  module_payment_customer                module_payment_customer?           @relation(fields: [customer_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "payment_intermediation_movements_customer_id_foreign")
  entities                               entities                           @relation(fields: [entity_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "payment_intermediation_movements_entity_id_foreign")
  movements                              movements?                         @relation(fields: [movement_id], references: [id], onUpdate: Restrict, map: "payment_intermediation_movements_movement_id_foreign")
  users                                  users?                             @relation(fields: [owner], references: [id], onUpdate: Restrict, map: "payment_intermediation_movements_owner_foreign")
  payment_intermediation_movements       payment_intermediation_movements?  @relation("payment_intermediation_movementsTopayment_intermediation_movements", fields: [pm_movement_id], references: [id], onUpdate: Restrict, map: "payment_intermediation_movements_pm_movement_id_foreign")
  other_payment_intermediation_movements payment_intermediation_movements[] @relation("payment_intermediation_movementsTopayment_intermediation_movements")
  payment_intermediation_receivers       payment_intermediation_receivers?  @relation(fields: [receiver_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "payment_intermediation_movements_receiver_id_foreign")
  payment_intermediation_returns         payment_intermediation_returns?    @relation(fields: [return_id], references: [id], onUpdate: Restrict, map: "payment_intermediation_movements_return_id_foreign")
  payment_intermediation_payables        payment_intermediation_payables[]

  @@index([bank_id], map: "payment_intermediation_movements_bank_id_index")
  @@index([contact_id], map: "payment_intermediation_movements_contact_id_index")
  @@index([customer_id], map: "payment_intermediation_movements_customer_id_index")
  @@index([entity_id], map: "payment_intermediation_movements_entity_id_index")
  @@index([movement_id], map: "payment_intermediation_movements_movement_id_index")
  @@index([owner], map: "payment_intermediation_movements_owner_index")
  @@index([pm_movement_id], map: "payment_intermediation_movements_pm_movement_id_index")
  @@index([receiver_id], map: "payment_intermediation_movements_receiver_id_index")
  @@index([return_id], map: "payment_intermediation_movements_return_id_index")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model payment_intermediation_payables {
  id                               BigInt                            @id @default(autoincrement()) @db.UnsignedBigInt
  receiver_id                      BigInt                            @db.UnsignedBigInt
  pm_movement_id                   BigInt?                           @db.UnsignedBigInt
  payable_key                      String                            @db.VarChar(255)
  status                           String                            @db.VarChar(255)
  amount                           String                            @db.VarChar(255)
  tax                              String                            @default("0") @db.VarChar(255)
  take_rate                        String                            @default("0") @db.VarChar(255)
  anticipation_tax                 String                            @default("0") @db.VarChar(255)
  fraud_coverage_tax               String                            @default("0") @db.VarChar(255)
  installment                      String?                           @db.VarChar(255)
  transaction_key                  String?                           @db.VarChar(255)
  anticipation_key                 String?                           @db.VarChar(255)
  payment_at                       DateTime?                         @db.Timestamp(0)
  original_payment_at              DateTime?                         @db.Timestamp(0)
  type                             String                            @db.VarChar(255)
  payment_method                   String                            @db.VarChar(255)
  accrual_date                     DateTime?                         @db.Timestamp(0)
  date_created                     DateTime?                         @db.Timestamp(0)
  created_at                       DateTime?                         @db.Timestamp(0)
  updated_at                       DateTime?                         @db.Timestamp(0)
  charge_key                       String?                           @db.VarChar(255)
  split_key                        String?                           @db.VarChar(255)
  receiver_key                     String?                           @db.VarChar(255)
  payment_intermediation_movements payment_intermediation_movements? @relation(fields: [pm_movement_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "payment_intermediation_payables_pm_movement_id_foreign")
  payment_intermediation_receivers payment_intermediation_receivers  @relation(fields: [receiver_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "payment_intermediation_payables_receiver_id_foreign")

  @@index([pm_movement_id], map: "payment_intermediation_payables_pm_movement_id_index")
  @@index([receiver_id], map: "payment_intermediation_payables_receiver_id_index")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model payment_intermediation_receivers {
  id                                       BigInt                                     @id @default(autoincrement()) @db.UnsignedBigInt
  receiver_key                             String?                                    @db.VarChar(255)
  name                                     String                                     @db.VarChar(255)
  email                                    String                                     @db.VarChar(255)
  document                                 String                                     @db.VarChar(255)
  description                              String?                                    @db.VarChar(255)
  transfer_enabled                         Int                                        @db.TinyInt
  transfer_day                             String                                     @db.VarChar(255)
  transfer_interval                        String                                     @db.VarChar(255)
  min_amount_transfer                      Decimal                                    @default(350.00) @db.Decimal(10, 2)
  entity_id                                Int                                        @db.UnsignedInt
  customer_id                              BigInt?                                    @db.UnsignedBigInt
  active                                   Int                                        @db.TinyInt
  created_at                               DateTime?                                  @db.Timestamp(0)
  updated_at                               DateTime?                                  @db.Timestamp(0)
  status                                   String                                     @db.VarChar(255)
  tax_ticket                               Decimal                                    @db.Decimal(10, 2)
  tax_card                                 Json
  tax_pix                                  Decimal                                    @db.Decimal(10, 2)
  statement_descriptor                     String?                                    @db.VarChar(255)
  payment_methods                          Json?
  charge_from_movement                     Int                                        @default(0) @db.TinyInt
  display_movement_details                 Int                                        @default(0) @db.TinyInt
  allow_installment                        Int                                        @default(0) @db.TinyInt
  qty_allowed_installments                 Int                                        @default(1) @db.TinyInt
  days_to_expiration                       Int                                        @default(3) @db.TinyInt
  rate_range_id                            BigInt?                                    @db.UnsignedBigInt
  rate_updated_at                          DateTime                                   @db.DateTime(0)
  default_payment_methods                  Json?
  automatic_anticipation                   String                                     @default("0") @db.VarChar(255)
  anticipation_type                        String                                     @default("full") @db.VarChar(255)
  anticipation_volume                      Float                                      @default(0)
  anticipation_delay                       Int                                        @default(365)
  authorization_to_anticipate              Int                                        @default(0) @db.TinyInt
  limit_transfer                           Decimal                                    @default(200000.00) @db.Decimal(10, 2)
  limit_anticipation                       Decimal                                    @default(0.00) @db.Decimal(10, 2)
  payment_intermediation_anticipations     payment_intermediation_anticipations[]
  payment_intermediation_balance_histories payment_intermediation_balance_histories[]
  payment_intermediation_banks             payment_intermediation_banks[]
  payment_intermediation_movements         payment_intermediation_movements[]
  payment_intermediation_payables          payment_intermediation_payables[]
  module_payment_customer                  module_payment_customer?                   @relation(fields: [customer_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "payment_intermediation_receivers_customer_id_foreign")
  entities                                 entities                                   @relation(fields: [entity_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "payment_intermediation_receivers_entity_id_foreign")
  rate_ranges                              rate_ranges?                               @relation(fields: [rate_range_id], references: [id], onUpdate: Restrict, map: "payment_intermediation_receivers_rate_range_id_foreign")
  payment_intermediation_transfers         payment_intermediation_transfers[]

  @@index([customer_id], map: "payment_intermediation_receivers_customer_id_index")
  @@index([entity_id], map: "payment_intermediation_receivers_entity_id_index")
  @@index([rate_range_id], map: "payment_intermediation_receivers_rate_range_id_index")
}

model payment_intermediation_request_active_banks {
  id                           BigInt                        @id @default(autoincrement()) @db.UnsignedBigInt
  bank_id                      BigInt?                       @db.UnsignedBigInt
  status                       String                        @default("0") @db.VarChar(255)
  created_at                   DateTime?                     @db.Timestamp(0)
  updated_at                   DateTime?                     @db.Timestamp(0)
  payment_intermediation_banks payment_intermediation_banks? @relation(fields: [bank_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "payment_intermediation_request_active_banks_bank_id_foreign")

  @@index([bank_id], map: "payment_intermediation_request_active_banks_bank_id_index")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model payment_intermediation_returns {
  id                               BigInt                             @id @default(autoincrement()) @db.UnsignedBigInt
  entity_id                        Int?                               @db.UnsignedInt
  type                             String                             @db.VarChar(255)
  request                          String                             @db.MediumText
  return                           String                             @db.MediumText
  last_return                      String                             @db.MediumText
  deleted_at                       DateTime?                          @db.DateTime(0)
  created_at                       DateTime?                          @db.Timestamp(0)
  updated_at                       DateTime?                          @db.Timestamp(0)
  payment_intermediation_movements payment_intermediation_movements[]
  entities                         entities?                          @relation(fields: [entity_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "payment_intermediation_returns_entity_id_foreign")

  @@index([entity_id], map: "payment_intermediation_returns_entity_id_index")
}

model payment_intermediation_settings {
  id                      BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  tax_pix                 Decimal   @db.Decimal(10, 2)
  tax_ticket              Decimal   @db.Decimal(10, 2)
  tax_credit_card_default Decimal   @db.Decimal(10, 2)
  tax_credit_card_lower   Decimal   @db.Decimal(10, 2)
  tax_credit_card_higher  Decimal   @db.Decimal(10, 2)
  tax_transfer            Decimal   @db.Decimal(10, 2)
  tax_processing          Decimal   @db.Decimal(10, 2)
  min_amount_transfer     Decimal   @db.Decimal(10, 2)
  min_amount_anticipation Decimal   @db.Decimal(10, 2)
  created_at              DateTime? @db.Timestamp(0)
  updated_at              DateTime? @db.Timestamp(0)
}

model payment_intermediation_transfers {
  id                               BigInt                            @id @default(autoincrement()) @db.UnsignedBigInt
  transfer_key                     String?                           @db.VarChar(255)
  amount                           Float
  status                           String                            @db.VarChar(255)
  customer_id                      BigInt?                           @db.UnsignedBigInt
  entity_id                        Int                               @db.UnsignedInt
  receiver_id                      BigInt?                           @db.UnsignedBigInt
  bank_id                          BigInt?                           @db.UnsignedBigInt
  created_at                       DateTime?                         @db.Timestamp(0)
  updated_at                       DateTime?                         @db.Timestamp(0)
  payment_intermediation_banks     payment_intermediation_banks?     @relation(fields: [bank_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "payment_intermediation_transfers_bank_id_foreign")
  module_payment_customer          module_payment_customer?          @relation(fields: [customer_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "payment_intermediation_transfers_customer_id_foreign")
  entities                         entities                          @relation(fields: [entity_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "payment_intermediation_transfers_entity_id_foreign")
  payment_intermediation_receivers payment_intermediation_receivers? @relation(fields: [receiver_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "payment_intermediation_transfers_receiver_id_foreign")

  @@index([bank_id], map: "payment_intermediation_transfers_bank_id_index")
  @@index([customer_id], map: "payment_intermediation_transfers_customer_id_index")
  @@index([entity_id], map: "payment_intermediation_transfers_entity_id_index")
  @@index([receiver_id], map: "payment_intermediation_transfers_receiver_id_index")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model payment_methods {
  id                          BigInt                        @id @default(autoincrement()) @db.UnsignedBigInt
  name                        String                        @db.VarChar(100)
  entity_id                   Int?                          @db.UnsignedInt
  brand_type                  Int?
  payment_type                Int
  receiving_days              Int                           @default(0)
  comission_type              Int                           @default(1)
  installment_number          Int                           @default(0)
  tax_type                    Int                           @default(0)
  min_tax                     Float                         @default(0)
  min_tax_value               Float?
  tax_configuration           Int                           @default(1)
  taxes                       String?                       @db.Text
  created_at                  DateTime?                     @db.Timestamp(0)
  updated_at                  DateTime?                     @db.Timestamp(0)
  deleted_at                  DateTime?                     @db.Timestamp(0)
  receiving_type              Int                           @default(1)
  appointment_package_contact appointment_package_contact[]
  movements                   movements[]
  entities                    entities?                     @relation(fields: [entity_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "payment_methods_entity_id_foreign")

  @@index([entity_id], map: "payment_methods_entity_id_index")
}

model permission_role {
  permission_id Int         @db.UnsignedInt
  role_id       Int         @db.UnsignedInt
  permissions   permissions @relation(fields: [permission_id], references: [id], onDelete: Cascade, map: "permission_role_permission_id_foreign")
  roles         roles       @relation(fields: [role_id], references: [id], onDelete: Cascade, map: "permission_role_role_id_foreign")

  @@id([permission_id, role_id])
  @@index([role_id], map: "permission_role_role_id_foreign")
}

model permissions {
  id              Int               @id @default(autoincrement()) @db.UnsignedInt
  name            String            @unique(map: "permissions_name_unique") @db.VarChar(255)
  display_name    String?           @db.VarChar(255)
  description     String?           @db.VarChar(255)
  created_at      DateTime?         @db.Timestamp(0)
  updated_at      DateTime?         @db.Timestamp(0)
  permission_role permission_role[]
}

model pipedrive_debts_users {
  id          BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  customer_id Int
  created_at  DateTime? @db.Timestamp(0)
  updated_at  DateTime? @db.Timestamp(0)
}

model plans {
  id                      Int                       @id @default(autoincrement()) @db.UnsignedInt
  name                    String                    @db.VarChar(255)
  slug                    String                    @db.VarChar(255)
  users                   Int
  units                   Int                       @default(1)
  patients                Int
  appointments            Int
  messages                Int
  emails                  Int
  value                   Decimal                   @db.Decimal(10, 2)
  status                  Int                       @db.TinyInt
  created_at              DateTime?                 @db.Timestamp(0)
  updated_at              DateTime?                 @db.Timestamp(0)
  additional_package_plan additional_package_plan[]
  coupon_specific_plan    coupon_specific_plan[]
  entities                entities[]
  health_scores           health_scores[]
  module_payment_customer module_payment_customer[]
}

model pre_evaluation_results {
  id                BigInt          @id @default(autoincrement()) @db.UnsignedBigInt
  pre_evaluation_id BigInt          @db.UnsignedBigInt
  field_id          Int             @db.UnsignedInt
  result            String          @db.LongText
  created_at        DateTime?       @db.Timestamp(0)
  updated_at        DateTime?       @db.Timestamp(0)
  fields            fields          @relation(fields: [field_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "pre_evaluation_results_field_id_foreign")
  pre_evaluations   pre_evaluations @relation(fields: [pre_evaluation_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "pre_evaluation_results_pre_evaluation_id_foreign")

  @@index([field_id], map: "pre_evaluation_results_field_id_index")
  @@index([pre_evaluation_id], map: "pre_evaluation_results_pre_evaluation_id_index")
}

model pre_evaluations {
  id                               BigInt                             @id @default(autoincrement()) @db.UnsignedBigInt
  appointment_id                   Int                                @db.UnsignedInt
  contact_id                       Int                                @db.UnsignedInt
  entity_id                        Int                                @db.UnsignedInt
  is_done                          Int                                @default(0) @db.TinyInt
  created_at                       DateTime?                          @db.Timestamp(0)
  updated_at                       DateTime?                          @db.Timestamp(0)
  evaluation_model_pre_evaluations evaluation_model_pre_evaluations[] @ignore
  pre_evaluation_results           pre_evaluation_results[]
  appointments                     appointments                       @relation(fields: [appointment_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "pre_evaluations_appointment_id_foreign")
  contacts                         contacts                           @relation(fields: [contact_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "pre_evaluations_contact_id_foreign")
  entities                         entities                           @relation(fields: [entity_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "pre_evaluations_entity_id_foreign")

  @@index([appointment_id], map: "pre_evaluations_appointment_id_index")
  @@index([contact_id], map: "pre_evaluations_contact_id_index")
  @@index([entity_id], map: "pre_evaluations_entity_id_index")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model procedure_user {
  procedure_id Int        @db.UnsignedInt
  user_id      Int        @db.UnsignedInt
  procedures   procedures @relation(fields: [procedure_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "type_procedure_user_type_procedure_id_foreign")
  users        users      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "type_procedure_user_user_id_foreign")

  @@index([procedure_id], map: "type_procedure_user_type_procedure_id_index")
  @@index([user_id], map: "type_procedure_user_user_id_index")
  @@ignore
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model procedures {
  id                                     Int                                      @id @default(autoincrement()) @db.UnsignedInt
  name                                   String                                   @db.VarChar(255)
  created_at                             DateTime?                                @db.Timestamp(0)
  updated_at                             DateTime?                                @db.Timestamp(0)
  value                                  Decimal?                                 @db.Decimal(10, 2)
  edit                                   Int?                                     @db.TinyInt
  entity_id                              Int?                                     @db.UnsignedInt
  account_id                             Int?                                     @db.UnsignedInt
  commission                             Decimal?                                 @db.Decimal(10, 2)
  deleted_at                             DateTime?                                @db.Timestamp(0)
  commission_type                        Int                                      @default(0) @db.TinyInt
  tuss_code                              String?                                  @db.VarChar(255)
  register_comission                     Boolean                                  @default(true)
  agreement_procedure                    agreement_procedure[]                    @ignore
  appointment_package_automatic_renewals appointment_package_automatic_renewals[]
  appointment_procedure                  appointment_procedure[]                  @ignore
  appointments                           appointments[]
  evaluations                            evaluations[]
  evolution_procedure                    evolution_procedure[]                    @ignore
  evolutions                             evolutions[]
  movements                              movements[]
  procedure_user                         procedure_user[]                         @ignore
  accounts                               accounts?                                @relation(fields: [account_id], references: [id], onDelete: Restrict, map: "procedures_account_id_foreign")
  entities                               entities?                                @relation(fields: [entity_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "procedures_entity_id_foreign")
  treatment_plans                        treatment_plans[]

  @@index([account_id], map: "procedures_account_id_index")
  @@index([entity_id], map: "procedures_entity_id_index")
}

model push_notification_tokens {
  id          BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  created_at  DateTime? @db.Timestamp(0)
  updated_at  DateTime? @db.Timestamp(0)
  token       String    @db.VarChar(255)
  email       String    @db.VarChar(255)
  app_user_id BigInt    @db.UnsignedBigInt

  @@index([email, app_user_id], map: "push_notification_tokens_email_app_user_id_index")
}

model rate_ranges {
  id                                       BigInt                                     @id @default(autoincrement()) @db.UnsignedBigInt
  description                              String                                     @db.VarChar(255)
  value_min                                Decimal                                    @db.Decimal(10, 2)
  value_max                                Decimal                                    @db.Decimal(10, 2)
  created_at                               DateTime?                                  @db.Timestamp(0)
  updated_at                               DateTime?                                  @db.Timestamp(0)
  payment_intermediation_balance_histories payment_intermediation_balance_histories[]
  payment_intermediation_receivers         payment_intermediation_receivers[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model received_messages {
  id                    BigInt                           @id @default(autoincrement()) @db.UnsignedBigInt
  cellphone             String?                          @db.VarChar(50)
  received_message      String                           @db.VarChar(255)
  negative_message      Int                              @default(0) @db.TinyInt
  answered_message      String?                          @db.VarChar(255)
  received_date         DateTime?                        @db.DateTime(0)
  entity_id             Int                              @db.UnsignedInt
  message_id            Int?                             @db.UnsignedInt
  deleted_at            DateTime?                        @db.Timestamp(0)
  created_at            DateTime?                        @db.Timestamp(0)
  updated_at            DateTime?                        @db.Timestamp(0)
  contact_id            Int?                             @db.UnsignedInt
  whatsapp              Int                              @default(0) @db.TinyInt
  whatsapp_message_read Int                              @default(0) @db.TinyInt
  whatsapp_contact_name String                           @db.VarChar(255)
  whatsapp_type         received_messages_whatsapp_type?
  zapi_id               String?                          @db.VarChar(255)
  json_callback         String?                          @db.MediumText
  contacts              contacts?                        @relation(fields: [contact_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "received_messages_contact_id_foreign")
  entities              entities                         @relation(fields: [entity_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "received_messages_entity_id_foreign")
  messages              messages?                        @relation(fields: [message_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "received_messages_message_id_foreign")

  @@index([contact_id], map: "received_messages_contact_id_index")
  @@index([entity_id], map: "received_messages_entity_id_index")
  @@index([message_id], map: "received_messages_message_id_index")
  @@index([zapi_id], map: "received_messages_zapi_id_index")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model report_information {
  id                  BigInt     @id @default(autoincrement()) @db.UnsignedBigInt
  entity_id           Int        @db.UnsignedInt
  contact_id          Int        @db.UnsignedInt
  start_date          DateTime   @db.Date
  end_date            DateTime   @db.Date
  report_access_token String     @db.VarChar(255)
  created_at          DateTime?  @db.Timestamp(0)
  updated_at          DateTime?  @db.Timestamp(0)
  messages            messages[]
  contacts            contacts   @relation(fields: [contact_id], references: [id], onDelete: Cascade, map: "report_information_contact_id_foreign")
  entities            entities   @relation(fields: [entity_id], references: [id], onDelete: Cascade, map: "report_information_entity_id_foreign")

  @@index([contact_id], map: "report_information_contact_id_index")
  @@index([end_date], map: "report_information_end_date_index")
  @@index([entity_id], map: "report_information_entity_id_index")
  @@index([report_access_token], map: "report_information_report_access_token_index")
  @@index([start_date], map: "report_information_start_date_index")
}

model results {
  id            Int         @id @default(autoincrement()) @db.UnsignedInt
  result        String      @db.LongText
  field_id      Int         @db.UnsignedInt
  evaluation_id Int         @db.UnsignedInt
  created_at    DateTime?   @db.Timestamp(0)
  updated_at    DateTime?   @db.Timestamp(0)
  evaluations   evaluations @relation(fields: [evaluation_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "results_evaluation_id_foreign")
  fields        fields      @relation(fields: [field_id], references: [id], onUpdate: Restrict, map: "results_field_id_foreign")

  @@index([created_at], map: "results_created_at_index")
  @@index([evaluation_id], map: "results_evaluation_id_index")
  @@index([field_id], map: "results_field_id_index")
  @@index([updated_at], map: "results_updated_at_index")
}

model role_user {
  user_id Int   @db.UnsignedInt
  role_id Int   @db.UnsignedInt
  roles   roles @relation(fields: [role_id], references: [id], onDelete: Cascade, map: "role_user_role_id_foreign")
  users   users @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "role_user_user_id_foreign")

  @@id([user_id, role_id])
  @@index([role_id], map: "role_user_role_id_foreign")
}

model roles {
  id              Int               @id @default(autoincrement()) @db.UnsignedInt
  name            String            @unique(map: "roles_name_unique") @db.VarChar(255)
  display_name    String?           @db.VarChar(255)
  description     String?           @db.VarChar(255)
  created_at      DateTime?         @db.Timestamp(0)
  updated_at      DateTime?         @db.Timestamp(0)
  permission_role permission_role[]
  role_user       role_user[]
}

model room_user {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  room_id    Int       @db.UnsignedInt
  user_id    Int       @db.UnsignedInt
  entity_id  Int       @db.UnsignedInt
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  entities   entities  @relation(fields: [entity_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "room_user_entity_id_foreign")
  rooms      rooms     @relation(fields: [room_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "room_user_room_id_foreign")
  users      users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "room_user_user_id_foreign")

  @@index([entity_id], map: "room_user_entity_id_index")
  @@index([room_id], map: "room_user_room_id_index")
  @@index([user_id], map: "room_user_user_id_index")
}

model rooms {
  id                 Int                 @id @default(autoincrement()) @db.UnsignedInt
  name               String              @db.VarChar(255)
  limit_appointments Int
  entity_id          Int                 @db.UnsignedInt
  created_at         DateTime?           @db.Timestamp(0)
  updated_at         DateTime?           @db.Timestamp(0)
  appointments       appointments[]
  gympass_slots      gympass_slots[]
  room_user          room_user[]
  entities           entities            @relation(fields: [entity_id], references: [id], onDelete: Cascade, map: "rooms_entity_id_foreign")
  waiting_room_line  waiting_room_line[]

  @@index([entity_id], map: "rooms_entity_id_index")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model sadt_guide_items {
  id                BigInt      @id @default(autoincrement()) @db.UnsignedBigInt
  date              DateTime?   @db.Date
  start_time        DateTime?   @db.Time(0)
  end_time          DateTime?   @db.Time(0)
  tabulated_code    String?     @db.VarChar(255)
  procedure_code    String?     @db.VarChar(255)
  description       String?     @db.VarChar(255)
  quantity_realized Int?        @db.TinyInt
  access_way        String?     @db.VarChar(255)
  tecnique_realized String?     @db.VarChar(255)
  tax_percentage    Decimal?    @db.Decimal(3, 2)
  unitary_value     Decimal?    @db.Decimal(10, 2)
  total_value       Decimal?    @db.Decimal(10, 2)
  sadt_guide_id     BigInt      @db.UnsignedBigInt
  created_at        DateTime?   @db.Timestamp(0)
  updated_at        DateTime?   @db.Timestamp(0)
  tuss_item_type    String?     @db.VarChar(255)
  tuss_item_id      BigInt?     @db.UnsignedBigInt
  sadt_guides       sadt_guides @relation(fields: [sadt_guide_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "sadt_guide_items_sadt_guide_id_foreign")

  @@index([sadt_guide_id], map: "sadt_guide_items_sadt_guide_id_foreign")
  @@index([tuss_item_type, tuss_item_id], map: "sadt_guide_items_tuss_item_type_tuss_item_id_index")
}

model sadt_guide_professionals {
  id                         BigInt      @id @default(autoincrement()) @db.UnsignedBigInt
  sequency_reference         String      @db.VarChar(255)
  participation_degree       String      @db.VarChar(255)
  professional_code          String      @db.VarChar(255)
  professional_name          String      @db.VarChar(255)
  professional_concil        String      @db.VarChar(255)
  professional_concil_number String      @db.VarChar(255)
  professional_concil_uf     String      @db.VarChar(255)
  professional_cbo           String      @db.VarChar(255)
  sadt_guide_id              BigInt      @db.UnsignedBigInt
  created_at                 DateTime?   @db.Timestamp(0)
  updated_at                 DateTime?   @db.Timestamp(0)
  contact_id                 Int?        @db.UnsignedInt
  contacts                   contacts?   @relation(fields: [contact_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "sadt_guide_professionals_contact_id_foreign")
  sadt_guides                sadt_guides @relation(fields: [sadt_guide_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "sadt_guide_professionals_sadt_guide_id_foreign")

  @@index([contact_id], map: "sadt_guide_professionals_contact_id_index")
  @@index([sadt_guide_id], map: "sadt_guide_professionals_sadt_guide_id_foreign")
}

model sadt_guide_requested_items {
  id                  BigInt      @id @default(autoincrement()) @db.UnsignedBigInt
  tabulated_code      String?     @db.VarChar(255)
  item_code           String?     @db.VarChar(255)
  item_description    String      @db.VarChar(255)
  quantity_requested  Int
  authorized_quantity Int
  sadt_guide_id       BigInt      @db.UnsignedBigInt
  created_at          DateTime?   @db.Timestamp(0)
  updated_at          DateTime?   @db.Timestamp(0)
  tuss_item_type      String?     @db.VarChar(255)
  tuss_item_id        BigInt?     @db.UnsignedBigInt
  sadt_guides         sadt_guides @relation(fields: [sadt_guide_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "sadt_guide_requested_items_sadt_guide_id_foreign")

  @@index([sadt_guide_id], map: "sadt_guide_requested_items_sadt_guide_id_foreign")
  @@index([tuss_item_type, tuss_item_id], map: "sadt_guide_requested_items_tuss_item_type_tuss_item_id_index")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model sadt_guides {
  id                                   BigInt                       @id @default(autoincrement()) @db.UnsignedBigInt
  contact_id                           Int?                         @db.UnsignedInt
  agreement_id                         Int                          @db.UnsignedInt
  ans_register                         String                       @db.VarChar(255)
  guide_number                         String                       @db.VarChar(255)
  main_guide_number                    String?                      @db.VarChar(255)
  authorization_date                   DateTime?                    @db.Date
  password                             String?                      @db.VarChar(255)
  password_expiration                  DateTime?                    @db.Date
  operator_number                      String?                      @db.VarChar(255)
  card_number                          String                       @db.VarChar(255)
  card_expiration                      DateTime?                    @db.Date
  beneficiary_name                     String                       @db.VarChar(255)
  national_healthy_card_number         String?                      @db.VarChar(255)
  newborn                              String                       @db.VarChar(255)
  contractee_identification            String                       @db.VarChar(255)
  contractee_name                      String                       @db.VarChar(255)
  applicant_professional_name          String?                      @db.VarChar(255)
  applicant_professional_concil        String                       @db.VarChar(255)
  applicant_professional_concil_number String                       @db.VarChar(255)
  applicant_professional_concil_uf     String                       @db.VarChar(255)
  applicant_professional_cbos          String                       @db.VarChar(255)
  appointment_character                String                       @db.VarChar(255)
  requesting_date                      DateTime?                    @db.Date
  clinic_indication                    String?                      @db.Text
  executor_code                        String                       @db.VarChar(255)
  executor_name                        String                       @db.VarChar(255)
  executor_cnes                        String?                      @db.VarChar(255)
  attendance_type                      String                       @db.VarChar(255)
  acident_indication                   String                       @db.VarChar(255)
  appointment_type                     String?                      @db.VarChar(255)
  egress_type                          String?                      @db.VarChar(255)
  serie_procedure_executed_dates       String?                      @db.Text
  observation                          String?                      @db.Text
  total_procedures                     Decimal?                     @db.Decimal(8, 2)
  total_taxes_and_rents                Decimal?                     @db.Decimal(8, 2)
  total_materials                      Decimal?                     @db.Decimal(8, 2)
  total_opme                           Decimal?                     @db.Decimal(8, 2)
  total_medicaments                    Decimal?                     @db.Decimal(8, 2)
  total_medical_gases                  Decimal?                     @db.Decimal(8, 2)
  total_general                        Decimal                      @db.Decimal(8, 2)
  tiss_lot_id                          BigInt?                      @db.UnsignedBigInt
  entity_id                            Int                          @db.UnsignedInt
  created_at                           DateTime?                    @db.Timestamp(0)
  updated_at                           DateTime?                    @db.Timestamp(0)
  appointment_id                       Int?                         @db.UnsignedInt
  doctor_id                            Int?                         @db.UnsignedInt
  typeIdentification                   String?                      @db.VarChar(255)
  serviceRegime                        String?                      @db.VarChar(255)
  version                              String?                      @db.VarChar(255)
  sadt_guide_items                     sadt_guide_items[]
  sadt_guide_professionals             sadt_guide_professionals[]
  sadt_guide_requested_items           sadt_guide_requested_items[]
  agreements                           agreements                   @relation(fields: [agreement_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "sadt_guides_agreement_id_foreign")
  appointments                         appointments?                @relation(fields: [appointment_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "sadt_guides_appointment_id_foreign")
  contacts                             contacts?                    @relation(fields: [contact_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "sadt_guides_contact_id_foreign")
  doctors                              doctors?                     @relation(fields: [doctor_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "sadt_guides_doctor_id_foreign")
  entities                             entities                     @relation(fields: [entity_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "sadt_guides_entity_id_foreign")
  tiss_lots                            tiss_lots?                   @relation(fields: [tiss_lot_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "sadt_guides_tiss_lot_id_foreign")

  @@index([agreement_id], map: "sadt_guides_agreement_id_index")
  @@index([appointment_id], map: "sadt_guides_appointment_id_index")
  @@index([contact_id], map: "sadt_guides_contact_id_index")
  @@index([doctor_id], map: "sadt_guides_doctor_id_index")
  @@index([entity_id], map: "sadt_guides_entity_id_index")
  @@index([tiss_lot_id], map: "sadt_guides_tiss_lot_id_index")
}

model sessions {
  id            String  @unique(map: "sessions_id_unique") @db.VarChar(255)
  user_id       BigInt? @db.UnsignedBigInt
  ip_address    String? @db.VarChar(45)
  user_agent    String? @db.Text
  payload       String  @db.Text
  last_activity Int
}

model settings_attendance_confirmations {
  id                          BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  entity_id                   Int?      @db.UnsignedInt
  status_id                   Int       @db.UnsignedInt
  confirmation_on_appointment Int       @default(0) @db.TinyInt
  auto_change_status          Int       @default(1) @db.TinyInt
  enabled                     Int       @default(1) @db.TinyInt
  auto_change_status_message  String    @db.Text
  created_at                  DateTime? @db.Timestamp(0)
  updated_at                  DateTime? @db.Timestamp(0)
  entities                    entities? @relation(fields: [entity_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "settings_attendance_confirmations_entity_id_foreign")
  status                      status    @relation(fields: [status_id], references: [id], onUpdate: Restrict, map: "settings_attendance_confirmations_status_id_foreign")

  @@index([entity_id], map: "settings_attendance_confirmations_entity_id_index")
  @@index([status_id], map: "settings_attendance_confirmations_status_id_index")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model settings_calendar {
  id                         Int                                          @id @default(autoincrement()) @db.UnsignedInt
  default_duration           Int
  default_view               String                                       @db.VarChar(255)
  days                       String                                       @db.VarChar(255)
  start_time                 DateTime                                     @db.Time(0)
  end_time                   DateTime                                     @db.Time(0)
  user_id                    Int?                                         @db.UnsignedInt
  entity_id                  Int?                                         @db.UnsignedInt
  created_at                 DateTime?                                    @db.Timestamp(0)
  updated_at                 DateTime?                                    @db.Timestamp(0)
  send_report                Int                                          @default(1) @db.TinyInt
  show_birthdays             Int                                          @default(1) @db.TinyInt
  interval                   Int                                          @default(60)
  reminder                   settings_calendar_reminder?
  limit_appointments         Int?
  attendees_on_google_events Int                                          @default(0) @db.TinyInt
  scheduled_status_color     String                                       @default("#357ab7") @db.VarChar(255)
  business_hours             String                                       @db.Text
  default_view_v2            String                                       @default("") @db.VarChar(255)
  default_frequency          settings_calendar_default_frequency          @default(weekly)
  default_repetitions        Int                                          @default(10)
  use_draggable_calendar     Int                                          @default(0) @db.TinyInt
  sms_default_reminder       settings_calendar_sms_default_reminder?
  whatsapp_default_reminder  settings_calendar_whatsapp_default_reminder?
  reminder_time              DateTime?                                    @db.Time(0)
  user_name_appointment      Int                                          @default(1) @db.TinyInt
  set_time_with_interval     Int                                          @default(0) @db.TinyInt
  split_duration_start       Int                                          @default(0) @db.TinyInt
  entities                   entities?                                    @relation(fields: [entity_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "settings_calendar_entity_id_foreign")
  users                      users?                                       @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "settings_calendar_user_id_foreign")

  @@index([entity_id], map: "settings_calendar_entity_id_index")
  @@index([user_id], map: "settings_calendar_user_id_index")
}

model settings_users {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  name       String    @db.VarChar(255)
  user_id    Int?      @db.UnsignedInt
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  users      users?    @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "onboardings_user_id_foreign")

  @@index([user_id], map: "onboardings_user_id_index")
}

model site_numbers {
  id                     BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  patients               Int
  schedules              Int
  appointments           Int
  evaluations_evolutions Int
  users                  Int
  created_at             DateTime? @db.Timestamp(0)
  updated_at             DateTime? @db.Timestamp(0)
  movements              BigInt?
}

model specialties {
  id                       Int                        @id @default(autoincrement()) @db.UnsignedInt
  name                     String                     @db.VarChar(255)
  slug                     String                     @db.VarChar(255)
  correlations             Json?
  created_at               DateTime?                  @db.Timestamp(0)
  updated_at               DateTime?                  @db.Timestamp(0)
  deleted_at               DateTime?                  @db.Timestamp(0)
  mkt_online_schedules     mkt_online_schedules[]
  mkt_schedule_specialties mkt_schedule_specialties[]
  mkt_team_specialty       mkt_team_specialty[]
  specialty_user           specialty_user[]
}

model specialty_user {
  id           BigInt      @id @default(autoincrement()) @db.UnsignedBigInt
  specialty_id Int         @db.UnsignedInt
  user_id      Int         @db.UnsignedInt
  created_at   DateTime?   @db.Timestamp(0)
  updated_at   DateTime?   @db.Timestamp(0)
  specialties  specialties @relation(fields: [specialty_id], references: [id], onDelete: Cascade, map: "specialty_user_specialty_id_foreign")
  users        users       @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "specialty_user_user_id_foreign")

  @@index([specialty_id], map: "specialty_user_specialty_id_index")
  @@index([user_id], map: "specialty_user_user_id_index")
}

model states {
  id           Int       @id @default(autoincrement()) @db.UnsignedInt
  name         String    @db.VarChar(50)
  abbreviation String    @db.VarChar(5)
  created_at   DateTime? @db.Timestamp(0)
  updated_at   DateTime? @db.Timestamp(0)
  cities       cities[]
}

model status {
  id                                     Int                                      @id @default(autoincrement()) @db.UnsignedInt
  name                                   String                                   @db.VarChar(255)
  color                                  String                                   @db.VarChar(255)
  entity_id                              Int?                                     @db.UnsignedInt
  created_at                             DateTime?                                @db.Timestamp(0)
  updated_at                             DateTime?                                @db.Timestamp(0)
  status                                 Int                                      @default(1) @db.TinyInt
  delete_finance                         Int                                      @default(0) @db.TinyInt
  delete_reminders                       Int                                      @default(0) @db.TinyInt
  available_to_limited_professionals     Int                                      @default(0) @db.TinyInt
  discount_appointment_package           Int                                      @default(0) @db.TinyInt
  create_comission_packages              Int                                      @default(0) @db.TinyInt
  not_count_room_limit                   Int                                      @default(0) @db.TinyInt
  not_count_professional_limit           Int                                      @default(0) @db.TinyInt
  appointment_package_automatic_renewals appointment_package_automatic_renewals[]
  appointments                           appointments[]
  attendance_confirmations               attendance_confirmations[]
  entity_status_hide                     entity_status_hide[]
  settings_attendance_confirmations      settings_attendance_confirmations[]
  entities                               entities?                                @relation(fields: [entity_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "status_entity_id_foreign")
  users                                  users[]

  @@index([entity_id], map: "status_entity_id_index")
}

model subscriptions {
  id            Int       @id @default(autoincrement()) @db.UnsignedInt
  entity_id     Int
  name          String    @db.VarChar(255)
  stripe_id     String    @db.VarChar(255)
  stripe_plan   String    @db.VarChar(255)
  quantity      Int
  trial_ends_at DateTime? @db.Timestamp(0)
  ends_at       DateTime? @db.Timestamp(0)
  created_at    DateTime? @db.Timestamp(0)
  updated_at    DateTime? @db.Timestamp(0)
}

model synchronizations {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model temporary_push_notifications {
  id            BigInt  @id @default(autoincrement()) @db.UnsignedBigInt
  processed     Int     @db.SmallInt
  type          String  @db.VarChar(255)
  target        String  @db.VarChar(255)
  title         String? @db.VarChar(255)
  body          String  @db.VarChar(255)
  push_type     String  @default("temporary_push_notifications") @db.VarChar(255)
  contact_id    BigInt? @db.UnsignedBigInt
  deep_link     String  @db.VarChar(255)
  push_category String? @db.VarChar(255)
}

model tiss_guides {
  id                              BigInt        @id @default(autoincrement()) @db.UnsignedBigInt
  contact_id                      Int?          @db.UnsignedInt
  agreement_id                    Int           @db.UnsignedInt
  number                          BigInt        @db.UnsignedBigInt
  operator_number                 BigInt?       @db.UnsignedBigInt
  card_number                     String        @db.VarChar(20)
  expiration_card_date            DateTime?     @db.Date
  newborn                         Int           @default(0) @db.TinyInt
  patient_name                    String        @db.VarChar(70)
  cns_number                      String?       @db.VarChar(15)
  service_provider_document_type  Int?          @db.TinyInt
  service_provider_document       String        @db.VarChar(18)
  service_provider_name           String        @db.VarChar(70)
  service_provider_cnes_code      String        @db.VarChar(7)
  service_provider_executor_name  String?       @db.VarChar(70)
  service_provider_council        String        @db.VarChar(255)
  service_provider_council_number String        @db.VarChar(15)
  service_provider_council_state  String        @db.VarChar(255)
  service_provider_council_cbo    String        @db.VarChar(255)
  appointment_acident_type        Int           @db.TinyInt
  appointment_date                DateTime      @db.Date
  appointment_type                Int           @db.TinyInt
  appointment_table_code          Int           @db.TinyInt
  appointment_code                String        @db.VarChar(10)
  appointment_value               Decimal       @db.Decimal(10, 2)
  appointment_observation         String?       @db.Text
  tiss_lot_id                     BigInt?       @db.UnsignedBigInt
  entity_id                       Int           @db.UnsignedInt
  created_at                      DateTime?     @db.Timestamp(0)
  updated_at                      DateTime?     @db.Timestamp(0)
  appointment_id                  Int?          @db.UnsignedInt
  patient_type_identification     String?       @db.VarChar(255)
  service_regime                  String?       @db.VarChar(255)
  version                         String?       @db.VarChar(255)
  agreements                      agreements    @relation(fields: [agreement_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "tiss_guides_agreement_id_foreign")
  appointments                    appointments? @relation(fields: [appointment_id], references: [id], onUpdate: Restrict, map: "tiss_guides_appointment_id_foreign")
  entities                        entities      @relation(fields: [entity_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "tiss_guides_entity_id_foreign")
  contacts                        contacts?     @relation(fields: [contact_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "tiss_guides_patient_id_foreign")
  tiss_lots                       tiss_lots?    @relation(fields: [tiss_lot_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "tiss_guides_tiss_lot_id_foreign")

  @@index([agreement_id], map: "tiss_guides_agreement_id_index")
  @@index([appointment_id], map: "tiss_guides_appointment_id_index")
  @@index([entity_id], map: "tiss_guides_entity_id_index")
  @@index([contact_id], map: "tiss_guides_patient_id_index")
  @@index([tiss_lot_id], map: "tiss_guides_tiss_lot_id_index")
}

model tiss_lots {
  id                        BigInt        @id @default(autoincrement()) @db.UnsignedBigInt
  agreement_id              Int           @db.UnsignedInt
  service_provider_name     String        @db.VarChar(70)
  service_provider_document String        @db.VarChar(14)
  number                    Int
  entity_id                 Int           @db.UnsignedInt
  created_at                DateTime?     @db.Timestamp(0)
  updated_at                DateTime?     @db.Timestamp(0)
  deleted_at                DateTime?     @db.Timestamp(0)
  version                   String?       @db.VarChar(255)
  name_with_sequential      Boolean       @default(false)
  sadt_guides               sadt_guides[]
  tiss_guides               tiss_guides[]
  agreements                agreements    @relation(fields: [agreement_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "tiss_lots_agreement_id_foreign")
  entities                  entities      @relation(fields: [entity_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "tiss_lots_entity_id_foreign")

  @@index([agreement_id], map: "tiss_lots_agreement_id_index")
  @@index([entity_id], map: "tiss_lots_entity_id_index")
}

model treatment_plans {
  id               Int           @id @default(autoincrement()) @db.UnsignedInt
  order            Int
  objectives       String        @db.Text
  resources        String        @db.Text
  qty_appointments Int?
  procedure_id     Int?          @db.UnsignedInt
  evaluation_id    Int           @db.UnsignedInt
  created_at       DateTime?     @db.Timestamp(0)
  updated_at       DateTime?     @db.Timestamp(0)
  ducts            String?       @db.Text
  prognosis        String?       @db.Text
  contact_id       Int?          @db.UnsignedInt
  appointment_id   Int?          @db.UnsignedInt
  appointments     appointments? @relation(fields: [appointment_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "treatment_plans_appointment_id_foreign")
  contacts         contacts?     @relation(fields: [contact_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "treatment_plans_contact_id_foreign")
  evaluations      evaluations   @relation(fields: [evaluation_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "treatment_plans_evaluation_id_foreign")
  procedures       procedures?   @relation(fields: [procedure_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "treatment_plans_procedure_id_foreign")

  @@index([appointment_id], map: "treatment_plans_appointment_id_foreign")
  @@index([contact_id], map: "treatment_plans_contact_id_foreign")
  @@index([evaluation_id], map: "treatment_plans_evaluation_id_index")
  @@index([procedure_id], map: "treatment_plans_procedure_id_index")
}

model tuss_medicaments {
  id               BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  term_code        String    @db.VarChar(255)
  term             String    @db.Text
  presentation     String    @db.VarChar(255)
  laboratory       String    @db.VarChar(255)
  validity_start   DateTime? @db.Date
  validity_end     DateTime? @db.Date
  implantation_end DateTime? @db.Date
  anvisa_registry  String    @db.VarChar(255)
  created_at       DateTime? @db.Timestamp(0)
  updated_at       DateTime? @db.Timestamp(0)
  version          String?   @db.VarChar(255)
}

model tuss_opmes {
  id               BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  term_code        String    @db.VarChar(255)
  term             String    @db.Text
  model            String?   @db.VarChar(255)
  manufacturer     String    @db.VarChar(255)
  validity_start   DateTime? @db.Date
  validity_end     DateTime? @db.Date
  implantation_end DateTime? @db.Date
  anvisa_registry  String    @db.VarChar(255)
  risk_class       String    @db.VarChar(255)
  techinical_name  String    @db.VarChar(255)
  created_at       DateTime? @db.Timestamp(0)
  updated_at       DateTime? @db.Timestamp(0)
  version          String?   @db.VarChar(255)

  @@index([created_at], map: "tuss_opmes_created_at_index")
  @@index([implantation_end], map: "tuss_opmes_implantation_end_index")
  @@index([updated_at], map: "tuss_opmes_updated_at_index")
  @@index([validity_end], map: "tuss_opmes_validity_end_index")
  @@index([validity_start], map: "tuss_opmes_validity_start_index")
}

model tuss_own_packages {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  code       String    @db.VarChar(255)
  name       String    @db.VarChar(255)
  entity_id  Int       @db.UnsignedInt
  entities   entities  @relation(fields: [entity_id], references: [id], onUpdate: Restrict, map: "tuss_own_packages_entity_id_foreign")

  @@index([entity_id], map: "tuss_own_packages_entity_id_foreign")
}

model tuss_procedures {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  tuss_code  String    @db.VarChar(255)
  name       String    @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  version    String?   @db.VarChar(255)
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model users {
  id                                                          Int                                      @id @default(autoincrement()) @db.UnsignedInt
  name                                                        String                                   @db.VarChar(255)
  email                                                       String                                   @unique(map: "users_email_unique") @db.VarChar(255)
  password                                                    String                                   @db.VarChar(255)
  remember_token                                              String?                                  @db.VarChar(100)
  created_at                                                  DateTime?                                @db.Timestamp(0)
  updated_at                                                  DateTime?                                @db.Timestamp(0)
  crefito                                                     String?                                  @db.VarChar(255)
  area                                                        String?                                  @db.VarChar(255)
  last_login_at                                               DateTime?                                @db.DateTime(0)
  last_entity_login                                           Int?
  qty_interactions                                            Int                                      @default(0)
  edit_update_patient                                         Int                                      @default(1) @db.TinyInt
  informations                                                String?                                  @db.Text
  admin_partner                                               Int?                                     @db.UnsignedInt
  status_id                                                   Int?                                     @db.UnsignedInt
  attendance_finish                                           Int                                      @default(1) @db.TinyInt
  attendance_authorization                                    Int                                      @default(0) @db.TinyInt
  deleted_at                                                  DateTime?                                @db.Timestamp(0)
  import_token                                                String?                                  @db.VarChar(255)
  contact_id                                                  Int?                                     @db.UnsignedInt
  specialties                                                 String?                                  @db.VarChar(255)
  temporary_login_token                                       String?                                  @db.VarChar(255)
  view_movements_secretaries                                  Int                                      @default(0) @db.SmallInt
  alert_not_login_at                                          DateTime?                                @default(dbgenerated("'2020-10-07 19:17:12'")) @db.DateTime(0)
  online_alert                                                Int                                      @default(0) @db.TinyInt
  pipedrive_person_id                                         Int?                                     @db.UnsignedInt
  view_user_info                                              Int                                      @default(0) @db.TinyInt
  hide_patients_contact                                       Int                                      @default(0) @db.TinyInt
  destroy_appointment                                         Int                                      @default(1) @db.TinyInt
  transcribe_audio                                            Int                                      @default(0) @db.TinyInt
  nfe_permission                                              Int?                                     @db.TinyInt
  create_schedule                                             Int?                                     @db.TinyInt
  view_commission                                             Int                                      @default(1) @db.TinyInt
  audit_agreement_id                                          Int?                                     @db.UnsignedInt
  audit_attendance_from                                       DateTime?                                @db.Date
  allow_edit_appointment_data                                 Boolean                                  @default(true)
  agreement_auditors                                          agreement_auditors[]
  appointment_audio_appointment_audio_user_idTousers          appointment_audio[]                      @relation("appointment_audio_user_idTousers")
  appointment_audio_appointment_audio_user_transcribedTousers appointment_audio[]                      @relation("appointment_audio_user_transcribedTousers")
  appointment_package_automatic_renewals                      appointment_package_automatic_renewals[]
  appointment_package_user                                    appointment_package_user[]               @ignore
  appointments                                                appointments[]
  attendance_confirmations                                    attendance_confirmations[]
  backups                                                     backups[]
  contact_user                                                contact_user[]                           @ignore
  contacts_contacts_professional_indication_idTousers         contacts[]                               @relation("contacts_professional_indication_idTousers")
  doctor_user                                                 doctor_user[]                            @ignore
  entity_user                                                 entity_user[]                            @ignore
  files                                                       files[]
  google_accounts                                             google_accounts[]
  google_events                                               google_events[]
  google_syncs                                                google_syncs[]                           @ignore
  gympass_slots                                               gympass_slots[]
  images                                                      images[]
  imports                                                     imports[]
  indications                                                 indications[]
  messages                                                    messages[]
  mkt_automation_messages                                     mkt_automation_messages[]
  mkt_online_schedule_config_user                             mkt_online_schedule_config_user[]
  mkt_unsubscribe_email_contacts                              mkt_unsubscribe_email_contacts[]
  movements_movements_ownerTousers                            movements[]                              @relation("movements_ownerTousers")
  movements_movements_user_idTousers                          movements[]                              @relation("movements_user_idTousers")
  nfe_details                                                 nfe_details[]
  nfe_files                                                   nfe_files[]
  notification_user                                           notification_user[]                      @ignore
  notifications                                               notifications[]
  nps                                                         nps[]
  owner_appointments                                          owner_appointments[]
  password_histories                                          password_histories[]
  payment_intermediation_movements                            payment_intermediation_movements[]
  procedure_user                                              procedure_user[]                         @ignore
  role_user                                                   role_user[]
  room_user                                                   room_user[]
  settings_calendar                                           settings_calendar[]
  settings_users                                              settings_users[]
  specialty_user                                              specialty_user[]
  partners                                                    partners?                                @relation(fields: [admin_partner], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "users_admin_partner_foreign")
  agreements                                                  agreements?                              @relation(fields: [audit_agreement_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "users_audit_agreement_id_foreign")
  contacts_users_contact_idTocontacts                         contacts?                                @relation("users_contact_idTocontacts", fields: [contact_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "users_contact_id_foreign")
  status                                                      status?                                  @relation(fields: [status_id], references: [id], map: "users_status_id_foreign")
  waiting_room_line                                           waiting_room_line[]

  @@index([admin_partner], map: "users_admin_partner_index")
  @@index([audit_agreement_id], map: "users_audit_agreement_id_index")
  @@index([contact_id], map: "users_contact_id_foreign")
  @@index([status_id], map: "users_status_id_index")
}

model waiting_room_line {
  id             BigInt       @id @default(autoincrement()) @db.UnsignedBigInt
  appointment_id Int          @db.UnsignedInt
  contact_id     Int          @db.UnsignedInt
  room_id        Int          @db.UnsignedInt
  user_id        Int          @db.UnsignedInt
  entity_id      Int          @db.UnsignedInt
  created_at     DateTime?    @db.Timestamp(0)
  updated_at     DateTime?    @db.Timestamp(0)
  appointments   appointments @relation(fields: [appointment_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "waiting_room_line_appointment_id_foreign")
  contacts       contacts     @relation(fields: [contact_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "waiting_room_line_contact_id_foreign")
  entities       entities     @relation(fields: [entity_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "waiting_room_line_entity_id_foreign")
  rooms          rooms        @relation(fields: [room_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "waiting_room_line_room_id_foreign")
  users          users        @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "waiting_room_line_user_id_foreign")

  @@index([appointment_id], map: "waiting_room_line_appointment_id_index")
  @@index([contact_id], map: "waiting_room_line_contact_id_index")
  @@index([entity_id], map: "waiting_room_line_entity_id_index")
  @@index([room_id], map: "waiting_room_line_room_id_index")
  @@index([user_id], map: "waiting_room_line_user_id_index")
}

model whatsapp_links {
  id            BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  created_at    DateTime? @db.Timestamp(0)
  updated_at    DateTime? @db.Timestamp(0)
  message       String    @db.Text
  cellphone     String    @db.VarChar(255)
  whatsapp_link String    @db.VarChar(2000)
  link_id       Int?      @db.UnsignedInt
  title         String    @db.VarChar(255)
  links         links?    @relation(fields: [link_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "whatsapp_links_link_id_foreign")

  @@index([link_id], map: "whatsapp_links_link_id_foreign")
}

model zenvia_conversion_retail_data {
  id          BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  response_id String    @db.VarChar(255)
  response    Json
  entity_id   Int       @db.UnsignedInt
  created_at  DateTime? @db.Timestamp(0)
  updated_at  DateTime? @db.Timestamp(0)
  entities    entities  @relation(fields: [entity_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "zenvia_conversion_retail_data_entity_id_foreign")

  @@index([entity_id], map: "zenvia_conversion_retail_data_entity_id_index")
}

enum appointment_package_automatic_renewals_day_week {
  zero  @map("0")
  one   @map("1")
  two   @map("2")
  three @map("3")
  four  @map("4")
  five  @map("5")
  six   @map("6")
}

enum bf_searches_origin_search {
  listing
  header
  index
}

enum settings_calendar_reminder {
  oneHour     @map("1h")
  twoHours    @map("2h")
  fourHours   @map("4h")
  sixHours    @map("6h")
  twelveHours @map("12h")
  oneDay      @map("1d")
  threeDays   @map("3d")
  oneWeek     @map("1s")
}

enum received_messages_whatsapp_type {
  text
  buttons
  reaction
  image
  audio
  document
  sticker
}

enum settings_calendar_sms_default_reminder {
  oneHour     @map("1h")
  twoHours    @map("2h")
  fourHours   @map("4h")
  sixHours    @map("6h")
  twelveHours @map("12h")
  oneDay      @map("1d")
  threeDays   @map("3d")
  oneWeek     @map("1s")
}

enum settings_calendar_whatsapp_default_reminder {
  oneHour     @map("1h")
  twoHours    @map("2h")
  fourHours   @map("4h")
  sixHours    @map("6h")
  twelveHours @map("12h")
  oneDay      @map("1d")
  threeDays   @map("3d")
  oneWeek     @map("1s")
}

enum settings_calendar_default_frequency {
  daily        @map("d")
  weekly       @map("s")
  doubleWeekly @map("2s")
  threeWeekly  @map("3s")
  fourMonthly  @map("4s")
  monthly      @map("m")
}

enum evaluations_image_area {
  body_m_png @map("body-m.png")
  body_f_png @map("body-f.png")
}
